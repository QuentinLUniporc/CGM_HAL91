
Acquisition91.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009980  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009b60  08009b60  00019b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d38  08009d38  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d40  08009d40  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d40  08009d40  00019d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08009d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000084  08009dcc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08009dcc  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d258  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035e3  00000000  00000000  0003d34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001958  00000000  00000000  00040938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013b8  00000000  00000000  00042290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002434c  00000000  00000000  00043648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d4ef  00000000  00000000  00067994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f09bd  00000000  00000000  00084e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000075e4  00000000  00000000  00175840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0017ce24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009b48 	.word	0x08009b48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	08009b48 	.word	0x08009b48

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b090      	sub	sp, #64	; 0x40
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t value_adc = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t command[4]={0, 841, 2682, 4060};
 80005c6:	4a95      	ldr	r2, [pc, #596]	; (800081c <main+0x260>)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t DAC_OUT[4] = {0, 841, 1985, 4095};
 80005d4:	4a92      	ldr	r2, [pc, #584]	; (8000820 <main+0x264>)
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005de:	e883 0003 	stmia.w	r3, {r0, r1}
	etat=ETAT_INIT;
 80005e2:	4b90      	ldr	r3, [pc, #576]	; (8000824 <main+0x268>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef currTime = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 fb3e 	bl	8001c76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f941 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fcdd 	bl	8000fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fca9 	bl	8000f58 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000606:	f000 fab7 	bl	8000b78 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800060a:	f000 f993 	bl	8000934 <MX_ADC1_Init>
  MX_SPI2_Init();
 800060e:	f000 fbb1 	bl	8000d74 <MX_SPI2_Init>
  MX_ADC2_Init();
 8000612:	f000 fa07 	bl	8000a24 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000616:	f000 fa6b 	bl	8000af0 <MX_DAC1_Init>
  MX_SPI3_Init();
 800061a:	f000 fbe9 	bl	8000df0 <MX_SPI3_Init>
  MX_UART4_Init();
 800061e:	f000 faf5 	bl	8000c0c <MX_UART4_Init>
  MX_RTC_Init();
 8000622:	f000 fb45 	bl	8000cb0 <MX_RTC_Init>
  MX_TIM3_Init();
 8000626:	f000 fc21 	bl	8000e6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&hlpuart1);
 800062a:	487f      	ldr	r0, [pc, #508]	; (8000828 <main+0x26c>)
 800062c:	f000 fdbe 	bl	80011ac <RetargetInit>
  printf("\r\n");
 8000630:	487e      	ldr	r0, [pc, #504]	; (800082c <main+0x270>)
 8000632:	f008 fb37 	bl	8008ca4 <puts>
  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
 8000636:	487e      	ldr	r0, [pc, #504]	; (8000830 <main+0x274>)
 8000638:	f008 fb34 	bl	8008ca4 <puts>
  printf("Service d'acquisition de la données pour calcul du TMP!\r\n");
 800063c:	487d      	ldr	r0, [pc, #500]	; (8000834 <main+0x278>)
 800063e:	f008 fb31 	bl	8008ca4 <puts>
  printf("SYSCLK = 48 MHz\r\n");
 8000642:	487d      	ldr	r0, [pc, #500]	; (8000838 <main+0x27c>)
 8000644:	f008 fb2e 	bl	8008ca4 <puts>
  printf("Crée par Quentin Lehérissé\r\n");
 8000648:	487c      	ldr	r0, [pc, #496]	; (800083c <main+0x280>)
 800064a:	f008 fb2b 	bl	8008ca4 <puts>
  printf("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\r\n");
 800064e:	4878      	ldr	r0, [pc, #480]	; (8000830 <main+0x274>)
 8000650:	f008 fb28 	bl	8008ca4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	487a      	ldr	r0, [pc, #488]	; (8000840 <main+0x284>)
 8000658:	f002 fd99 	bl	800318e <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, 0, 1200);
 800065c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	4876      	ldr	r0, [pc, #472]	; (8000840 <main+0x284>)
 8000666:	f002 fde5 	bl	8003234 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 800066a:	2110      	movs	r1, #16
 800066c:	4874      	ldr	r0, [pc, #464]	; (8000840 <main+0x284>)
 800066e:	f002 fd8e 	bl	800318e <HAL_DAC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	4873      	ldr	r0, [pc, #460]	; (8000844 <main+0x288>)
 8000676:	f005 f841 	bl	80056fc <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart4, message, 8);
 800067a:	2208      	movs	r2, #8
 800067c:	4972      	ldr	r1, [pc, #456]	; (8000848 <main+0x28c>)
 800067e:	4873      	ldr	r0, [pc, #460]	; (800084c <main+0x290>)
 8000680:	f006 fa32 	bl	8006ae8 <HAL_UART_Receive_IT>
  while (1)
  {


		  switch(etat){
 8000684:	4b67      	ldr	r3, [pc, #412]	; (8000824 <main+0x268>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3b01      	subs	r3, #1
 800068a:	2b03      	cmp	r3, #3
 800068c:	f200 80b4 	bhi.w	80007f8 <main+0x23c>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <main+0xdc>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006c7 	.word	0x080006c7
 80006a0:	080007d9 	.word	0x080007d9
 80006a4:	08000815 	.word	0x08000815

		  case ETAT_INIT:
			  HAL_GPIO_WritePin(GPIOC, PC6_Dispo_Pin, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2140      	movs	r1, #64	; 0x40
 80006ac:	4868      	ldr	r0, [pc, #416]	; (8000850 <main+0x294>)
 80006ae:	f003 fb8d 	bl	8003dcc <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f001 fb50 	bl	8001d58 <HAL_Delay>
			  printf("fin_etat_init\r\n");
 80006b8:	4866      	ldr	r0, [pc, #408]	; (8000854 <main+0x298>)
 80006ba:	f008 faf3 	bl	8008ca4 <puts>
			  etat=ETAT_HEURE;
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <main+0x268>)
 80006c0:	2202      	movs	r2, #2
 80006c2:	701a      	strb	r2, [r3, #0]
			  break;
 80006c4:	e0a9      	b.n	800081a <main+0x25e>
		  case ETAT_HEURE:

			  HAL_GPIO_WritePin(GPIOC, PC6_Dispo_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	4861      	ldr	r0, [pc, #388]	; (8000850 <main+0x294>)
 80006cc:	f003 fb7e 	bl	8003dcc <HAL_GPIO_WritePin>


			  if(msg_received)
 80006d0:	4b61      	ldr	r3, [pc, #388]	; (8000858 <main+0x29c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f000 809f 	beq.w	8000818 <main+0x25c>
			  {

				  printf("\r\n");
 80006da:	4854      	ldr	r0, [pc, #336]	; (800082c <main+0x270>)
 80006dc:	f008 fae2 	bl	8008ca4 <puts>
				  for(i=0;i<buffer_size;i++)
 80006e0:	4b5e      	ldr	r3, [pc, #376]	; (800085c <main+0x2a0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	e00f      	b.n	8000708 <main+0x14c>
				  	{
				  		c=message[i];
 80006e8:	4b5c      	ldr	r3, [pc, #368]	; (800085c <main+0x2a0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a56      	ldr	r2, [pc, #344]	; (8000848 <main+0x28c>)
 80006ee:	5cd2      	ldrb	r2, [r2, r3]
 80006f0:	4b5b      	ldr	r3, [pc, #364]	; (8000860 <main+0x2a4>)
 80006f2:	701a      	strb	r2, [r3, #0]
				  		printf("%c",c);
 80006f4:	4b5a      	ldr	r3, [pc, #360]	; (8000860 <main+0x2a4>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f008 fa77 	bl	8008bec <putchar>
				  for(i=0;i<buffer_size;i++)
 80006fe:	4b57      	ldr	r3, [pc, #348]	; (800085c <main+0x2a0>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	3301      	adds	r3, #1
 8000704:	4a55      	ldr	r2, [pc, #340]	; (800085c <main+0x2a0>)
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b54      	ldr	r3, [pc, #336]	; (800085c <main+0x2a0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b0d      	cmp	r3, #13
 800070e:	ddeb      	ble.n	80006e8 <main+0x12c>
				  	}
				  unsigned int a=(message[0]-48)*10;
 8000710:	4b4d      	ldr	r3, [pc, #308]	; (8000848 <main+0x28c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
				  unsigned int b=message[1]-48;
 8000722:	4b49      	ldr	r3, [pc, #292]	; (8000848 <main+0x28c>)
 8000724:	785b      	ldrb	r3, [r3, #1]
 8000726:	3b30      	subs	r3, #48	; 0x30
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
				  unsigned int Hour =a+b;
 800072a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800072c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800072e:	4413      	add	r3, r2
 8000730:	633b      	str	r3, [r7, #48]	; 0x30
				  a=(message[3]-48)*10;
 8000732:	4b45      	ldr	r3, [pc, #276]	; (8000848 <main+0x28c>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
				  b=message[4]-48;
 8000744:	4b40      	ldr	r3, [pc, #256]	; (8000848 <main+0x28c>)
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	3b30      	subs	r3, #48	; 0x30
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
				  unsigned int Minutes = a+b;
 800074c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000750:	4413      	add	r3, r2
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
				  a=(message[6]-48)*10;
 8000754:	4b3c      	ldr	r3, [pc, #240]	; (8000848 <main+0x28c>)
 8000756:	799b      	ldrb	r3, [r3, #6]
 8000758:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
				  b=message[7]-48;
 8000766:	4b38      	ldr	r3, [pc, #224]	; (8000848 <main+0x28c>)
 8000768:	79db      	ldrb	r3, [r3, #7]
 800076a:	3b30      	subs	r3, #48	; 0x30
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
				  unsigned int Seconds =a+b;
 800076e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000772:	4413      	add	r3, r2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
				  currTime.Hours= Hour;
 8000776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000778:	b2db      	uxtb	r3, r3
 800077a:	713b      	strb	r3, [r7, #4]
				  currTime.Minutes=Minutes;
 800077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800077e:	b2db      	uxtb	r3, r3
 8000780:	717b      	strb	r3, [r7, #5]
				  currTime.Seconds=Seconds;
 8000782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000784:	b2db      	uxtb	r3, r3
 8000786:	71bb      	strb	r3, [r7, #6]
				  HAL_RTC_SetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <main+0x2a8>)
 8000790:	f004 fbf5 	bl	8004f7e <HAL_RTC_SetTime>
				  HAL_Delay(50);
 8000794:	2032      	movs	r0, #50	; 0x32
 8000796:	f001 fadf 	bl	8001d58 <HAL_Delay>
				  HAL_RTC_GetTime(&hrtc, &currTime, RTC_FORMAT_BIN);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	4619      	mov	r1, r3
 80007a0:	4830      	ldr	r0, [pc, #192]	; (8000864 <main+0x2a8>)
 80007a2:	f004 fc89 	bl	80050b8 <HAL_RTC_GetTime>
				  printf("\r\n reçu: %d:%d:%d", currTime.Hours, currTime.Minutes, currTime.Seconds);
 80007a6:	793b      	ldrb	r3, [r7, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	461a      	mov	r2, r3
 80007ae:	79bb      	ldrb	r3, [r7, #6]
 80007b0:	482d      	ldr	r0, [pc, #180]	; (8000868 <main+0x2ac>)
 80007b2:	f008 fa09 	bl	8008bc8 <iprintf>
				  HAL_UART_Transmit(&huart4, &messagetx, buffer_sizetx, HAL_MAX_DELAY);
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	220b      	movs	r2, #11
 80007bc:	492b      	ldr	r1, [pc, #172]	; (800086c <main+0x2b0>)
 80007be:	4823      	ldr	r0, [pc, #140]	; (800084c <main+0x290>)
 80007c0:	f006 f828 	bl	8006814 <HAL_UART_Transmit>
				  printf("\r\nfin_etat_heure\r\n");
 80007c4:	482a      	ldr	r0, [pc, #168]	; (8000870 <main+0x2b4>)
 80007c6:	f008 fa6d 	bl	8008ca4 <puts>
			  	  etat=ETAT_MARCHE;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <main+0x268>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	701a      	strb	r2, [r3, #0]
				  msg_received=0;
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <main+0x29c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
			  }

		  	  break;
 80007d6:	e01f      	b.n	8000818 <main+0x25c>
		  case ETAT_MARCHE:

			  if (state13){
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <main+0x2b8>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d005      	beq.n	80007ec <main+0x230>
				  HAL_GPIO_WritePin(GPIOC, PC6_Dispo_Pin, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2140      	movs	r1, #64	; 0x40
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <main+0x294>)
 80007e6:	f003 faf1 	bl	8003dcc <HAL_GPIO_WritePin>
				  /// prend des valeurs de la sonde, fonction it du codeur à agrémenter de la prise de valeur de réflectence.
			  }
			  else{
				  HAL_GPIO_WritePin(GPIOC, PC6_Dispo_Pin, 1);
			  }
			  break;
 80007ea:	e016      	b.n	800081a <main+0x25e>
				  HAL_GPIO_WritePin(GPIOC, PC6_Dispo_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4817      	ldr	r0, [pc, #92]	; (8000850 <main+0x294>)
 80007f2:	f003 faeb 	bl	8003dcc <HAL_GPIO_WritePin>
			  break;
 80007f6:	e010      	b.n	800081a <main+0x25e>

		  case ETAT_MAJ:
			  break;

		  default:
			  HAL_Delay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f001 faac 	bl	8001d58 <HAL_Delay>
			  printf("No_state_error!\r\n");
 8000800:	481d      	ldr	r0, [pc, #116]	; (8000878 <main+0x2bc>)
 8000802:	f008 fa4f 	bl	8008ca4 <puts>
			  printf("Go to etat_Init!\r\n");
 8000806:	481d      	ldr	r0, [pc, #116]	; (800087c <main+0x2c0>)
 8000808:	f008 fa4c 	bl	8008ca4 <puts>
			  etat=ETAT_INIT;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <main+0x268>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e737      	b.n	8000684 <main+0xc8>
			  break;
 8000814:	bf00      	nop
 8000816:	e735      	b.n	8000684 <main+0xc8>
		  	  break;
 8000818:	bf00      	nop
		  switch(etat){
 800081a:	e733      	b.n	8000684 <main+0xc8>
 800081c:	08009c70 	.word	0x08009c70
 8000820:	08009c78 	.word	0x08009c78
 8000824:	200004a8 	.word	0x200004a8
 8000828:	200001ec 	.word	0x200001ec
 800082c:	08009b60 	.word	0x08009b60
 8000830:	08009b64 	.word	0x08009b64
 8000834:	08009ba0 	.word	0x08009ba0
 8000838:	08009bdc 	.word	0x08009bdc
 800083c:	08009bf0 	.word	0x08009bf0
 8000840:	200001d8 	.word	0x200001d8
 8000844:	2000045c 	.word	0x2000045c
 8000848:	20000000 	.word	0x20000000
 800084c:	2000027c 	.word	0x2000027c
 8000850:	48000800 	.word	0x48000800
 8000854:	08009c10 	.word	0x08009c10
 8000858:	200004b4 	.word	0x200004b4
 800085c:	200004ac 	.word	0x200004ac
 8000860:	200004b2 	.word	0x200004b2
 8000864:	2000036c 	.word	0x2000036c
 8000868:	08009c20 	.word	0x08009c20
 800086c:	20000010 	.word	0x20000010
 8000870:	08009c34 	.word	0x08009c34
 8000874:	200004b1 	.word	0x200004b1
 8000878:	08009c48 	.word	0x08009c48
 800087c:	08009c5c 	.word	0x08009c5c

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0318 	add.w	r3, r7, #24
 800088a:	2238      	movs	r2, #56	; 0x38
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f008 fb96 	bl	8008fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008a6:	f003 fad1 	bl	8003e4c <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008aa:	f003 fabf 	bl	8003e2c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <SystemClock_Config+0xb0>)
 80008b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b4:	4a1e      	ldr	r2, [pc, #120]	; (8000930 <SystemClock_Config+0xb0>)
 80008b6:	f023 0318 	bic.w	r3, r3, #24
 80008ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80008be:	2306      	movs	r3, #6
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008d8:	2304      	movs	r3, #4
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008dc:	2318      	movs	r3, #24
 80008de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e4:	2302      	movs	r3, #2
 80008e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ec:	f107 0318 	add.w	r3, r7, #24
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 fb5f 	bl	8003fb4 <HAL_RCC_OscConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008fc:	f000 fc50 	bl	80011a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000900:	230f      	movs	r3, #15
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000904:	2303      	movs	r3, #3
 8000906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2101      	movs	r1, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f003 fe63 	bl	80045e4 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000924:	f000 fc3c 	bl	80011a0 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000

08000934 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2220      	movs	r2, #32
 800094a:	2100      	movs	r1, #0
 800094c:	4618      	mov	r0, r3
 800094e:	f008 fb37 	bl	8008fc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000954:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000958:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_ADC1_Init+0xe8>)
 800095c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000960:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000968:	4b2c      	ldr	r3, [pc, #176]	; (8000a1c <MX_ADC1_Init+0xe8>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800096e:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000974:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097a:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_ADC1_Init+0xe8>)
 800097c:	2204      	movs	r2, #4
 800097e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000980:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000982:	2200      	movs	r2, #0
 8000984:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800098c:	4b23      	ldr	r3, [pc, #140]	; (8000a1c <MX_ADC1_Init+0xe8>)
 800098e:	2201      	movs	r2, #1
 8000990:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000992:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099a:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_ADC1_Init+0xe8>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009be:	f001 fbc7 	bl	8002150 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80009c8:	f000 fbea 	bl	80011a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_ADC1_Init+0xe8>)
 80009d8:	f002 f9c0 	bl	8002d5c <HAL_ADCEx_MultiModeConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80009e2:	f000 fbdd 	bl	80011a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ADC1_Init+0xec>)
 80009e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ea:	2306      	movs	r3, #6
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f2:	237f      	movs	r3, #127	; 0x7f
 80009f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f6:	2304      	movs	r3, #4
 80009f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <MX_ADC1_Init+0xe8>)
 8000a04:	f001 fd58 	bl	80024b8 <HAL_ADC_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000a0e:	f000 fbc7 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	; 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000a0 	.word	0x200000a0
 8000a20:	04300002 	.word	0x04300002

08000a24 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2220      	movs	r2, #32
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f008 fac5 	bl	8008fc0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a38:	4a2b      	ldr	r2, [pc, #172]	; (8000ae8 <MX_ADC2_Init+0xc4>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a42:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000aa0:	f001 fb56 	bl	8002150 <HAL_ADC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000aaa:	f000 fb79 	bl	80011a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_ADC2_Init+0xc8>)
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab2:	2306      	movs	r3, #6
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aba:	237f      	movs	r3, #127	; 0x7f
 8000abc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_ADC2_Init+0xc0>)
 8000acc:	f001 fcf4 	bl	80024b8 <HAL_ADC_ConfigChannel>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ad6:	f000 fb63 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3720      	adds	r7, #32
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000010c 	.word	0x2000010c
 8000ae8:	50000100 	.word	0x50000100
 8000aec:	0c900008 	.word	0x0c900008

08000af0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	; 0x30
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000af6:	463b      	mov	r3, r7
 8000af8:	2230      	movs	r2, #48	; 0x30
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 fa5f 	bl	8008fc0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_DAC1_Init+0x80>)
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <MX_DAC1_Init+0x84>)
 8000b06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b08:	4819      	ldr	r0, [pc, #100]	; (8000b70 <MX_DAC1_Init+0x80>)
 8000b0a:	f002 fb1e 	bl	800314a <HAL_DAC_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b14:	f000 fb44 	bl	80011a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	480b      	ldr	r0, [pc, #44]	; (8000b70 <MX_DAC1_Init+0x80>)
 8000b44:	f002 fb9e 	bl	8003284 <HAL_DAC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000b4e:	f000 fb27 	bl	80011a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b52:	463b      	mov	r3, r7
 8000b54:	2210      	movs	r2, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_DAC1_Init+0x80>)
 8000b5a:	f002 fb93 	bl	8003284 <HAL_DAC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000b64:	f000 fb1c 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001d8 	.word	0x200001d8
 8000b74:	50000800 	.word	0x50000800

08000b78 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b7c:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b7e:	4a22      	ldr	r2, [pc, #136]	; (8000c08 <MX_LPUART1_UART_Init+0x90>)
 8000b80:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bba:	4812      	ldr	r0, [pc, #72]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000bbc:	f005 fdda 	bl	8006774 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bc6:	f000 faeb 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000bce:	f007 fe81 	bl	80088d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000bd8:	f000 fae2 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4809      	ldr	r0, [pc, #36]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000be0:	f007 feb6 	bl	8008950 <HAL_UARTEx_SetRxFifoThreshold>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000bea:	f000 fad9 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_LPUART1_UART_Init+0x8c>)
 8000bf0:	f007 fe37 	bl	8008862 <HAL_UARTEx_DisableFifoMode>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000bfa:	f000 fad1 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001ec 	.word	0x200001ec
 8000c08:	40008000 	.word	0x40008000

08000c0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c10:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c12:	4a26      	ldr	r2, [pc, #152]	; (8000cac <MX_UART4_Init+0xa0>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b20      	ldr	r3, [pc, #128]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_8;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c42:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c4c:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c54:	2220      	movs	r2, #32
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c58:	4b13      	ldr	r3, [pc, #76]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c5e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c60:	4811      	ldr	r0, [pc, #68]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c62:	f005 fd87 	bl	8006774 <HAL_UART_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_UART4_Init+0x64>
  {
    Error_Handler();
 8000c6c:	f000 fa98 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	480d      	ldr	r0, [pc, #52]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c74:	f007 fe2e 	bl	80088d4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_UART4_Init+0x76>
  {
    Error_Handler();
 8000c7e:	f000 fa8f 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c86:	f007 fe63 	bl	8008950 <HAL_UARTEx_SetRxFifoThreshold>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_UART4_Init+0x88>
  {
    Error_Handler();
 8000c90:	f000 fa86 	bl	80011a0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_UART4_Init+0x9c>)
 8000c96:	f007 fda9 	bl	80087ec <HAL_UARTEx_EnableFifoMode>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_UART4_Init+0x98>
  {
    Error_Handler();
 8000ca0:	f000 fa7e 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000027c 	.word	0x2000027c
 8000cac:	40004c00 	.word	0x40004c00

08000cb0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cca:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <MX_RTC_Init+0xc0>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cce:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cd6:	227f      	movs	r2, #127	; 0x7f
 8000cd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cda:	4b24      	ldr	r3, [pc, #144]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cdc:	22ff      	movs	r2, #255	; 0xff
 8000cde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ce0:	4b22      	ldr	r3, [pc, #136]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000d02:	f004 f8c7 	bl	8004e94 <HAL_RTC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000d0c:	f000 fa48 	bl	80011a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000d30:	f004 f925 	bl	8004f7e <HAL_RTC_SetTime>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 8000d3a:	f000 fa31 	bl	80011a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000d42:	2308      	movs	r3, #8
 8000d44:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000d4a:	2323      	movs	r3, #35	; 0x23
 8000d4c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_RTC_Init+0xbc>)
 8000d56:	f004 fa0b 	bl	8005170 <HAL_RTC_SetDate>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000d60:	f000 fa1e 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	2000036c 	.word	0x2000036c
 8000d70:	40002800 	.word	0x40002800

08000d74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <MX_SPI2_Init+0x78>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d86:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000dce:	2208      	movs	r2, #8
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_SPI2_Init+0x74>)
 8000dd4:	f004 fb2e 	bl	8005434 <HAL_SPI_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dde:	f000 f9df 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000394 	.word	0x20000394
 8000dec:	40003800 	.word	0x40003800

08000df0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	; (8000e68 <MX_SPI3_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e3e:	2207      	movs	r2, #7
 8000e40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e4a:	2208      	movs	r2, #8
 8000e4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_SPI3_Init+0x74>)
 8000e50:	f004 faf0 	bl	8005434 <HAL_SPI_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f9a1 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200003f8 	.word	0x200003f8
 8000e68:	40003c00 	.word	0x40003c00

08000e6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	; 0x38
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ea0:	4a2c      	ldr	r2, [pc, #176]	; (8000f54 <MX_TIM3_Init+0xe8>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000eb2:	22ff      	movs	r2, #255	; 0xff
 8000eb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec2:	4823      	ldr	r0, [pc, #140]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ec4:	f004 fb61 	bl	800558a <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000ece:	f000 f967 	bl	80011a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000edc:	4619      	mov	r1, r3
 8000ede:	481c      	ldr	r0, [pc, #112]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ee0:	f004 fe2c 	bl	8005b3c <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000eea:	f000 f959 	bl	80011a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000eee:	4818      	ldr	r0, [pc, #96]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000ef0:	f004 fba2 	bl	8005638 <HAL_TIM_PWM_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000efa:	f000 f951 	bl	80011a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4810      	ldr	r0, [pc, #64]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000f0e:	f005 fba3 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f18:	f000 f942 	bl	80011a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 200;
 8000f20:	23c8      	movs	r3, #200	; 0xc8
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	4619      	mov	r1, r3
 8000f32:	4807      	ldr	r0, [pc, #28]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000f34:	f004 fcee 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f3e:	f000 f92f 	bl	80011a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <MX_TIM3_Init+0xe4>)
 8000f44:	f000 fcec 	bl	8001920 <HAL_TIM_MspPostInit>

}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	; 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000045c 	.word	0x2000045c
 8000f54:	40000400 	.word	0x40000400

08000f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f5e:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	6493      	str	r3, [r2, #72]	; 0x48
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6493      	str	r3, [r2, #72]	; 0x48
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <MX_DMA_Init+0x60>)
 8000f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200b      	movs	r0, #11
 8000f94:	f002 f8a5 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f98:	200b      	movs	r0, #11
 8000f9a:	f002 f8bc 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200c      	movs	r0, #12
 8000fa4:	f002 f89d 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f002 f8b4 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40021000 	.word	0x40021000

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b4e      	ldr	r3, [pc, #312]	; (800110c <MX_GPIO_Init+0x150>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a4d      	ldr	r2, [pc, #308]	; (800110c <MX_GPIO_Init+0x150>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b4b      	ldr	r3, [pc, #300]	; (800110c <MX_GPIO_Init+0x150>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b48      	ldr	r3, [pc, #288]	; (800110c <MX_GPIO_Init+0x150>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a47      	ldr	r2, [pc, #284]	; (800110c <MX_GPIO_Init+0x150>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b45      	ldr	r3, [pc, #276]	; (800110c <MX_GPIO_Init+0x150>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b42      	ldr	r3, [pc, #264]	; (800110c <MX_GPIO_Init+0x150>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a41      	ldr	r2, [pc, #260]	; (800110c <MX_GPIO_Init+0x150>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b3f      	ldr	r3, [pc, #252]	; (800110c <MX_GPIO_Init+0x150>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b3c      	ldr	r3, [pc, #240]	; (800110c <MX_GPIO_Init+0x150>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a3b      	ldr	r2, [pc, #236]	; (800110c <MX_GPIO_Init+0x150>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b39      	ldr	r3, [pc, #228]	; (800110c <MX_GPIO_Init+0x150>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC_CS_spi2_Pin|PC_CS_spi3_Pin|ldac_spi2_Pin|ldac_spi3_Pin
 8001032:	2200      	movs	r2, #0
 8001034:	214f      	movs	r1, #79	; 0x4f
 8001036:	4836      	ldr	r0, [pc, #216]	; (8001110 <MX_GPIO_Init+0x154>)
 8001038:	f002 fec8 	bl	8003dcc <HAL_GPIO_WritePin>
                          |PC6_Dispo_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	4834      	ldr	r0, [pc, #208]	; (8001114 <MX_GPIO_Init+0x158>)
 8001042:	f002 fec3 	bl	8003dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_EXTI13_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI13_Pin;
 8001046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800104c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <MX_GPIO_Init+0x154>)
 800105e:	f002 fd33 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC_CS_spi2_Pin PC_CS_spi3_Pin ldac_spi2_Pin ldac_spi3_Pin
                           PC6_Dispo_Pin */
  GPIO_InitStruct.Pin = PC_CS_spi2_Pin|PC_CS_spi3_Pin|ldac_spi2_Pin|ldac_spi3_Pin
 8001062:	234f      	movs	r3, #79	; 0x4f
 8001064:	617b      	str	r3, [r7, #20]
                          |PC6_Dispo_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001072:	f107 0314 	add.w	r3, r7, #20
 8001076:	4619      	mov	r1, r3
 8001078:	4825      	ldr	r0, [pc, #148]	; (8001110 <MX_GPIO_Init+0x154>)
 800107a:	f002 fd25 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800107e:	2306      	movs	r3, #6
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001082:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <MX_GPIO_Init+0x158>)
 8001094:	f002 fd18 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12_a_ecouter_Pin */
  GPIO_InitStruct.Pin = PA12_a_ecouter_Pin;
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA12_a_ecouter_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f002 fd09 	bl	8003ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b6:	2340      	movs	r3, #64	; 0x40
 80010b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_GPIO_Init+0x158>)
 80010ce:	f002 fcfb 	bl	8003ac8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	2007      	movs	r0, #7
 80010d8:	f002 f803 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010dc:	2007      	movs	r0, #7
 80010de:	f002 f81a 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	2008      	movs	r0, #8
 80010e8:	f001 fffb 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ec:	2008      	movs	r0, #8
 80010ee:	f002 f812 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	2028      	movs	r0, #40	; 0x28
 80010f8:	f001 fff3 	bl	80030e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fc:	2028      	movs	r0, #40	; 0x28
 80010fe:	f002 f80a 	bl	8003116 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	; 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000
 8001110:	48000800 	.word	0x48000800
 8001114:	48000400 	.word	0x48000400

08001118 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==PA12_a_ecouter_Pin)
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001128:	d109      	bne.n	800113e <HAL_GPIO_EXTI_Callback+0x26>
	{
		HAL_UART_Receive(&huart4, &message, buffer_size, HAL_MAX_DELAY);
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	220e      	movs	r2, #14
 8001130:	4905      	ldr	r1, [pc, #20]	; (8001148 <HAL_GPIO_EXTI_Callback+0x30>)
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_GPIO_EXTI_Callback+0x34>)
 8001134:	f005 fc04 	bl	8006940 <HAL_UART_Receive>
		msg_received=1;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_GPIO_EXTI_Callback+0x38>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
	}
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000000 	.word	0x20000000
 800114c:	2000027c 	.word	0x2000027c
 8001150:	200004b4 	.word	0x200004b4

08001154 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	msg_received=1;
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_UART_RxCpltCallback+0x1c>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]
	printf("msg_sended");
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <HAL_UART_RxCpltCallback+0x20>)
 8001164:	f007 fd30 	bl	8008bc8 <iprintf>

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200004b4 	.word	0x200004b4
 8001174:	08009c80 	.word	0x08009c80

08001178 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){printf("error uart4");}
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_UART_ErrorCallback+0x20>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d102      	bne.n	800118e <HAL_UART_ErrorCallback+0x16>
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <HAL_UART_ErrorCallback+0x24>)
 800118a:	f007 fd1d 	bl	8008bc8 <iprintf>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000027c 	.word	0x2000027c
 800119c:	08009c8c 	.word	0x08009c8c

080011a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <Error_Handler+0x8>
	...

080011ac <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <RetargetInit+0x28>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <RetargetInit+0x2c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6898      	ldr	r0, [r3, #8]
 80011c0:	2300      	movs	r3, #0
 80011c2:	2202      	movs	r2, #2
 80011c4:	2100      	movs	r1, #0
 80011c6:	f007 fd75 	bl	8008cb4 <setvbuf>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200004b8 	.word	0x200004b8
 80011d8:	20000080 	.word	0x20000080

080011dc <_isatty>:

int _isatty(int fd) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db04      	blt.n	80011f4 <_isatty+0x18>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	dc01      	bgt.n	80011f4 <_isatty+0x18>
    return 1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e005      	b.n	8001200 <_isatty+0x24>

  errno = EBADF;
 80011f4:	f007 ff32 	bl	800905c <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2209      	movs	r2, #9
 80011fc:	601a      	str	r2, [r3, #0]
  return 0;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_write>:

int _write(int fd, char* ptr, int len) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d002      	beq.n	8001220 <_write+0x18>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d111      	bne.n	8001244 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <_write+0x54>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	b29a      	uxth	r2, r3
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	f005 faf1 	bl	8006814 <HAL_UART_Transmit>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <_write+0x38>
      return len;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	e008      	b.n	8001252 <_write+0x4a>
    else
      return EIO;
 8001240:	2305      	movs	r3, #5
 8001242:	e006      	b.n	8001252 <_write+0x4a>
  }
  errno = EBADF;
 8001244:	f007 ff0a 	bl	800905c <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	2209      	movs	r2, #9
 800124c:	601a      	str	r2, [r3, #0]
  return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200004b8 	.word	0x200004b8

08001260 <_close>:

int _close(int fd) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db04      	blt.n	8001278 <_close+0x18>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b02      	cmp	r3, #2
 8001272:	dc01      	bgt.n	8001278 <_close+0x18>
    return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e006      	b.n	8001286 <_close+0x26>

  errno = EBADF;
 8001278:	f007 fef0 	bl	800905c <__errno>
 800127c:	4603      	mov	r3, r0
 800127e:	2209      	movs	r2, #9
 8001280:	601a      	str	r2, [r3, #0]
  return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800129a:	f007 fedf 	bl	800905c <__errno>
 800129e:	4603      	mov	r3, r0
 80012a0:	2209      	movs	r2, #9
 80012a2:	601a      	str	r2, [r3, #0]
  return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <_read>:

int _read(int fd, char* ptr, int len) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d110      	bne.n	80012e4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <_read+0x4c>)
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	2201      	movs	r2, #1
 80012cc:	68b9      	ldr	r1, [r7, #8]
 80012ce:	f005 fb37 	bl	8006940 <HAL_UART_Receive>
 80012d2:	4603      	mov	r3, r0
 80012d4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <_read+0x30>
      return 1;
 80012dc:	2301      	movs	r3, #1
 80012de:	e008      	b.n	80012f2 <_read+0x42>
    else
      return EIO;
 80012e0:	2305      	movs	r3, #5
 80012e2:	e006      	b.n	80012f2 <_read+0x42>
  }
  errno = EBADF;
 80012e4:	f007 feba 	bl	800905c <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2209      	movs	r2, #9
 80012ec:	601a      	str	r2, [r3, #0]
  return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200004b8 	.word	0x200004b8

08001300 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db08      	blt.n	8001322 <_fstat+0x22>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	dc05      	bgt.n	8001322 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131c:	605a      	str	r2, [r3, #4]
    return 0;
 800131e:	2300      	movs	r3, #0
 8001320:	e005      	b.n	800132e <_fstat+0x2e>
  }

  errno = EBADF;
 8001322:	f007 fe9b 	bl	800905c <__errno>
 8001326:	4603      	mov	r3, r0
 8001328:	2209      	movs	r2, #9
 800132a:	601a      	str	r2, [r3, #0]
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <HAL_MspInit+0x44>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_MspInit+0x44>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_MspInit+0x44>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x44>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x44>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x44>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800136e:	f002 fe11 	bl	8003f94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0a0      	sub	sp, #128	; 0x80
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	2250      	movs	r2, #80	; 0x50
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f007 fe0d 	bl	8008fc0 <memset>
  if(hadc->Instance==ADC1)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013ae:	d16a      	bne.n	8001486 <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 fb2b 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80013cc:	f7ff fee8 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d0:	4b50      	ldr	r3, [pc, #320]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80013d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013da:	4b4e      	ldr	r3, [pc, #312]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d10b      	bne.n	80013fa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013e2:	4b4d      	ldr	r3, [pc, #308]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80013e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b4a      	ldr	r3, [pc, #296]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_ADC_MspInit+0x198>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_ADC_MspInit+0x198>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001412:	2303      	movs	r3, #3
 8001414:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001416:	2303      	movs	r3, #3
 8001418:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001428:	f002 fb4e 	bl	8003ac8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800142c:	4b3b      	ldr	r3, [pc, #236]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800142e:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <HAL_ADC_MspInit+0x1a0>)
 8001430:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001432:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001434:	2205      	movs	r2, #5
 8001436:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800143e:	4b37      	ldr	r3, [pc, #220]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001444:	4b35      	ldr	r3, [pc, #212]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001446:	2280      	movs	r2, #128	; 0x80
 8001448:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001458:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800145c:	2200      	movs	r2, #0
 800145e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001460:	4b2e      	ldr	r3, [pc, #184]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001466:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800146a:	f002 f8b3 	bl	80035d4 <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001474:	f7ff fe94 	bl	80011a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <HAL_ADC_MspInit+0x19c>)
 800147c:	655a      	str	r2, [r3, #84]	; 0x54
 800147e:	4a27      	ldr	r2, [pc, #156]	; (800151c <HAL_ADC_MspInit+0x19c>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001484:	e042      	b.n	800150c <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a26      	ldr	r2, [pc, #152]	; (8001524 <HAL_ADC_MspInit+0x1a4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d13d      	bne.n	800150c <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001494:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001496:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800149a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 fabb 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80014ac:	f7ff fe78 	bl	80011a0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80014b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_ADC_MspInit+0x194>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d10b      	bne.n	80014da <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_ADC_MspInit+0x198>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014f2:	23c0      	movs	r3, #192	; 0xc0
 80014f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f002 fade 	bl	8003ac8 <HAL_GPIO_Init>
}
 800150c:	bf00      	nop
 800150e:	3780      	adds	r7, #128	; 0x80
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200004bc 	.word	0x200004bc
 8001518:	40021000 	.word	0x40021000
 800151c:	20000178 	.word	0x20000178
 8001520:	40020008 	.word	0x40020008
 8001524:	50000100 	.word	0x50000100

08001528 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a15      	ldr	r2, [pc, #84]	; (800159c <HAL_DAC_MspInit+0x74>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d124      	bne.n	8001594 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_DAC_MspInit+0x78>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800157a:	2330      	movs	r3, #48	; 0x30
 800157c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800157e:	2303      	movs	r3, #3
 8001580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f002 fa9a 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	50000800 	.word	0x50000800
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0a0      	sub	sp, #128	; 0x80
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	2250      	movs	r2, #80	; 0x50
 80015c2:	2100      	movs	r1, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f007 fcfb 	bl	8008fc0 <memset>
  if(huart->Instance==LPUART1)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_UART_MspInit+0x188>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d137      	bne.n	8001644 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015d4:	2320      	movs	r3, #32
 80015d6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4618      	mov	r0, r3
 80015e2:	f003 fa1b 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015ec:	f7ff fdd8 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_UART_MspInit+0x18c>)
 80015f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f4:	4a4e      	ldr	r2, [pc, #312]	; (8001730 <HAL_UART_MspInit+0x18c>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_UART_MspInit+0x18c>)
 80015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	61bb      	str	r3, [r7, #24]
 8001606:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_UART_MspInit+0x18c>)
 800160a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160c:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_UART_MspInit+0x18c>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001614:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001620:	230c      	movs	r3, #12
 8001622:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001630:	230c      	movs	r3, #12
 8001632:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f002 fa43 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001642:	e06e      	b.n	8001722 <HAL_UART_MspInit+0x17e>
  else if(huart->Instance==UART4)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <HAL_UART_MspInit+0x190>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d169      	bne.n	8001722 <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800164e:	2308      	movs	r3, #8
 8001650:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f9de 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001666:	f7ff fd9b 	bl	80011a0 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_UART_MspInit+0x18c>)
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	4a30      	ldr	r2, [pc, #192]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	4b2e      	ldr	r3, [pc, #184]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a2a      	ldr	r2, [pc, #168]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_UART_MspInit+0x18c>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800169a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800169e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	2300      	movs	r3, #0
 80016aa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80016ac:	2305      	movs	r3, #5
 80016ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016b4:	4619      	mov	r1, r3
 80016b6:	4820      	ldr	r0, [pc, #128]	; (8001738 <HAL_UART_MspInit+0x194>)
 80016b8:	f002 fa06 	bl	8003ac8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Channel2;
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_UART_MspInit+0x198>)
 80016be:	4a20      	ldr	r2, [pc, #128]	; (8001740 <HAL_UART_MspInit+0x19c>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80016c2:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_UART_MspInit+0x198>)
 80016c4:	221e      	movs	r2, #30
 80016c6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c8:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_UART_MspInit+0x198>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_UART_MspInit+0x198>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_MspInit+0x198>)
 80016d6:	2280      	movs	r2, #128	; 0x80
 80016d8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x198>)
 80016dc:	2200      	movs	r2, #0
 80016de:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_UART_MspInit+0x198>)
 80016e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016e6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_UART_MspInit+0x198>)
 80016ea:	2220      	movs	r2, #32
 80016ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_UART_MspInit+0x198>)
 80016f0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <HAL_UART_MspInit+0x198>)
 80016f8:	f001 ff6c 	bl	80035d4 <HAL_DMA_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8001702:	f7ff fd4d 	bl	80011a0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_UART_MspInit+0x198>)
 800170a:	67da      	str	r2, [r3, #124]	; 0x7c
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <HAL_UART_MspInit+0x198>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2034      	movs	r0, #52	; 0x34
 8001718:	f001 fce3 	bl	80030e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800171c:	2034      	movs	r0, #52	; 0x34
 800171e:	f001 fcfa 	bl	8003116 <HAL_NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3780      	adds	r7, #128	; 0x80
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40008000 	.word	0x40008000
 8001730:	40021000 	.word	0x40021000
 8001734:	40004c00 	.word	0x40004c00
 8001738:	48000800 	.word	0x48000800
 800173c:	2000030c 	.word	0x2000030c
 8001740:	4002001c 	.word	0x4002001c

08001744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b098      	sub	sp, #96	; 0x60
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2250      	movs	r2, #80	; 0x50
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f007 fc33 	bl	8008fc0 <memset>
  if(hrtc->Instance==RTC)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a15      	ldr	r2, [pc, #84]	; (80017b4 <HAL_RTC_MspInit+0x70>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d123      	bne.n	80017ac <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001764:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001768:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800176a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800176e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4618      	mov	r0, r3
 8001776:	f003 f951 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001780:	f7ff fd0e 	bl	80011a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_RTC_MspInit+0x74>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_RTC_MspInit+0x74>)
 800178c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_RTC_MspInit+0x74>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_RTC_MspInit+0x74>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6593      	str	r3, [r2, #88]	; 0x58
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <HAL_RTC_MspInit+0x74>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017ac:	bf00      	nop
 80017ae:	3760      	adds	r7, #96	; 0x60
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40002800 	.word	0x40002800
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	; 0x30
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a3c      	ldr	r2, [pc, #240]	; (80018cc <HAL_SPI_MspInit+0x110>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d145      	bne.n	800186a <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a3b      	ldr	r2, [pc, #236]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 80017e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a35      	ldr	r2, [pc, #212]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 80017fc:	f043 0320 	orr.w	r3, r3, #32
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001826:	2302      	movs	r3, #2
 8001828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001836:	2305      	movs	r3, #5
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4824      	ldr	r0, [pc, #144]	; (80018d4 <HAL_SPI_MspInit+0x118>)
 8001842:	f002 f941 	bl	8003ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001858:	2305      	movs	r3, #5
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	481d      	ldr	r0, [pc, #116]	; (80018d8 <HAL_SPI_MspInit+0x11c>)
 8001864:	f002 f930 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001868:	e02c      	b.n	80018c4 <HAL_SPI_MspInit+0x108>
  else if(hspi->Instance==SPI3)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1b      	ldr	r2, [pc, #108]	; (80018dc <HAL_SPI_MspInit+0x120>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d127      	bne.n	80018c4 <HAL_SPI_MspInit+0x108>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 800187a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800187e:	6593      	str	r3, [r2, #88]	; 0x58
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 800188e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 8001892:	f043 0302 	orr.w	r3, r3, #2
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_SPI_MspInit+0x114>)
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018a4:	2328      	movs	r3, #40	; 0x28
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b4:	2306      	movs	r3, #6
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4806      	ldr	r0, [pc, #24]	; (80018d8 <HAL_SPI_MspInit+0x11c>)
 80018c0:	f002 f902 	bl	8003ac8 <HAL_GPIO_Init>
}
 80018c4:	bf00      	nop
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48001400 	.word	0x48001400
 80018d8:	48000400 	.word	0x48000400
 80018dc:	40003c00 	.word	0x40003c00

080018e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <HAL_TIM_Base_MspInit+0x38>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10b      	bne.n	800190a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0x3c>)
 80018f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_TIM_Base_MspInit+0x3c>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6593      	str	r3, [r2, #88]	; 0x58
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_TIM_Base_MspInit+0x3c>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40000400 	.word	0x40000400
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_TIM_MspPostInit+0x64>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11b      	bne.n	800197a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_TIM_MspPostInit+0x68>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_TIM_MspPostInit+0x68>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_TIM_MspPostInit+0x68>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195a:	2310      	movs	r3, #16
 800195c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800196a:	2302      	movs	r3, #2
 800196c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_TIM_MspPostInit+0x6c>)
 8001976:	f002 f8a7 	bl	8003ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40000400 	.word	0x40000400
 8001988:	40021000 	.word	0x40021000
 800198c:	48000400 	.word	0x48000400

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019dc:	f000 f99e 	bl	8001d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80019e8:	2002      	movs	r0, #2
 80019ea:	f002 fa07 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  printf("EXTI1");
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <EXTI1_IRQHandler+0x5c>)
 80019f0:	f007 f8ea 	bl	8008bc8 <iprintf>
  if (state13==1)
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <EXTI1_IRQHandler+0x60>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d10f      	bne.n	8001a1c <EXTI1_IRQHandler+0x38>
  {
	  	  	  if (state2==0){i++;}
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <EXTI1_IRQHandler+0x64>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <EXTI1_IRQHandler+0x2c>
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a0c:	6013      	str	r3, [r2, #0]
		  printf("Alarme vitesse!!!!!!!!");
	  }
	  i=0;
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a0e:	e014      	b.n	8001a3a <EXTI1_IRQHandler+0x56>
	  	  	  else{i--;}
 8001a10:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a18:	6013      	str	r3, [r2, #0]
}
 8001a1a:	e00e      	b.n	8001a3a <EXTI1_IRQHandler+0x56>
	  if (i>5 ||i<-5)
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	dc04      	bgt.n	8001a2e <EXTI1_IRQHandler+0x4a>
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f113 0f05 	cmn.w	r3, #5
 8001a2c:	da02      	bge.n	8001a34 <EXTI1_IRQHandler+0x50>
		  printf("Alarme vitesse!!!!!!!!");
 8001a2e:	4808      	ldr	r0, [pc, #32]	; (8001a50 <EXTI1_IRQHandler+0x6c>)
 8001a30:	f007 f8ca 	bl	8008bc8 <iprintf>
	  i=0;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <EXTI1_IRQHandler+0x68>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	08009c98 	.word	0x08009c98
 8001a44:	200004b1 	.word	0x200004b1
 8001a48:	200004b0 	.word	0x200004b0
 8001a4c:	200004ac 	.word	0x200004ac
 8001a50:	08009ca0 	.word	0x08009ca0

08001a54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001a58:	2004      	movs	r0, #4
 8001a5a:	f002 f9cf 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if ((GPIOB->IDR & GPIO_IDR_ID2) == GPIO_IDR_ID2)
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <EXTI2_IRQHandler+0x28>)
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d103      	bne.n	8001a72 <EXTI2_IRQHandler+0x1e>
	{
		state2 = 1;
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <EXTI2_IRQHandler+0x2c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
  else
	{
		state2 = 0;
	}
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001a70:	e002      	b.n	8001a78 <EXTI2_IRQHandler+0x24>
		state2 = 0;
 8001a72:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <EXTI2_IRQHandler+0x2c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	200004b0 	.word	0x200004b0

08001a84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <DMA1_Channel1_IRQHandler+0x10>)
 8001a8a:	f001 ff0b 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000178 	.word	0x20000178

08001a98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	printf("\r\n");
 8001a9c:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <DMA1_Channel2_IRQHandler+0x50>)
 8001a9e:	f007 f901 	bl	8008ca4 <puts>
  for(i=0;i<14;i++)
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <DMA1_Channel2_IRQHandler+0x54>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e00b      	b.n	8001ac2 <DMA1_Channel2_IRQHandler+0x2a>
	{
		printf("%c",message[i]);
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <DMA1_Channel2_IRQHandler+0x54>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <DMA1_Channel2_IRQHandler+0x58>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f007 f89a 	bl	8008bec <putchar>
  for(i=0;i<14;i++)
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <DMA1_Channel2_IRQHandler+0x54>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <DMA1_Channel2_IRQHandler+0x54>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <DMA1_Channel2_IRQHandler+0x54>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b0d      	cmp	r3, #13
 8001ac8:	ddef      	ble.n	8001aaa <DMA1_Channel2_IRQHandler+0x12>
	}
	printf("\r\n");
 8001aca:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <DMA1_Channel2_IRQHandler+0x50>)
 8001acc:	f007 f8ea 	bl	8008ca4 <puts>
	printf("DMA");
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <DMA1_Channel2_IRQHandler+0x5c>)
 8001ad2:	f007 f879 	bl	8008bc8 <iprintf>
	printf("\r\n");
 8001ad6:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <DMA1_Channel2_IRQHandler+0x50>)
 8001ad8:	f007 f8e4 	bl	8008ca4 <puts>
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <DMA1_Channel2_IRQHandler+0x60>)
 8001ade:	f001 fee1 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08009cb8 	.word	0x08009cb8
 8001aec:	200004ac 	.word	0x200004ac
 8001af0:	20000000 	.word	0x20000000
 8001af4:	08009cbc 	.word	0x08009cbc
 8001af8:	2000030c 	.word	0x2000030c

08001afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA12_a_ecouter_Pin);
 8001b00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b04:	f002 f97a 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_EXTI13_Pin);
 8001b08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b0c:	f002 f976 	bl	8003dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

	  if ((GPIOC->IDR & GPIO_IDR_ID13) == GPIO_IDR_ID13)
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <EXTI15_10_IRQHandler+0x54>)
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1c:	d112      	bne.n	8001b44 <EXTI15_10_IRQHandler+0x48>
		{
			state13 = 0;
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	; (8001b54 <EXTI15_10_IRQHandler+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
			  if (i>5 ||i<-5)
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <EXTI15_10_IRQHandler+0x5c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	dc04      	bgt.n	8001b36 <EXTI15_10_IRQHandler+0x3a>
 8001b2c:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <EXTI15_10_IRQHandler+0x5c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f113 0f05 	cmn.w	r3, #5
 8001b34:	da02      	bge.n	8001b3c <EXTI15_10_IRQHandler+0x40>
			  {
				  printf("Alarme vitesse!!!!!!!!");
 8001b36:	4809      	ldr	r0, [pc, #36]	; (8001b5c <EXTI15_10_IRQHandler+0x60>)
 8001b38:	f007 f846 	bl	8008bc8 <iprintf>
			  }

			  i=0;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <EXTI15_10_IRQHandler+0x5c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]

		}


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b42:	e002      	b.n	8001b4a <EXTI15_10_IRQHandler+0x4e>
			state13 = 1;// en prise de mesure
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <EXTI15_10_IRQHandler+0x58>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	48000800 	.word	0x48000800
 8001b54:	200004b1 	.word	0x200004b1
 8001b58:	200004ac 	.word	0x200004ac
 8001b5c:	08009ca0 	.word	0x08009ca0

08001b60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <UART4_IRQHandler+0x28>)
 8001b66:	f005 f815 	bl	8006b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
	printf("\r\n");
 8001b6a:	4808      	ldr	r0, [pc, #32]	; (8001b8c <UART4_IRQHandler+0x2c>)
 8001b6c:	f007 f89a 	bl	8008ca4 <puts>
	printf("\r\n");
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <UART4_IRQHandler+0x2c>)
 8001b72:	f007 f897 	bl	8008ca4 <puts>
	printf("IRQ");
 8001b76:	4806      	ldr	r0, [pc, #24]	; (8001b90 <UART4_IRQHandler+0x30>)
 8001b78:	f007 f826 	bl	8008bc8 <iprintf>
	printf("\r\n");
 8001b7c:	4803      	ldr	r0, [pc, #12]	; (8001b8c <UART4_IRQHandler+0x2c>)
 8001b7e:	f007 f891 	bl	8008ca4 <puts>
  /* USER CODE END UART4_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000027c 	.word	0x2000027c
 8001b8c:	08009cb8 	.word	0x08009cb8
 8001b90:	08009cc0 	.word	0x08009cc0

08001b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b9c:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <_sbrk+0x5c>)
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <_sbrk+0x60>)
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <_sbrk+0x64>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <_sbrk+0x64>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <_sbrk+0x68>)
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d207      	bcs.n	8001bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bc4:	f007 fa4a 	bl	800905c <__errno>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bce:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd2:	e009      	b.n	8001be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <_sbrk+0x64>)
 8001be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001be6:	68fb      	ldr	r3, [r7, #12]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2001c000 	.word	0x2001c000
 8001bf4:	00000400 	.word	0x00000400
 8001bf8:	200004c0 	.word	0x200004c0
 8001bfc:	20000618 	.word	0x20000618

08001c00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <SystemInit+0x20>)
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <SystemInit+0x20>)
 8001c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c24:	480d      	ldr	r0, [pc, #52]	; (8001c5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480d      	ldr	r0, [pc, #52]	; (8001c60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c2a:	490e      	ldr	r1, [pc, #56]	; (8001c64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c2c:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <LoopForever+0xe>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c40:	4c0b      	ldr	r4, [pc, #44]	; (8001c70 <LoopForever+0x16>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c4e:	f7ff ffd7 	bl	8001c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c52:	f007 fa09 	bl	8009068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c56:	f7fe fcb1 	bl	80005bc <main>

08001c5a <LoopForever>:

LoopForever:
    b LoopForever
 8001c5a:	e7fe      	b.n	8001c5a <LoopForever>
  ldr   r0, =_estack
 8001c5c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c68:	08009d48 	.word	0x08009d48
  ldr r2, =_sbss
 8001c6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001c70:	20000614 	.word	0x20000614

08001c74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c74:	e7fe      	b.n	8001c74 <ADC1_2_IRQHandler>

08001c76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f001 fa23 	bl	80030cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f80e 	bl	8001ca8 <HAL_InitTick>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	e001      	b.n	8001c9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c98:	f7ff fb4e 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_InitTick+0x68>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d022      	beq.n	8001d02 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_InitTick+0x6c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_InitTick+0x68>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fa2e 	bl	8003132 <HAL_SYSTICK_Config>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10f      	bne.n	8001cfc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b0f      	cmp	r3, #15
 8001ce0:	d809      	bhi.n	8001cf6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cea:	f001 f9fa 	bl	80030e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <HAL_InitTick+0x70>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	e004      	b.n	8001d06 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e001      	b.n	8001d06 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000024 	.word	0x20000024
 8001d14:	2000001c 	.word	0x2000001c
 8001d18:	20000020 	.word	0x20000020

08001d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_IncTick+0x20>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4413      	add	r3, r2
 8001d2a:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <HAL_IncTick+0x1c>)
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	200004c4 	.word	0x200004c4
 8001d3c:	20000024 	.word	0x20000024

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200004c4 	.word	0x200004c4

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d004      	beq.n	8001d7c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_Delay+0x40>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7c:	bf00      	nop
 8001d7e:	f7ff ffdf 	bl	8001d40 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d8f7      	bhi.n	8001d7e <HAL_Delay+0x26>
  {
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000024 	.word	0x20000024

08001d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	609a      	str	r2, [r3, #8]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	609a      	str	r2, [r3, #8]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3360      	adds	r3, #96	; 0x60
 8001e16:	461a      	mov	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <LL_ADC_SetOffset+0x44>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	03fff000 	.word	0x03fff000

08001e4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3360      	adds	r3, #96	; 0x60
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3360      	adds	r3, #96	; 0x60
 8001e88:	461a      	mov	r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b087      	sub	sp, #28
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3360      	adds	r3, #96	; 0x60
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3360      	adds	r3, #96	; 0x60
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001f0e:	bf00      	nop
 8001f10:	371c      	adds	r7, #28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	615a      	str	r2, [r3, #20]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3330      	adds	r3, #48	; 0x30
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	211f      	movs	r1, #31
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	f003 011f 	and.w	r1, r3, #31
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	431a      	orrs	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3314      	adds	r3, #20
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0e5b      	lsrs	r3, r3, #25
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	0d1b      	lsrs	r3, r3, #20
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2107      	movs	r1, #7
 8001fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	401a      	ands	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	0d1b      	lsrs	r3, r3, #20
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fe2:	bf00      	nop
 8001fe4:	371c      	adds	r7, #28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d10a      	bne.n	800201a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002018:	e00a      	b.n	8002030 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	407f0000 	.word	0x407f0000

08002040 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6093      	str	r3, [r2, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002078:	d101      	bne.n	800207e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800209c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c8:	d101      	bne.n	80020ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <LL_ADC_IsEnabled+0x18>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <LL_ADC_IsEnabled+0x1a>
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b04      	cmp	r3, #4
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d101      	bne.n	8002140 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
	...

08002150 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002158:	2300      	movs	r3, #0
 800215a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1a1      	b.n	80024ae <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff f901 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff67 	bl	8002064 <LL_ADC_IsDeepPowerDownEnabled>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d004      	beq.n	80021a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff4d 	bl	8002040 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff82 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d115      	bne.n	80021e2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff66 	bl	800208c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c0:	4b9a      	ldr	r3, [pc, #616]	; (800242c <HAL_ADC_Init+0x2dc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	099b      	lsrs	r3, r3, #6
 80021c6:	4a9a      	ldr	r2, [pc, #616]	; (8002430 <HAL_ADC_Init+0x2e0>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	3301      	adds	r3, #1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021d4:	e002      	b.n	80021dc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff64 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f6:	f043 0210 	orr.w	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002202:	f043 0201 	orr.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff75 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002218:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 813a 	bne.w	800249c <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 8136 	bne.w	800249c <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002234:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002238:	f043 0202 	orr.w	r2, r3, #2
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff49 	bl	80020dc <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d137      	bne.n	80022c0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002258:	d004      	beq.n	8002264 <HAL_ADC_Init+0x114>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_ADC_Init+0x2e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d10f      	bne.n	8002284 <HAL_ADC_Init+0x134>
 8002264:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002268:	f7ff ff38 	bl	80020dc <LL_ADC_IsEnabled>
 800226c:	4604      	mov	r4, r0
 800226e:	4871      	ldr	r0, [pc, #452]	; (8002434 <HAL_ADC_Init+0x2e4>)
 8002270:	f7ff ff34 	bl	80020dc <LL_ADC_IsEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	4323      	orrs	r3, r4
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf0c      	ite	eq
 800227c:	2301      	moveq	r3, #1
 800227e:	2300      	movne	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	e008      	b.n	8002296 <HAL_ADC_Init+0x146>
 8002284:	486c      	ldr	r0, [pc, #432]	; (8002438 <HAL_ADC_Init+0x2e8>)
 8002286:	f7ff ff29 	bl	80020dc <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a2:	d004      	beq.n	80022ae <HAL_ADC_Init+0x15e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a62      	ldr	r2, [pc, #392]	; (8002434 <HAL_ADC_Init+0x2e4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d101      	bne.n	80022b2 <HAL_ADC_Init+0x162>
 80022ae:	4a63      	ldr	r2, [pc, #396]	; (800243c <HAL_ADC_Init+0x2ec>)
 80022b0:	e000      	b.n	80022b4 <HAL_ADC_Init+0x164>
 80022b2:	4a63      	ldr	r2, [pc, #396]	; (8002440 <HAL_ADC_Init+0x2f0>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	4619      	mov	r1, r3
 80022ba:	4610      	mov	r0, r2
 80022bc:	f7ff fd6e 	bl	8001d9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7f5b      	ldrb	r3, [r3, #29]
 80022c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d106      	bne.n	80022fc <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	3b01      	subs	r3, #1
 80022f4:	045b      	lsls	r3, r3, #17
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	4b49      	ldr	r3, [pc, #292]	; (8002444 <HAL_ADC_Init+0x2f4>)
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	69b9      	ldr	r1, [r7, #24]
 8002328:	430b      	orrs	r3, r1
 800232a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fedb 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 800234c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fee8 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 8002358:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d17b      	bne.n	8002458 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d178      	bne.n	8002458 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800236a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002372:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002382:	f023 0302 	bic.w	r3, r3, #2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	430b      	orrs	r3, r1
 800238e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d017      	beq.n	80023c8 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691a      	ldr	r2, [r3, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6911      	ldr	r1, [r2, #16]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	430b      	orrs	r3, r1
 80023c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80023c6:	e013      	b.n	80023f0 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d126      	bne.n	8002448 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002416:	4311      	orrs	r1, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800241c:	430a      	orrs	r2, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	611a      	str	r2, [r3, #16]
 800242a:	e015      	b.n	8002458 <HAL_ADC_Init+0x308>
 800242c:	2000001c 	.word	0x2000001c
 8002430:	053e2d63 	.word	0x053e2d63
 8002434:	50000100 	.word	0x50000100
 8002438:	50000400 	.word	0x50000400
 800243c:	50000300 	.word	0x50000300
 8002440:	50000700 	.word	0x50000700
 8002444:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 0201 	bic.w	r2, r2, #1
 8002456:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10c      	bne.n	800247a <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f023 010f 	bic.w	r1, r3, #15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
 800246e:	1e5a      	subs	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
 8002478:	e007      	b.n	800248a <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 020f 	bic.w	r2, r2, #15
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	f023 0303 	bic.w	r3, r3, #3
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c
 800249a:	e007      	b.n	80024ac <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	bf00      	nop

080024b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0b6      	sub	sp, #216	; 0xd8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x24>
 80024d6:	2302      	movs	r3, #2
 80024d8:	f000 bc04 	b.w	8002ce4 <HAL_ADC_ConfigChannel+0x82c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe0a 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f040 83e8 	bne.w	8002cc6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f7ff fd1c 	bl	8001f40 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fdf8 	bl	8002102 <LL_ADC_REG_IsConversionOngoing>
 8002512:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fe04 	bl	8002128 <LL_ADC_INJ_IsConversionOngoing>
 8002520:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002524:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 81d9 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800252e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 81d4 	bne.w	80028e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002540:	d10f      	bne.n	8002562 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2200      	movs	r2, #0
 800254c:	4619      	mov	r1, r3
 800254e:	f7ff fd23 	bl	8001f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fcdd 	bl	8001f1a <LL_ADC_SetSamplingTimeCommonConfig>
 8002560:	e00e      	b.n	8002580 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6819      	ldr	r1, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	461a      	mov	r2, r3
 8002570:	f7ff fd12 	bl	8001f98 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fccd 	bl	8001f1a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d022      	beq.n	80025e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6919      	ldr	r1, [r3, #16]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80025b2:	f7ff fc27 	bl	8001e04 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff fc73 	bl	8001eae <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	6919      	ldr	r1, [r3, #16]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	7f1b      	ldrb	r3, [r3, #28]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d102      	bne.n	80025de <HAL_ADC_ConfigChannel+0x126>
 80025d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x128>
 80025de:	2300      	movs	r3, #0
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff fc7f 	bl	8001ee4 <LL_ADC_SetOffsetSaturation>
 80025e6:	e17b      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fc2c 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10a      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x15c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fc21 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 021f 	and.w	r2, r3, #31
 8002612:	e01e      	b.n	8002652 <HAL_ADC_ConfigChannel+0x19a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc16 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002636:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800263a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002642:	2320      	movs	r3, #32
 8002644:	e004      	b.n	8002650 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <HAL_ADC_ConfigChannel+0x1b2>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0e9b      	lsrs	r3, r3, #26
 8002664:	f003 031f 	and.w	r3, r3, #31
 8002668:	e018      	b.n	800269c <HAL_ADC_ConfigChannel+0x1e4>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800267e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002686:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e004      	b.n	800269c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002692:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fbe5 	bl	8001e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2101      	movs	r1, #1
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fbc9 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <HAL_ADC_ConfigChannel+0x222>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fbbe 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	0e9b      	lsrs	r3, r3, #26
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	e01e      	b.n	8002718 <HAL_ADC_ConfigChannel+0x260>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fbb3 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80026f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e004      	b.n	8002716 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800270c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x278>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	0e9b      	lsrs	r3, r3, #26
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	e018      	b.n	8002762 <HAL_ADC_ConfigChannel+0x2aa>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800273c:	fa93 f3a3 	rbit	r3, r3
 8002740:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002744:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800274c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002754:	2320      	movs	r3, #32
 8002756:	e004      	b.n	8002762 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800275c:	fab3 f383 	clz	r3, r3
 8002760:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002762:	429a      	cmp	r2, r3
 8002764:	d106      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2200      	movs	r2, #0
 800276c:	2101      	movs	r1, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fb82 	bl	8001e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fb66 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x2e8>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff fb5b 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 8002796:	4603      	mov	r3, r0
 8002798:	0e9b      	lsrs	r3, r3, #26
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	e01e      	b.n	80027de <HAL_ADC_ConfigChannel+0x326>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fb50 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	fa93 f3a3 	rbit	r3, r3
 80027ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80027be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80027c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e004      	b.n	80027dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80027d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d105      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x33e>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	e016      	b.n	8002824 <HAL_ADC_ConfigChannel+0x36c>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002808:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800280a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800280e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002816:	2320      	movs	r3, #32
 8002818:	e004      	b.n	8002824 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800281a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281e:	fab3 f383 	clz	r3, r3
 8002822:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002824:	429a      	cmp	r2, r3
 8002826:	d106      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2200      	movs	r2, #0
 800282e:	2102      	movs	r1, #2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fb21 	bl	8001e78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2103      	movs	r1, #3
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fb05 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 8002842:	4603      	mov	r3, r0
 8002844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x3aa>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2103      	movs	r1, #3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fafa 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	0e9b      	lsrs	r3, r3, #26
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	e017      	b.n	8002892 <HAL_ADC_ConfigChannel+0x3da>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2103      	movs	r1, #3
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff faef 	bl	8001e4c <LL_ADC_GetOffsetChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800287a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800287c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800287e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x3f2>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	0e9b      	lsrs	r3, r3, #26
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	e011      	b.n	80028ce <HAL_ADC_ConfigChannel+0x416>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80028b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80028bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80028c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d106      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	2103      	movs	r1, #3
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff facc 	bl	8001e78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fbf9 	bl	80020dc <LL_ADC_IsEnabled>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 813d 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	461a      	mov	r2, r3
 8002900:	f7ff fb76 	bl	8001ff0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	4aa2      	ldr	r2, [pc, #648]	; (8002b94 <HAL_ADC_ConfigChannel+0x6dc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	f040 812e 	bne.w	8002b6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x480>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0e9b      	lsrs	r3, r3, #26
 8002926:	3301      	adds	r3, #1
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	2b09      	cmp	r3, #9
 800292e:	bf94      	ite	ls
 8002930:	2301      	movls	r3, #1
 8002932:	2300      	movhi	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e019      	b.n	800296c <HAL_ADC_ConfigChannel+0x4b4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002940:	fa93 f3a3 	rbit	r3, r3
 8002944:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002950:	2320      	movs	r3, #32
 8002952:	e003      	b.n	800295c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2b09      	cmp	r3, #9
 8002964:	bf94      	ite	ls
 8002966:	2301      	movls	r3, #1
 8002968:	2300      	movhi	r3, #0
 800296a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800296c:	2b00      	cmp	r3, #0
 800296e:	d079      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002978:	2b00      	cmp	r3, #0
 800297a:	d107      	bne.n	800298c <HAL_ADC_ConfigChannel+0x4d4>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	3301      	adds	r3, #1
 8002984:	069b      	lsls	r3, r3, #26
 8002986:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800298a:	e015      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x500>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800299e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80029a4:	2320      	movs	r3, #32
 80029a6:	e003      	b.n	80029b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80029a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	3301      	adds	r3, #1
 80029b2:	069b      	lsls	r3, r3, #26
 80029b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d109      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x520>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	0e9b      	lsrs	r3, r3, #26
 80029ca:	3301      	adds	r3, #1
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	2101      	movs	r1, #1
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	e017      	b.n	8002a08 <HAL_ADC_ConfigChannel+0x550>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80029e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80029ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80029f0:	2320      	movs	r3, #32
 80029f2:	e003      	b.n	80029fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80029f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	f003 031f 	and.w	r3, r3, #31
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	ea42 0103 	orr.w	r1, r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x576>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0e9b      	lsrs	r3, r3, #26
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f003 021f 	and.w	r2, r3, #31
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	051b      	lsls	r3, r3, #20
 8002a2c:	e018      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x5a8>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002a46:	2320      	movs	r3, #32
 8002a48:	e003      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a60:	430b      	orrs	r3, r1
 8002a62:	e07e      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d107      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x5c8>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0e9b      	lsrs	r3, r3, #26
 8002a76:	3301      	adds	r3, #1
 8002a78:	069b      	lsls	r3, r3, #26
 8002a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a7e:	e015      	b.n	8002aac <HAL_ADC_ConfigChannel+0x5f4>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002a98:	2320      	movs	r3, #32
 8002a9a:	e003      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	069b      	lsls	r3, r3, #26
 8002aa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x614>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0e9b      	lsrs	r3, r3, #26
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f003 031f 	and.w	r3, r3, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	e017      	b.n	8002afc <HAL_ADC_ConfigChannel+0x644>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	61fb      	str	r3, [r7, #28]
  return result;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2101      	movs	r1, #1
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	ea42 0103 	orr.w	r1, r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10d      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x670>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	0e9b      	lsrs	r3, r3, #26
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3b1e      	subs	r3, #30
 8002b20:	051b      	lsls	r3, r3, #20
 8002b22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b26:	e01b      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x6a8>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	613b      	str	r3, [r7, #16]
  return result;
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002b40:	2320      	movs	r3, #32
 8002b42:	e003      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fab3 f383 	clz	r3, r3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	f003 021f 	and.w	r2, r3, #31
 8002b52:	4613      	mov	r3, r2
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	4413      	add	r3, r2
 8002b58:	3b1e      	subs	r3, #30
 8002b5a:	051b      	lsls	r3, r3, #20
 8002b5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b60:	430b      	orrs	r3, r1
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	4619      	mov	r1, r3
 8002b68:	f7ff fa16 	bl	8001f98 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_ADC_ConfigChannel+0x6e0>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80af 	beq.w	8002cd8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b82:	d004      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x6d6>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <HAL_ADC_ConfigChannel+0x6e4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10a      	bne.n	8002ba4 <HAL_ADC_ConfigChannel+0x6ec>
 8002b8e:	4b04      	ldr	r3, [pc, #16]	; (8002ba0 <HAL_ADC_ConfigChannel+0x6e8>)
 8002b90:	e009      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x6ee>
 8002b92:	bf00      	nop
 8002b94:	407f0000 	.word	0x407f0000
 8002b98:	80080000 	.word	0x80080000
 8002b9c:	50000100 	.word	0x50000100
 8002ba0:	50000300 	.word	0x50000300
 8002ba4:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_ADC_ConfigChannel+0x834>)
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff f91e 	bl	8001de8 <LL_ADC_GetCommonPathInternalCh>
 8002bac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4e      	ldr	r2, [pc, #312]	; (8002cf0 <HAL_ADC_ConfigChannel+0x838>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x70c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a4d      	ldr	r2, [pc, #308]	; (8002cf4 <HAL_ADC_ConfigChannel+0x83c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d134      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d12e      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd8:	d17e      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x736>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a43      	ldr	r2, [pc, #268]	; (8002cf8 <HAL_ADC_ConfigChannel+0x840>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x73a>
 8002bee:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_ADC_ConfigChannel+0x844>)
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x73c>
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <HAL_ADC_ConfigChannel+0x834>)
 8002bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bf8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7ff f8df 	bl	8001dc2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c04:	4b3e      	ldr	r3, [pc, #248]	; (8002d00 <HAL_ADC_ConfigChannel+0x848>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	4a3e      	ldr	r2, [pc, #248]	; (8002d04 <HAL_ADC_ConfigChannel+0x84c>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c1e:	e002      	b.n	8002c26 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f9      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c2c:	e054      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_ADC_ConfigChannel+0x850>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d120      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x7c2>
 8002c38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11a      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4c:	d144      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c56:	d004      	beq.n	8002c62 <HAL_ADC_ConfigChannel+0x7aa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_ADC_ConfigChannel+0x840>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x7ae>
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <HAL_ADC_ConfigChannel+0x844>)
 8002c64:	e000      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x7b0>
 8002c66:	4a21      	ldr	r2, [pc, #132]	; (8002cec <HAL_ADC_ConfigChannel+0x834>)
 8002c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7ff f8a5 	bl	8001dc2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c78:	e02e      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_ADC_ConfigChannel+0x854>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d129      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d123      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <HAL_ADC_ConfigChannel+0x840>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01e      	beq.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca2:	d004      	beq.n	8002cae <HAL_ADC_ConfigChannel+0x7f6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a13      	ldr	r2, [pc, #76]	; (8002cf8 <HAL_ADC_ConfigChannel+0x840>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x7fa>
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_ADC_ConfigChannel+0x844>)
 8002cb0:	e000      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x7fc>
 8002cb2:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <HAL_ADC_ConfigChannel+0x834>)
 8002cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f7ff f87f 	bl	8001dc2 <LL_ADC_SetCommonPathInternalCh>
 8002cc4:	e008      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	f043 0220 	orr.w	r2, r3, #32
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ce0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	37d8      	adds	r7, #216	; 0xd8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	50000700 	.word	0x50000700
 8002cf0:	c3210000 	.word	0xc3210000
 8002cf4:	90c00010 	.word	0x90c00010
 8002cf8:	50000100 	.word	0x50000100
 8002cfc:	50000300 	.word	0x50000300
 8002d00:	2000001c 	.word	0x2000001c
 8002d04:	053e2d63 	.word	0x053e2d63
 8002d08:	c7520000 	.word	0xc7520000
 8002d0c:	cb840000 	.word	0xcb840000

08002d10 <LL_ADC_IsEnabled>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <LL_ADC_IsEnabled+0x18>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <LL_ADC_IsEnabled+0x1a>
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d101      	bne.n	8002d4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e000      	b.n	8002d50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b0a1      	sub	sp, #132	; 0x84
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e0cb      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002d82:	2300      	movs	r3, #0
 8002d84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002d86:	2300      	movs	r3, #0
 8002d88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d92:	d102      	bne.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	e001      	b.n	8002d9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0aa      	b.n	8002f12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ffb9 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002dc4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff ffb3 	bl	8002d36 <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f040 808c 	bne.w	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002dd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8088 	bne.w	8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de8:	d004      	beq.n	8002df4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8002df4:	4b4a      	ldr	r3, [pc, #296]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8002df6:	e000      	b.n	8002dfa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8002dfa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d041      	beq.n	8002e88 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e16:	035b      	lsls	r3, r3, #13
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e28:	d004      	beq.n	8002e34 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3b      	ldr	r2, [pc, #236]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10f      	bne.n	8002e54 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8002e34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e38:	f7ff ff6a 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e3c:	4604      	mov	r4, r0
 8002e3e:	4837      	ldr	r0, [pc, #220]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002e40:	f7ff ff66 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4323      	orrs	r3, r4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e008      	b.n	8002e66 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8002e54:	4834      	ldr	r0, [pc, #208]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002e56:	f7ff ff5b 	bl	8002d10 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04c      	beq.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e72:	f023 030f 	bic.w	r3, r3, #15
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	6811      	ldr	r1, [r2, #0]
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e86:	e03d      	b.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10f      	bne.n	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002ea8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002eac:	f7ff ff30 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eb0:	4604      	mov	r4, r0
 8002eb2:	481a      	ldr	r0, [pc, #104]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002eb4:	f7ff ff2c 	bl	8002d10 <LL_ADC_IsEnabled>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	4323      	orrs	r3, r4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e008      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002ec8:	4817      	ldr	r0, [pc, #92]	; (8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002eca:	f7ff ff21 	bl	8002d10 <LL_ADC_IsEnabled>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d012      	beq.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ee6:	f023 030f 	bic.w	r3, r3, #15
 8002eea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eee:	e009      	b.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	f043 0220 	orr.w	r2, r3, #32
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002f02:	e000      	b.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3784      	adds	r7, #132	; 0x84
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd90      	pop	{r4, r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	50000100 	.word	0x50000100
 8002f20:	50000300 	.word	0x50000300
 8002f24:	50000700 	.word	0x50000700
 8002f28:	50000400 	.word	0x50000400

08002f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f48:	4013      	ands	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5e:	4a04      	ldr	r2, [pc, #16]	; (8002f70 <__NVIC_SetPriorityGrouping+0x44>)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	60d3      	str	r3, [r2, #12]
}
 8002f64:	bf00      	nop
 8002f66:	3714      	adds	r7, #20
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	e000ed00 	.word	0xe000ed00

08002f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <__NVIC_GetPriorityGrouping+0x18>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0307 	and.w	r3, r3, #7
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	db0b      	blt.n	8002fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	f003 021f 	and.w	r2, r3, #31
 8002fa8:	4907      	ldr	r1, [pc, #28]	; (8002fc8 <__NVIC_EnableIRQ+0x38>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100

08002fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	6039      	str	r1, [r7, #0]
 8002fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	db0a      	blt.n	8002ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	490c      	ldr	r1, [pc, #48]	; (8003018 <__NVIC_SetPriority+0x4c>)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	0112      	lsls	r2, r2, #4
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	440b      	add	r3, r1
 8002ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff4:	e00a      	b.n	800300c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4908      	ldr	r1, [pc, #32]	; (800301c <__NVIC_SetPriority+0x50>)
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	3b04      	subs	r3, #4
 8003004:	0112      	lsls	r2, r2, #4
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	440b      	add	r3, r1
 800300a:	761a      	strb	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000e100 	.word	0xe000e100
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b480      	push	{r7}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f1c3 0307 	rsb	r3, r3, #7
 800303a:	2b04      	cmp	r3, #4
 800303c:	bf28      	it	cs
 800303e:	2304      	movcs	r3, #4
 8003040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3304      	adds	r3, #4
 8003046:	2b06      	cmp	r3, #6
 8003048:	d902      	bls.n	8003050 <NVIC_EncodePriority+0x30>
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3b03      	subs	r3, #3
 800304e:	e000      	b.n	8003052 <NVIC_EncodePriority+0x32>
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	401a      	ands	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003068:	f04f 31ff 	mov.w	r1, #4294967295
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43d9      	mvns	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003078:	4313      	orrs	r3, r2
         );
}
 800307a:	4618      	mov	r0, r3
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
	...

08003088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3b01      	subs	r3, #1
 8003094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003098:	d301      	bcc.n	800309e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800309a:	2301      	movs	r3, #1
 800309c:	e00f      	b.n	80030be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309e:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <SysTick_Config+0x40>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a6:	210f      	movs	r1, #15
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	f7ff ff8e 	bl	8002fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <SysTick_Config+0x40>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <SysTick_Config+0x40>)
 80030b8:	2207      	movs	r2, #7
 80030ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000e010 	.word	0xe000e010

080030cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f7ff ff29 	bl	8002f2c <__NVIC_SetPriorityGrouping>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b086      	sub	sp, #24
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff40 	bl	8002f74 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff90 	bl	8003020 <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5f 	bl	8002fcc <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff33 	bl	8002f90 <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa4 	bl	8003088 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e014      	b.n	8003186 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	791b      	ldrb	r3, [r3, #4]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7fe f9db 	bl	8001528 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2202      	movs	r2, #2
 8003176:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	795b      	ldrb	r3, [r3, #5]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_DAC_Start+0x16>
 80031a0:	2302      	movs	r3, #2
 80031a2:	e043      	b.n	800322c <HAL_DAC_Start+0x9e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6819      	ldr	r1, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2201      	movs	r2, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fe fdc5 	bl	8001d58 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10f      	bne.n	80031f4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d11d      	bne.n	800321e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	e014      	b.n	800321e <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2102      	movs	r1, #2
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	429a      	cmp	r2, r3
 800320c:	d107      	bne.n	800321e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0202 	orr.w	r2, r2, #2
 800321c:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d105      	bne.n	8003264 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3308      	adds	r3, #8
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e004      	b.n	800326e <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	3314      	adds	r3, #20
 800326c:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	461a      	mov	r2, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	371c      	adds	r7, #28
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	795b      	ldrb	r3, [r3, #5]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_DAC_ConfigChannel+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e192      	b.n	80035c2 <HAL_DAC_ConfigChannel+0x33e>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2202      	movs	r2, #2
 80032a6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d174      	bne.n	800339a <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fd46 	bl	8001d40 <HAL_GetTick>
 80032b4:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d134      	bne.n	8003326 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032bc:	e011      	b.n	80032e2 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032be:	f7fe fd3f 	bl	8001d40 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d90a      	bls.n	80032e2 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f043 0208 	orr.w	r2, r3, #8
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2203      	movs	r2, #3
 80032dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e16f      	b.n	80035c2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1e6      	bne.n	80032be <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7fe fd31 	bl	8001d58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fe:	641a      	str	r2, [r3, #64]	; 0x40
 8003300:	e01e      	b.n	8003340 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003302:	f7fe fd1d 	bl	8001d40 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d90a      	bls.n	8003326 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f043 0208 	orr.w	r2, r3, #8
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2203      	movs	r2, #3
 8003320:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e14d      	b.n	80035c2 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	2b00      	cmp	r3, #0
 800332e:	dbe8      	blt.n	8003302 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003330:	2001      	movs	r0, #1
 8003332:	f7fe fd11 	bl	8001d58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	ea02 0103 	and.w	r1, r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	409a      	lsls	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	21ff      	movs	r1, #255	; 0xff
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	43db      	mvns	r3, r3
 8003382:	ea02 0103 	and.w	r1, r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	409a      	lsls	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d11d      	bne.n	80033de <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	221f      	movs	r2, #31
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	4013      	ands	r3, r2
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	4313      	orrs	r3, r2
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2207      	movs	r2, #7
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	4013      	ands	r3, r2
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d102      	bne.n	8003408 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	e00f      	b.n	8003428 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d102      	bne.n	8003416 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003410:	2301      	movs	r3, #1
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	e008      	b.n	8003428 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800341e:	2301      	movs	r3, #1
 8003420:	623b      	str	r3, [r7, #32]
 8003422:	e001      	b.n	8003428 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003424:	2300      	movs	r3, #0
 8003426:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	6a3a      	ldr	r2, [r7, #32]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43db      	mvns	r3, r3
 8003448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344a:	4013      	ands	r3, r2
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	791b      	ldrb	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d102      	bne.n	800345c <HAL_DAC_ConfigChannel+0x1d8>
 8003456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800345a:	e000      	b.n	800345e <HAL_DAC_ConfigChannel+0x1da>
 800345c:	2300      	movs	r3, #0
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	4013      	ands	r3, r2
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	795b      	ldrb	r3, [r3, #5]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d102      	bne.n	8003488 <HAL_DAC_ConfigChannel+0x204>
 8003482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003486:	e000      	b.n	800348a <HAL_DAC_ConfigChannel+0x206>
 8003488:	2300      	movs	r3, #0
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d114      	bne.n	80034ca <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80034a0:	f001 fa3e 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 80034a4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <HAL_DAC_ConfigChannel+0x348>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d904      	bls.n	80034b8 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
 80034b6:	e00f      	b.n	80034d8 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4a45      	ldr	r2, [pc, #276]	; (80035d0 <HAL_DAC_ConfigChannel+0x34c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d90a      	bls.n	80034d6 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e006      	b.n	80034d8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	4313      	orrs	r3, r2
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	e000      	b.n	80034d8 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034d6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e6:	4313      	orrs	r3, r2
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43da      	mvns	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	400a      	ands	r2, r1
 800350e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352a:	4013      	ands	r3, r2
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003542:	4313      	orrs	r3, r2
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	22c0      	movs	r2, #192	; 0xc0
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43da      	mvns	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	400a      	ands	r2, r1
 8003568:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	ea02 0103 	and.w	r1, r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	409a      	lsls	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3728      	adds	r7, #40	; 0x28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	09896800 	.word	0x09896800
 80035d0:	04c4b400 	.word	0x04c4b400

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e08d      	b.n	8003702 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_DMA_Init+0x138>)
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d80f      	bhi.n	8003612 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_DMA_Init+0x13c>)
 80035fa:	4413      	add	r3, r2
 80035fc:	4a45      	ldr	r2, [pc, #276]	; (8003714 <HAL_DMA_Init+0x140>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	009a      	lsls	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a42      	ldr	r2, [pc, #264]	; (8003718 <HAL_DMA_Init+0x144>)
 800360e:	641a      	str	r2, [r3, #64]	; 0x40
 8003610:	e00e      	b.n	8003630 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	4b40      	ldr	r3, [pc, #256]	; (800371c <HAL_DMA_Init+0x148>)
 800361a:	4413      	add	r3, r2
 800361c:	4a3d      	ldr	r2, [pc, #244]	; (8003714 <HAL_DMA_Init+0x140>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	009a      	lsls	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a3c      	ldr	r2, [pc, #240]	; (8003720 <HAL_DMA_Init+0x14c>)
 800362e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9be 	bl	8003a04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003690:	d102      	bne.n	8003698 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d010      	beq.n	80036d8 <HAL_DMA_Init+0x104>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d80c      	bhi.n	80036d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9de 	bl	8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e008      	b.n	80036ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	40020407 	.word	0x40020407
 8003710:	bffdfff8 	.word	0xbffdfff8
 8003714:	cccccccd 	.word	0xcccccccd
 8003718:	40020000 	.word	0x40020000
 800371c:	bffdfbf8 	.word	0xbffdfbf8
 8003720:	40020400 	.word	0x40020400

08003724 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d005      	beq.n	8003748 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2204      	movs	r2, #4
 8003740:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e037      	b.n	80037b8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 020e 	bic.w	r2, r2, #14
 8003756:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003766:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377c:	f003 021f 	and.w	r2, r3, #31
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003794:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ac:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037b6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d00d      	beq.n	800380a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
 8003808:	e047      	b.n	800389a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 020e 	bic.w	r2, r2, #14
 8003818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f003 021f 	and.w	r2, r3, #31
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003856:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003878:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	4798      	blx	r3
    }
  }
  return status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2204      	movs	r2, #4
 80038c6:	409a      	lsls	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d026      	beq.n	800391e <HAL_DMA_IRQHandler+0x7a>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d021      	beq.n	800391e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f003 021f 	and.w	r2, r3, #31
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2104      	movs	r1, #4
 8003906:	fa01 f202 	lsl.w	r2, r1, r2
 800390a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	2b00      	cmp	r3, #0
 8003912:	d071      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800391c:	e06c      	b.n	80039f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2202      	movs	r2, #2
 8003928:	409a      	lsls	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d02e      	beq.n	8003990 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d029      	beq.n	8003990 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10b      	bne.n	8003962 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 020a 	bic.w	r2, r2, #10
 8003958:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003966:	f003 021f 	and.w	r2, r3, #31
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2102      	movs	r1, #2
 8003970:	fa01 f202 	lsl.w	r2, r1, r2
 8003974:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	2b00      	cmp	r3, #0
 8003984:	d038      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800398e:	e033      	b.n	80039f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2208      	movs	r2, #8
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d02a      	beq.n	80039fa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d025      	beq.n	80039fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 020e 	bic.w	r2, r2, #14
 80039bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f003 021f 	and.w	r2, r3, #31
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
}
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d802      	bhi.n	8003a1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e001      	b.n	8003a22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003a1e:	4b15      	ldr	r3, [pc, #84]	; (8003a74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a20:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	3b08      	subs	r3, #8
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a30:	fba2 2303 	umull	r2, r3, r2, r3
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	009a      	lsls	r2, r3, #2
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a0b      	ldr	r2, [pc, #44]	; (8003a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003a4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40020407 	.word	0x40020407
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020820 	.word	0x40020820
 8003a78:	cccccccd 	.word	0xcccccccd
 8003a7c:	40020880 	.word	0x40020880

08003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	461a      	mov	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003aa2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	f003 031f 	and.w	r3, r3, #31
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	1000823f 	.word	0x1000823f
 8003ac4:	40020940 	.word	0x40020940

08003ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ad6:	e15a      	b.n	8003d8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	2101      	movs	r1, #1
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 814c 	beq.w	8003d88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d005      	beq.n	8003b08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d130      	bne.n	8003b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	2203      	movs	r2, #3
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b3e:	2201      	movs	r2, #1
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0201 	and.w	r2, r3, #1
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d017      	beq.n	8003ba6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	693a      	ldr	r2, [r7, #16]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d123      	bne.n	8003bfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	08da      	lsrs	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3208      	adds	r2, #8
 8003bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	220f      	movs	r2, #15
 8003bca:	fa02 f303 	lsl.w	r3, r2, r3
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	fa02 f303 	lsl.w	r3, r2, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	6939      	ldr	r1, [r7, #16]
 8003bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	2203      	movs	r2, #3
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0203 	and.w	r2, r3, #3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80a6 	beq.w	8003d88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3c:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_GPIO_Init+0x2e4>)
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c40:	4a5a      	ldr	r2, [pc, #360]	; (8003dac <HAL_GPIO_Init+0x2e4>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6613      	str	r3, [r2, #96]	; 0x60
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_GPIO_Init+0x2e4>)
 8003c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c54:	4a56      	ldr	r2, [pc, #344]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	3302      	adds	r3, #2
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	220f      	movs	r2, #15
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c7e:	d01f      	beq.n	8003cc0 <HAL_GPIO_Init+0x1f8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a4c      	ldr	r2, [pc, #304]	; (8003db4 <HAL_GPIO_Init+0x2ec>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d019      	beq.n	8003cbc <HAL_GPIO_Init+0x1f4>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a4b      	ldr	r2, [pc, #300]	; (8003db8 <HAL_GPIO_Init+0x2f0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d013      	beq.n	8003cb8 <HAL_GPIO_Init+0x1f0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a4a      	ldr	r2, [pc, #296]	; (8003dbc <HAL_GPIO_Init+0x2f4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00d      	beq.n	8003cb4 <HAL_GPIO_Init+0x1ec>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a49      	ldr	r2, [pc, #292]	; (8003dc0 <HAL_GPIO_Init+0x2f8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <HAL_GPIO_Init+0x1e8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a48      	ldr	r2, [pc, #288]	; (8003dc4 <HAL_GPIO_Init+0x2fc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_GPIO_Init+0x1e4>
 8003ca8:	2305      	movs	r3, #5
 8003caa:	e00a      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cac:	2306      	movs	r3, #6
 8003cae:	e008      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	e006      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e004      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e002      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_GPIO_Init+0x1fa>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	f002 0203 	and.w	r2, r2, #3
 8003cc8:	0092      	lsls	r2, r2, #2
 8003cca:	4093      	lsls	r3, r2
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd2:	4937      	ldr	r1, [pc, #220]	; (8003db0 <HAL_GPIO_Init+0x2e8>)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	3302      	adds	r3, #2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ce0:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d04:	4a30      	ldr	r2, [pc, #192]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d0a:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4013      	ands	r3, r2
 8003d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d2e:	4a26      	ldr	r2, [pc, #152]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d34:	4b24      	ldr	r3, [pc, #144]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4013      	ands	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d58:	4a1b      	ldr	r2, [pc, #108]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d82:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <HAL_GPIO_Init+0x300>)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f47f ae9d 	bne.w	8003ad8 <HAL_GPIO_Init+0x10>
  }
}
 8003d9e:	bf00      	nop
 8003da0:	bf00      	nop
 8003da2:	371c      	adds	r7, #28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40010000 	.word	0x40010000
 8003db4:	48000400 	.word	0x48000400
 8003db8:	48000800 	.word	0x48000800
 8003dbc:	48000c00 	.word	0x48000c00
 8003dc0:	48001000 	.word	0x48001000
 8003dc4:	48001400 	.word	0x48001400
 8003dc8:	40010400 	.word	0x40010400

08003dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	807b      	strh	r3, [r7, #2]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003de2:	887a      	ldrh	r2, [r7, #2]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003de8:	e002      	b.n	8003df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dea:	887a      	ldrh	r2, [r7, #2]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d006      	beq.n	8003e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e12:	4a05      	ldr	r2, [pc, #20]	; (8003e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd f97c 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e20:	bf00      	nop
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40010400 	.word	0x40010400

08003e2c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a04      	ldr	r2, [pc, #16]	; (8003e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40007000 	.word	0x40007000

08003e4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d141      	bne.n	8003ede <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e5a:	4b4b      	ldr	r3, [pc, #300]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e66:	d131      	bne.n	8003ecc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e6e:	4a46      	ldr	r2, [pc, #280]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e78:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e80:	4a41      	ldr	r2, [pc, #260]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e88:	4b40      	ldr	r3, [pc, #256]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2232      	movs	r2, #50	; 0x32
 8003e8e:	fb02 f303 	mul.w	r3, r2, r3
 8003e92:	4a3f      	ldr	r2, [pc, #252]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	0c9b      	lsrs	r3, r3, #18
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9e:	e002      	b.n	8003ea6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ea6:	4b38      	ldr	r3, [pc, #224]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d102      	bne.n	8003eba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f2      	bne.n	8003ea0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eba:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec6:	d158      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e057      	b.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ecc:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed2:	4a2d      	ldr	r2, [pc, #180]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003edc:	e04d      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ee4:	d141      	bne.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ee6:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef2:	d131      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef4:	4b24      	ldr	r3, [pc, #144]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f0c:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2232      	movs	r2, #50	; 0x32
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2a:	e002      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3e:	d102      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f2      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d112      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e011      	b.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f58:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f68:	e007      	b.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	2000001c 	.word	0x2000001c
 8003f90:	431bde83 	.word	0x431bde83

08003f94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	; (8003fb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa2:	6093      	str	r3, [r2, #8]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40007000 	.word	0x40007000

08003fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e306      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d075      	beq.n	80040be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fd2:	4b97      	ldr	r3, [pc, #604]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fdc:	4b94      	ldr	r3, [pc, #592]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d102      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x3e>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x44>
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	4b8d      	ldr	r3, [pc, #564]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d05b      	beq.n	80040bc <HAL_RCC_OscConfig+0x108>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d157      	bne.n	80040bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e2e1      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x74>
 800401a:	4b85      	ldr	r3, [pc, #532]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a84      	ldr	r2, [pc, #528]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x98>
 8004032:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7e      	ldr	r2, [pc, #504]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a7b      	ldr	r2, [pc, #492]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 800404c:	4b78      	ldr	r3, [pc, #480]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a77      	ldr	r2, [pc, #476]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b75      	ldr	r3, [pc, #468]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a74      	ldr	r2, [pc, #464]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fe68 	bl	8001d40 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fd fe64 	bl	8001d40 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e2a6      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004086:	4b6a      	ldr	r3, [pc, #424]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xc0>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fe54 	bl	8001d40 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fd fe50 	bl	8001d40 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e292      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ae:	4b60      	ldr	r3, [pc, #384]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0xe8>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d075      	beq.n	80041b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ca:	4b59      	ldr	r3, [pc, #356]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040d4:	4b56      	ldr	r3, [pc, #344]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	2b0c      	cmp	r3, #12
 80040e2:	d102      	bne.n	80040ea <HAL_RCC_OscConfig+0x136>
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d002      	beq.n	80040f0 <HAL_RCC_OscConfig+0x13c>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d11f      	bne.n	8004130 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_OscConfig+0x154>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e265      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b49      	ldr	r3, [pc, #292]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	061b      	lsls	r3, r3, #24
 8004116:	4946      	ldr	r1, [pc, #280]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800411c:	4b45      	ldr	r3, [pc, #276]	; (8004234 <HAL_RCC_OscConfig+0x280>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd fdc1 	bl	8001ca8 <HAL_InitTick>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d043      	beq.n	80041b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e251      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d023      	beq.n	8004180 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004138:	4b3d      	ldr	r3, [pc, #244]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800413e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd fdfc 	bl	8001d40 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414c:	f7fd fdf8 	bl	8001d40 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e23a      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b31      	ldr	r3, [pc, #196]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	492d      	ldr	r1, [pc, #180]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
 800417e:	e01a      	b.n	80041b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a2a      	ldr	r2, [pc, #168]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800418a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd fdd8 	bl	8001d40 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd fdd4 	bl	8001d40 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e216      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1e0>
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d041      	beq.n	8004246 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01c      	beq.n	8004204 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ca:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80041cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d0:	4a17      	ldr	r2, [pc, #92]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041da:	f7fd fdb1 	bl	8001d40 <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fd fdad 	bl	8001d40 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e1ef      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 80041f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0ef      	beq.n	80041e2 <HAL_RCC_OscConfig+0x22e>
 8004202:	e020      	b.n	8004246 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 8004206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_OscConfig+0x27c>)
 800420c:	f023 0301 	bic.w	r3, r3, #1
 8004210:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fd94 	bl	8001d40 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800421a:	e00d      	b.n	8004238 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fd fd90 	bl	8001d40 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d906      	bls.n	8004238 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1d2      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
 800422e:	bf00      	nop
 8004230:	40021000 	.word	0x40021000
 8004234:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004238:	4b8c      	ldr	r3, [pc, #560]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ea      	bne.n	800421c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80a6 	beq.w	80043a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004258:	4b84      	ldr	r3, [pc, #528]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_RCC_OscConfig+0x2b4>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x2b6>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426e:	4b7f      	ldr	r3, [pc, #508]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	4a7e      	ldr	r2, [pc, #504]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004278:	6593      	str	r3, [r2, #88]	; 0x58
 800427a:	4b7c      	ldr	r3, [pc, #496]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004286:	2301      	movs	r3, #1
 8004288:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800428a:	4b79      	ldr	r3, [pc, #484]	; (8004470 <HAL_RCC_OscConfig+0x4bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d118      	bne.n	80042c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004296:	4b76      	ldr	r3, [pc, #472]	; (8004470 <HAL_RCC_OscConfig+0x4bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a75      	ldr	r2, [pc, #468]	; (8004470 <HAL_RCC_OscConfig+0x4bc>)
 800429c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a2:	f7fd fd4d 	bl	8001d40 <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042aa:	f7fd fd49 	bl	8001d40 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e18b      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCC_OscConfig+0x4bc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f0      	beq.n	80042aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d108      	bne.n	80042e2 <HAL_RCC_OscConfig+0x32e>
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	4a65      	ldr	r2, [pc, #404]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e0:	e024      	b.n	800432c <HAL_RCC_OscConfig+0x378>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d110      	bne.n	800430c <HAL_RCC_OscConfig+0x358>
 80042ea:	4b60      	ldr	r3, [pc, #384]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	4a5e      	ldr	r2, [pc, #376]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fa:	4b5c      	ldr	r3, [pc, #368]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	4a5a      	ldr	r2, [pc, #360]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800430a:	e00f      	b.n	800432c <HAL_RCC_OscConfig+0x378>
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	4a56      	ldr	r2, [pc, #344]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004314:	f023 0301 	bic.w	r3, r3, #1
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d016      	beq.n	8004362 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fd04 	bl	8001d40 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	e00a      	b.n	8004352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f7fd fd00 	bl	8001d40 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e140      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b46      	ldr	r3, [pc, #280]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ed      	beq.n	800433c <HAL_RCC_OscConfig+0x388>
 8004360:	e015      	b.n	800438e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004362:	f7fd fced 	bl	8001d40 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004368:	e00a      	b.n	8004380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436a:	f7fd fce9 	bl	8001d40 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f241 3288 	movw	r2, #5000	; 0x1388
 8004378:	4293      	cmp	r3, r2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e129      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004380:	4b3a      	ldr	r3, [pc, #232]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ed      	bne.n	800436a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b35      	ldr	r3, [pc, #212]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a34      	ldr	r2, [pc, #208]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0320 	and.w	r3, r3, #32
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03c      	beq.n	8004426 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01c      	beq.n	80043ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80043b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ba:	4a2c      	ldr	r2, [pc, #176]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd fcbc 	bl	8001d40 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043cc:	f7fd fcb8 	bl	8001d40 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0fa      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043de:	4b23      	ldr	r3, [pc, #140]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ef      	beq.n	80043cc <HAL_RCC_OscConfig+0x418>
 80043ec:	e01b      	b.n	8004426 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ee:	4b1f      	ldr	r3, [pc, #124]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f4:	4a1d      	ldr	r2, [pc, #116]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd fc9f 	bl	8001d40 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004406:	f7fd fc9b 	bl	8001d40 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0dd      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004418:	4b14      	ldr	r3, [pc, #80]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ef      	bne.n	8004406 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80d1 	beq.w	80045d2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004430:	4b0e      	ldr	r3, [pc, #56]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b0c      	cmp	r3, #12
 800443a:	f000 808b 	beq.w	8004554 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d15e      	bne.n	8004504 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b09      	ldr	r3, [pc, #36]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a08      	ldr	r2, [pc, #32]	; (800446c <HAL_RCC_OscConfig+0x4b8>)
 800444c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fd fc75 	bl	8001d40 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004458:	e00c      	b.n	8004474 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd fc71 	bl	8001d40 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d905      	bls.n	8004474 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e0b3      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
 800446c:	40021000 	.word	0x40021000
 8004470:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004474:	4b59      	ldr	r3, [pc, #356]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ec      	bne.n	800445a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004480:	4b56      	ldr	r3, [pc, #344]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	4b56      	ldr	r3, [pc, #344]	; (80045e0 <HAL_RCC_OscConfig+0x62c>)
 8004486:	4013      	ands	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6a11      	ldr	r1, [r2, #32]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004490:	3a01      	subs	r2, #1
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800449a:	0212      	lsls	r2, r2, #8
 800449c:	4311      	orrs	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044a2:	0852      	lsrs	r2, r2, #1
 80044a4:	3a01      	subs	r2, #1
 80044a6:	0552      	lsls	r2, r2, #21
 80044a8:	4311      	orrs	r1, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044ae:	0852      	lsrs	r2, r2, #1
 80044b0:	3a01      	subs	r2, #1
 80044b2:	0652      	lsls	r2, r2, #25
 80044b4:	4311      	orrs	r1, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044ba:	06d2      	lsls	r2, r2, #27
 80044bc:	430a      	orrs	r2, r1
 80044be:	4947      	ldr	r1, [pc, #284]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c4:	4b45      	ldr	r3, [pc, #276]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a44      	ldr	r2, [pc, #272]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d0:	4b42      	ldr	r3, [pc, #264]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a41      	ldr	r2, [pc, #260]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fc30 	bl	8001d40 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd fc2c 	bl	8001d40 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e06e      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f6:	4b39      	ldr	r3, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x530>
 8004502:	e066      	b.n	80045d2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b35      	ldr	r3, [pc, #212]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a34      	ldr	r2, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 800450a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800450e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004510:	4b32      	ldr	r3, [pc, #200]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	4a31      	ldr	r2, [pc, #196]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004516:	f023 0303 	bic.w	r3, r3, #3
 800451a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	4a2e      	ldr	r2, [pc, #184]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004522:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fc08 	bl	8001d40 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fc04 	bl	8001d40 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e046      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004546:	4b25      	ldr	r3, [pc, #148]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x580>
 8004552:	e03e      	b.n	80045d2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e039      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004560:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <HAL_RCC_OscConfig+0x628>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f003 0203 	and.w	r2, r3, #3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	429a      	cmp	r2, r3
 8004572:	d12c      	bne.n	80045ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	3b01      	subs	r3, #1
 8004580:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d123      	bne.n	80045ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004592:	429a      	cmp	r2, r3
 8004594:	d11b      	bne.n	80045ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d113      	bne.n	80045ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	3b01      	subs	r3, #1
 80045b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	3b01      	subs	r3, #1
 80045c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3720      	adds	r7, #32
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	019f800c 	.word	0x019f800c

080045e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e11e      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045fc:	4b91      	ldr	r3, [pc, #580]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d910      	bls.n	800462c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b8e      	ldr	r3, [pc, #568]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 020f 	bic.w	r2, r3, #15
 8004612:	498c      	ldr	r1, [pc, #560]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b8a      	ldr	r3, [pc, #552]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e106      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d073      	beq.n	8004720 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d129      	bne.n	8004694 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004640:	4b81      	ldr	r3, [pc, #516]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e0f4      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004650:	f000 f99e 	bl	8004990 <RCC_GetSysClockFreqFromPLLSource>
 8004654:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4a7c      	ldr	r2, [pc, #496]	; (800484c <HAL_RCC_ClockConfig+0x268>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d93f      	bls.n	80046de <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800465e:	4b7a      	ldr	r3, [pc, #488]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d009      	beq.n	800467e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004672:	2b00      	cmp	r3, #0
 8004674:	d033      	beq.n	80046de <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800467a:	2b00      	cmp	r3, #0
 800467c:	d12f      	bne.n	80046de <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004686:	4a70      	ldr	r2, [pc, #448]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800468c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800468e:	2380      	movs	r3, #128	; 0x80
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	e024      	b.n	80046de <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d107      	bne.n	80046ac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800469c:	4b6a      	ldr	r3, [pc, #424]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0c6      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ac:	4b66      	ldr	r3, [pc, #408]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0be      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80046bc:	f000 f8ce 	bl	800485c <HAL_RCC_GetSysClockFreq>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	4a61      	ldr	r2, [pc, #388]	; (800484c <HAL_RCC_ClockConfig+0x268>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d909      	bls.n	80046de <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046ca:	4b5f      	ldr	r3, [pc, #380]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	4a5d      	ldr	r2, [pc, #372]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80046d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046de:	4b5a      	ldr	r3, [pc, #360]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f023 0203 	bic.w	r2, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	4957      	ldr	r1, [pc, #348]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f0:	f7fd fb26 	bl	8001d40 <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f6:	e00a      	b.n	800470e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f8:	f7fd fb22 	bl	8001d40 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	f241 3288 	movw	r2, #5000	; 0x1388
 8004706:	4293      	cmp	r3, r2
 8004708:	d901      	bls.n	800470e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e095      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470e:	4b4e      	ldr	r3, [pc, #312]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 020c 	and.w	r2, r3, #12
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	429a      	cmp	r2, r3
 800471e:	d1eb      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d023      	beq.n	8004774 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004738:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a42      	ldr	r2, [pc, #264]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800473e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004742:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004750:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004758:	4a3b      	ldr	r2, [pc, #236]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800475a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800475e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004760:	4b39      	ldr	r3, [pc, #228]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	4936      	ldr	r1, [pc, #216]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
 8004772:	e008      	b.n	8004786 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b80      	cmp	r3, #128	; 0x80
 8004778:	d105      	bne.n	8004786 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800477a:	4b33      	ldr	r3, [pc, #204]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	4a32      	ldr	r2, [pc, #200]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004784:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d21d      	bcs.n	80047d0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004794:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 020f 	bic.w	r2, r3, #15
 800479c:	4929      	ldr	r1, [pc, #164]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80047a4:	f7fd facc 	bl	8001d40 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fd fac8 	bl	8001d40 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e03b      	b.n	800483a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b20      	ldr	r3, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x260>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1ed      	bne.n	80047ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d008      	beq.n	80047ee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047dc:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4917      	ldr	r1, [pc, #92]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	490f      	ldr	r1, [pc, #60]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 800480a:	4313      	orrs	r3, r2
 800480c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800480e:	f000 f825 	bl	800485c <HAL_RCC_GetSysClockFreq>
 8004812:	4602      	mov	r2, r0
 8004814:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_RCC_ClockConfig+0x264>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	490c      	ldr	r1, [pc, #48]	; (8004850 <HAL_RCC_ClockConfig+0x26c>)
 8004820:	5ccb      	ldrb	r3, [r1, r3]
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <HAL_RCC_ClockConfig+0x270>)
 800482c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x274>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fa38 	bl	8001ca8 <HAL_InitTick>
 8004838:	4603      	mov	r3, r0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40022000 	.word	0x40022000
 8004848:	40021000 	.word	0x40021000
 800484c:	04c4b400 	.word	0x04c4b400
 8004850:	08009cc4 	.word	0x08009cc4
 8004854:	2000001c 	.word	0x2000001c
 8004858:	20000020 	.word	0x20000020

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b480      	push	{r7}
 800485e:	b087      	sub	sp, #28
 8004860:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004862:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b04      	cmp	r3, #4
 800486c:	d102      	bne.n	8004874 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800486e:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004870:	613b      	str	r3, [r7, #16]
 8004872:	e047      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004874:	4b27      	ldr	r3, [pc, #156]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b08      	cmp	r3, #8
 800487e:	d102      	bne.n	8004886 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004880:	4b26      	ldr	r3, [pc, #152]	; (800491c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	e03e      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004886:	4b23      	ldr	r3, [pc, #140]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b0c      	cmp	r3, #12
 8004890:	d136      	bne.n	8004900 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004892:	4b20      	ldr	r3, [pc, #128]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800489c:	4b1d      	ldr	r3, [pc, #116]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	3301      	adds	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b03      	cmp	r3, #3
 80048ae:	d10c      	bne.n	80048ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_RCC_GetSysClockFreq+0xc0>)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	4a16      	ldr	r2, [pc, #88]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ba:	68d2      	ldr	r2, [r2, #12]
 80048bc:	0a12      	lsrs	r2, r2, #8
 80048be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	617b      	str	r3, [r7, #20]
      break;
 80048c8:	e00c      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048ca:	4a13      	ldr	r2, [pc, #76]	; (8004918 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	4a10      	ldr	r2, [pc, #64]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d4:	68d2      	ldr	r2, [r2, #12]
 80048d6:	0a12      	lsrs	r2, r2, #8
 80048d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048dc:	fb02 f303 	mul.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
      break;
 80048e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	0e5b      	lsrs	r3, r3, #25
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	3301      	adds	r3, #1
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e001      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004904:	693b      	ldr	r3, [r7, #16]
}
 8004906:	4618      	mov	r0, r3
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	40021000 	.word	0x40021000
 8004918:	00f42400 	.word	0x00f42400
 800491c:	016e3600 	.word	0x016e3600

08004920 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_RCC_GetHCLKFreq+0x14>)
 8004926:	681b      	ldr	r3, [r3, #0]
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000001c 	.word	0x2000001c

08004938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800493c:	f7ff fff0 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 8004940:	4602      	mov	r2, r0
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	0a1b      	lsrs	r3, r3, #8
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	4904      	ldr	r1, [pc, #16]	; (8004960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800494e:	5ccb      	ldrb	r3, [r1, r3]
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	08009cd4 	.word	0x08009cd4

08004964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004968:	f7ff ffda 	bl	8004920 <HAL_RCC_GetHCLKFreq>
 800496c:	4602      	mov	r2, r0
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	0adb      	lsrs	r3, r3, #11
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	4904      	ldr	r1, [pc, #16]	; (800498c <HAL_RCC_GetPCLK2Freq+0x28>)
 800497a:	5ccb      	ldrb	r3, [r1, r3]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004984:	4618      	mov	r0, r3
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40021000 	.word	0x40021000
 800498c:	08009cd4 	.word	0x08009cd4

08004990 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004996:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d10c      	bne.n	80049ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049b4:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	4a14      	ldr	r2, [pc, #80]	; (8004a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049be:	68d2      	ldr	r2, [r2, #12]
 80049c0:	0a12      	lsrs	r2, r2, #8
 80049c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	617b      	str	r3, [r7, #20]
    break;
 80049cc:	e00c      	b.n	80049e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049ce:	4a12      	ldr	r2, [pc, #72]	; (8004a18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049d8:	68d2      	ldr	r2, [r2, #12]
 80049da:	0a12      	lsrs	r2, r2, #8
 80049dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
    break;
 80049e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	0e5b      	lsrs	r3, r3, #25
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	3301      	adds	r3, #1
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a02:	687b      	ldr	r3, [r7, #4]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40021000 	.word	0x40021000
 8004a14:	016e3600 	.word	0x016e3600
 8004a18:	00f42400 	.word	0x00f42400

08004a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a24:	2300      	movs	r3, #0
 8004a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a28:	2300      	movs	r3, #0
 8004a2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8098 	beq.w	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a3e:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a4a:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4e:	4a3f      	ldr	r2, [pc, #252]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a54:	6593      	str	r3, [r2, #88]	; 0x58
 8004a56:	4b3d      	ldr	r3, [pc, #244]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a62:	2301      	movs	r3, #1
 8004a64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a66:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a39      	ldr	r2, [pc, #228]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a72:	f7fd f965 	bl	8001d40 <HAL_GetTick>
 8004a76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a78:	e009      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fd f961 	bl	8001d40 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d902      	bls.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004a8c:	e005      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a8e:	4b30      	ldr	r3, [pc, #192]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ef      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a9a:	7cfb      	ldrb	r3, [r7, #19]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d159      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004aa0:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01e      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d019      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004abc:	4b23      	ldr	r3, [pc, #140]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ac8:	4b20      	ldr	r3, [pc, #128]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad8:	4b1c      	ldr	r3, [pc, #112]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ae8:	4a18      	ldr	r2, [pc, #96]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afa:	f7fd f921 	bl	8001d40 <HAL_GetTick>
 8004afe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b00:	e00b      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b02:	f7fd f91d 	bl	8001d40 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d902      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	74fb      	strb	r3, [r7, #19]
            break;
 8004b18:	e006      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ec      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	4903      	ldr	r1, [pc, #12]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b44:	e008      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b46:	7cfb      	ldrb	r3, [r7, #19]
 8004b48:	74bb      	strb	r3, [r7, #18]
 8004b4a:	e005      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b58:	7c7b      	ldrb	r3, [r7, #17]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d105      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5e:	4ba7      	ldr	r3, [pc, #668]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	4aa6      	ldr	r2, [pc, #664]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b76:	4ba1      	ldr	r3, [pc, #644]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7c:	f023 0203 	bic.w	r2, r3, #3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	499d      	ldr	r1, [pc, #628]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b98:	4b98      	ldr	r3, [pc, #608]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 020c 	bic.w	r2, r3, #12
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4995      	ldr	r1, [pc, #596]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bba:	4b90      	ldr	r3, [pc, #576]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	498c      	ldr	r1, [pc, #560]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bdc:	4b87      	ldr	r3, [pc, #540]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	4984      	ldr	r1, [pc, #528]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bfe:	4b7f      	ldr	r3, [pc, #508]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	497b      	ldr	r1, [pc, #492]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c20:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	4973      	ldr	r1, [pc, #460]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c42:	4b6e      	ldr	r3, [pc, #440]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	496a      	ldr	r1, [pc, #424]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c64:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	4962      	ldr	r1, [pc, #392]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c86:	4b5d      	ldr	r3, [pc, #372]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	4959      	ldr	r1, [pc, #356]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ca8:	4b54      	ldr	r3, [pc, #336]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb6:	4951      	ldr	r1, [pc, #324]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d015      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cca:	4b4c      	ldr	r3, [pc, #304]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	4948      	ldr	r1, [pc, #288]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cea:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	4a43      	ldr	r2, [pc, #268]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cf4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d015      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d02:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	493a      	ldr	r1, [pc, #232]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d20:	d105      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d2c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d015      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d48:	492c      	ldr	r1, [pc, #176]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d58:	d105      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5a:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	4a27      	ldr	r2, [pc, #156]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d64:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d72:	4b22      	ldr	r3, [pc, #136]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	491e      	ldr	r1, [pc, #120]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d90:	d105      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d92:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a19      	ldr	r2, [pc, #100]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d9c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d015      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db8:	4910      	ldr	r1, [pc, #64]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc8:	d105      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dca:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	4a0b      	ldr	r2, [pc, #44]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d018      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df0:	4902      	ldr	r1, [pc, #8]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	e001      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e08:	4b21      	ldr	r3, [pc, #132]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e12:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d015      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004e20:	4b1b      	ldr	r3, [pc, #108]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	4918      	ldr	r1, [pc, #96]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	490a      	ldr	r1, [pc, #40]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e76:	d105      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e84:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000

08004e94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d066      	beq.n	8004f74 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc fc42 	bl	8001744 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	22ca      	movs	r2, #202	; 0xca
 8004ece:	625a      	str	r2, [r3, #36]	; 0x24
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2253      	movs	r2, #83	; 0x53
 8004ed6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f9f6 	bl	80052ca <RTC_EnterInitMode>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d13a      	bne.n	8004f5e <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004efa:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6999      	ldr	r1, [r3, #24]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68d9      	ldr	r1, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	041a      	lsls	r2, r3, #16
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fa02 	bl	8005336 <RTC_ExitInitMode>
 8004f32:	4603      	mov	r3, r0
 8004f34:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <HAL_RTC_Init+0xca>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1a      	ldr	r2, [r3, #32]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	619a      	str	r2, [r3, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	22ff      	movs	r2, #255	; 0xff
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d103      	bne.n	8004f74 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004f7e:	b590      	push	{r4, r7, lr}
 8004f80:	b087      	sub	sp, #28
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_RTC_SetTime+0x1a>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e08b      	b.n	80050b0 <HAL_RTC_SetTime+0x132>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	22ca      	movs	r2, #202	; 0xca
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2253      	movs	r2, #83	; 0x53
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f986 	bl	80052ca <RTC_EnterInitMode>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d163      	bne.n	8005090 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d126      	bne.n	800501c <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f9e8 	bl	80053bc <RTC_ByteToBcd2>
 8004fec:	4603      	mov	r3, r0
 8004fee:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 f9e1 	bl	80053bc <RTC_ByteToBcd2>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ffe:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	789b      	ldrb	r3, [r3, #2]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f9d9 	bl	80053bc <RTC_ByteToBcd2>
 800500a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800500c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	78db      	ldrb	r3, [r3, #3]
 8005014:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005016:	4313      	orrs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	e018      	b.n	800504e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2200      	movs	r2, #0
 800502e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800503c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005042:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	78db      	ldrb	r3, [r3, #3]
 8005048:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005058:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800505c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699a      	ldr	r2, [r3, #24]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800506c:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6999      	ldr	r1, [r3, #24]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f955 	bl	8005336 <RTC_ExitInitMode>
 800508c:	4603      	mov	r3, r0
 800508e:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	22ff      	movs	r2, #255	; 0xff
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80050e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80050ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	0a1b      	lsrs	r3, r3, #8
 8005100:	b2db      	uxtb	r3, r3
 8005102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	0d9b      	lsrs	r3, r3, #22
 800511e:	b2db      	uxtb	r3, r3
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d11a      	bne.n	8005166 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f961 	bl	80053fc <RTC_Bcd2ToByte>
 800513a:	4603      	mov	r3, r0
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	785b      	ldrb	r3, [r3, #1]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f958 	bl	80053fc <RTC_Bcd2ToByte>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	789b      	ldrb	r3, [r3, #2]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f94f 	bl	80053fc <RTC_Bcd2ToByte>
 800515e:	4603      	mov	r3, r0
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005170:	b590      	push	{r4, r7, lr}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_RTC_SetDate+0x1a>
 8005186:	2302      	movs	r3, #2
 8005188:	e075      	b.n	8005276 <HAL_RTC_SetDate+0x106>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10e      	bne.n	80051be <HAL_RTC_SetDate+0x4e>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	785b      	ldrb	r3, [r3, #1]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d008      	beq.n	80051be <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	f023 0310 	bic.w	r3, r3, #16
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	330a      	adds	r3, #10
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d11c      	bne.n	80051fe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	78db      	ldrb	r3, [r3, #3]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f000 f8f7 	bl	80053bc <RTC_ByteToBcd2>
 80051ce:	4603      	mov	r3, r0
 80051d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 f8f0 	bl	80053bc <RTC_ByteToBcd2>
 80051dc:	4603      	mov	r3, r0
 80051de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f8e8 	bl	80053bc <RTC_ByteToBcd2>
 80051ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80051ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	e00e      	b.n	800521c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	78db      	ldrb	r3, [r3, #3]
 8005202:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800520a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005210:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	22ca      	movs	r2, #202	; 0xca
 8005222:	625a      	str	r2, [r3, #36]	; 0x24
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2253      	movs	r2, #83	; 0x53
 800522a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 f84c 	bl	80052ca <RTC_EnterInitMode>
 8005232:	4603      	mov	r3, r0
 8005234:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10c      	bne.n	8005256 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800524a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f872 	bl	8005336 <RTC_ExitInitMode>
 8005252:	4603      	mov	r3, r0
 8005254:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	22ff      	movs	r2, #255	; 0xff
 800525c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800525e:	7cfb      	ldrb	r3, [r7, #19]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005274:	7cfb      	ldrb	r3, [r7, #19]
}
 8005276:	4618      	mov	r0, r3
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}

0800527e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 0220 	bic.w	r2, r2, #32
 8005294:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005296:	f7fc fd53 	bl	8001d40 <HAL_GetTick>
 800529a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800529c:	e009      	b.n	80052b2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800529e:	f7fc fd4f 	bl	8001d40 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ac:	d901      	bls.n	80052b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e007      	b.n	80052c2 <HAL_RTC_WaitForSynchro+0x44>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0ee      	beq.n	800529e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d123      	bne.n	800532c <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052f4:	f7fc fd24 	bl	8001d40 <HAL_GetTick>
 80052f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80052fa:	e00d      	b.n	8005318 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80052fc:	f7fc fd20 	bl	8001d40 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530a:	d905      	bls.n	8005318 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2203      	movs	r2, #3
 8005314:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <RTC_EnterInitMode+0x62>
 8005326:	7bfb      	ldrb	r3, [r7, #15]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d1e7      	bne.n	80052fc <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005350:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10c      	bne.n	800537a <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff ff8c 	bl	800527e <HAL_RTC_WaitForSynchro>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d022      	beq.n	80053b2 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2203      	movs	r2, #3
 8005370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	73fb      	strb	r3, [r7, #15]
 8005378:	e01b      	b.n	80053b2 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0220 	bic.w	r2, r2, #32
 8005388:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff ff77 	bl	800527e <HAL_RTC_WaitForSynchro>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2203      	movs	r2, #3
 800539a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0220 	orr.w	r2, r2, #32
 80053b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80053ce:	e005      	b.n	80053dc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3301      	adds	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	3b0a      	subs	r3, #10
 80053da:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80053dc:	7afb      	ldrb	r3, [r7, #11]
 80053de:	2b09      	cmp	r3, #9
 80053e0:	d8f6      	bhi.n	80053d0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	7afb      	ldrb	r3, [r7, #11]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b2db      	uxtb	r3, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	091b      	lsrs	r3, r3, #4
 800540a:	b2db      	uxtb	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	b2da      	uxtb	r2, r3
 800541c:	79fb      	ldrb	r3, [r7, #7]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b2db      	uxtb	r3, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e09d      	b.n	8005582 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005456:	d009      	beq.n	800546c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	61da      	str	r2, [r3, #28]
 800545e:	e005      	b.n	800546c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc f998 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ac:	d902      	bls.n	80054b4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e002      	b.n	80054ba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80054c2:	d007      	beq.n	80054d4 <HAL_SPI_Init+0xa0>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054cc:	d002      	beq.n	80054d4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	431a      	orrs	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	ea42 0103 	orr.w	r1, r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	f003 0204 	and.w	r2, r3, #4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	f003 0310 	and.w	r3, r3, #16
 800553c:	431a      	orrs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005550:	ea42 0103 	orr.w	r1, r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005570:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e049      	b.n	8005630 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fc f995 	bl	80018e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f000 fbbb 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e049      	b.n	80056de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f841 	bl	80056e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f000 fb64 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_TIM_PWM_Start+0x24>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e03c      	b.n	800579a <HAL_TIM_PWM_Start+0x9e>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d109      	bne.n	800573a <HAL_TIM_PWM_Start+0x3e>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	bf14      	ite	ne
 8005732:	2301      	movne	r3, #1
 8005734:	2300      	moveq	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e02f      	b.n	800579a <HAL_TIM_PWM_Start+0x9e>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d109      	bne.n	8005754 <HAL_TIM_PWM_Start+0x58>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e022      	b.n	800579a <HAL_TIM_PWM_Start+0x9e>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b0c      	cmp	r3, #12
 8005758:	d109      	bne.n	800576e <HAL_TIM_PWM_Start+0x72>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	bf14      	ite	ne
 8005766:	2301      	movne	r3, #1
 8005768:	2300      	moveq	r3, #0
 800576a:	b2db      	uxtb	r3, r3
 800576c:	e015      	b.n	800579a <HAL_TIM_PWM_Start+0x9e>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b10      	cmp	r3, #16
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x8c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e008      	b.n	800579a <HAL_TIM_PWM_Start+0x9e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf14      	ite	ne
 8005794:	2301      	movne	r3, #1
 8005796:	2300      	moveq	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e0a1      	b.n	80058e6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xb6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b0:	e023      	b.n	80057fa <HAL_TIM_PWM_Start+0xfe>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d104      	bne.n	80057c2 <HAL_TIM_PWM_Start+0xc6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	e01b      	b.n	80057fa <HAL_TIM_PWM_Start+0xfe>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d104      	bne.n	80057d2 <HAL_TIM_PWM_Start+0xd6>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d0:	e013      	b.n	80057fa <HAL_TIM_PWM_Start+0xfe>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start+0xe6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e0:	e00b      	b.n	80057fa <HAL_TIM_PWM_Start+0xfe>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start+0xf6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f0:	e003      	b.n	80057fa <HAL_TIM_PWM_Start+0xfe>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2202      	movs	r2, #2
 80057f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2201      	movs	r2, #1
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ff02 	bl	800660c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a38      	ldr	r2, [pc, #224]	; (80058f0 <HAL_TIM_PWM_Start+0x1f4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d018      	beq.n	8005844 <HAL_TIM_PWM_Start+0x148>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a37      	ldr	r2, [pc, #220]	; (80058f4 <HAL_TIM_PWM_Start+0x1f8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <HAL_TIM_PWM_Start+0x148>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a35      	ldr	r2, [pc, #212]	; (80058f8 <HAL_TIM_PWM_Start+0x1fc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00e      	beq.n	8005844 <HAL_TIM_PWM_Start+0x148>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a34      	ldr	r2, [pc, #208]	; (80058fc <HAL_TIM_PWM_Start+0x200>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d009      	beq.n	8005844 <HAL_TIM_PWM_Start+0x148>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a32      	ldr	r2, [pc, #200]	; (8005900 <HAL_TIM_PWM_Start+0x204>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d004      	beq.n	8005844 <HAL_TIM_PWM_Start+0x148>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a31      	ldr	r2, [pc, #196]	; (8005904 <HAL_TIM_PWM_Start+0x208>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_TIM_PWM_Start+0x14c>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_TIM_PWM_Start+0x14e>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d007      	beq.n	800585e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800585c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a23      	ldr	r2, [pc, #140]	; (80058f0 <HAL_TIM_PWM_Start+0x1f4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d01d      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005870:	d018      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a24      	ldr	r2, [pc, #144]	; (8005908 <HAL_TIM_PWM_Start+0x20c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a22      	ldr	r2, [pc, #136]	; (800590c <HAL_TIM_PWM_Start+0x210>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1a      	ldr	r2, [pc, #104]	; (80058f4 <HAL_TIM_PWM_Start+0x1f8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a18      	ldr	r2, [pc, #96]	; (80058f8 <HAL_TIM_PWM_Start+0x1fc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_PWM_Start+0x1a8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_TIM_PWM_Start+0x208>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d115      	bne.n	80058d0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	4b19      	ldr	r3, [pc, #100]	; (8005910 <HAL_TIM_PWM_Start+0x214>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b06      	cmp	r3, #6
 80058b4:	d015      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x1e6>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058bc:	d011      	beq.n	80058e2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ce:	e008      	b.n	80058e2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e000      	b.n	80058e4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40012c00 	.word	0x40012c00
 80058f4:	40013400 	.word	0x40013400
 80058f8:	40014000 	.word	0x40014000
 80058fc:	40014400 	.word	0x40014400
 8005900:	40014800 	.word	0x40014800
 8005904:	40015000 	.word	0x40015000
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	00010007 	.word	0x00010007

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800592e:	2302      	movs	r3, #2
 8005930:	e0ff      	b.n	8005b32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b14      	cmp	r3, #20
 800593e:	f200 80f0 	bhi.w	8005b22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	0800599d 	.word	0x0800599d
 800594c:	08005b23 	.word	0x08005b23
 8005950:	08005b23 	.word	0x08005b23
 8005954:	08005b23 	.word	0x08005b23
 8005958:	080059dd 	.word	0x080059dd
 800595c:	08005b23 	.word	0x08005b23
 8005960:	08005b23 	.word	0x08005b23
 8005964:	08005b23 	.word	0x08005b23
 8005968:	08005a1f 	.word	0x08005a1f
 800596c:	08005b23 	.word	0x08005b23
 8005970:	08005b23 	.word	0x08005b23
 8005974:	08005b23 	.word	0x08005b23
 8005978:	08005a5f 	.word	0x08005a5f
 800597c:	08005b23 	.word	0x08005b23
 8005980:	08005b23 	.word	0x08005b23
 8005984:	08005b23 	.word	0x08005b23
 8005988:	08005aa1 	.word	0x08005aa1
 800598c:	08005b23 	.word	0x08005b23
 8005990:	08005b23 	.word	0x08005b23
 8005994:	08005b23 	.word	0x08005b23
 8005998:	08005ae1 	.word	0x08005ae1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fa6c 	bl	8005e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0208 	orr.w	r2, r2, #8
 80059b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	699a      	ldr	r2, [r3, #24]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0204 	bic.w	r2, r2, #4
 80059c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6999      	ldr	r1, [r3, #24]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691a      	ldr	r2, [r3, #16]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	619a      	str	r2, [r3, #24]
      break;
 80059da:	e0a5      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68b9      	ldr	r1, [r7, #8]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fae6 	bl	8005fb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	699a      	ldr	r2, [r3, #24]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6999      	ldr	r1, [r3, #24]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	619a      	str	r2, [r3, #24]
      break;
 8005a1c:	e084      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68b9      	ldr	r1, [r7, #8]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fb59 	bl	80060dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f042 0208 	orr.w	r2, r2, #8
 8005a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69da      	ldr	r2, [r3, #28]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0204 	bic.w	r2, r2, #4
 8005a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	69d9      	ldr	r1, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	61da      	str	r2, [r3, #28]
      break;
 8005a5c:	e064      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fbcb 	bl	8006200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	61da      	str	r2, [r3, #28]
      break;
 8005a9e:	e043      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fc3e 	bl	8006328 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0208 	orr.w	r2, r2, #8
 8005aba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0204 	bic.w	r2, r2, #4
 8005aca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005ade:	e023      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68b9      	ldr	r1, [r7, #8]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fc88 	bl	80063fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005afa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	021a      	lsls	r2, r3, #8
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005b20:	e002      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
      break;
 8005b26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3718      	adds	r7, #24
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop

08005b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_ConfigClockSource+0x1c>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e0e6      	b.n	8005d26 <HAL_TIM_ConfigClockSource+0x1ea>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005b76:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a67      	ldr	r2, [pc, #412]	; (8005d30 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	f000 80b1 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005b98:	4a65      	ldr	r2, [pc, #404]	; (8005d30 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	f200 80b6 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005ba0:	4a64      	ldr	r2, [pc, #400]	; (8005d34 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	f000 80a9 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005ba8:	4a62      	ldr	r2, [pc, #392]	; (8005d34 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	f200 80ae 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005bb0:	4a61      	ldr	r2, [pc, #388]	; (8005d38 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	f000 80a1 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005bb8:	4a5f      	ldr	r2, [pc, #380]	; (8005d38 <HAL_TIM_ConfigClockSource+0x1fc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	f200 80a6 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005bc0:	4a5e      	ldr	r2, [pc, #376]	; (8005d3c <HAL_TIM_ConfigClockSource+0x200>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	f000 8099 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005bc8:	4a5c      	ldr	r2, [pc, #368]	; (8005d3c <HAL_TIM_ConfigClockSource+0x200>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f200 809e 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005bd0:	4a5b      	ldr	r2, [pc, #364]	; (8005d40 <HAL_TIM_ConfigClockSource+0x204>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	f000 8091 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005bd8:	4a59      	ldr	r2, [pc, #356]	; (8005d40 <HAL_TIM_ConfigClockSource+0x204>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	f200 8096 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005be0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005be4:	f000 8089 	beq.w	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005be8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bec:	f200 808e 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf4:	d03e      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0x138>
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	f200 8087 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c02:	f000 8086 	beq.w	8005d12 <HAL_TIM_ConfigClockSource+0x1d6>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d87f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c0c:	2b70      	cmp	r3, #112	; 0x70
 8005c0e:	d01a      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x10a>
 8005c10:	2b70      	cmp	r3, #112	; 0x70
 8005c12:	d87b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c14:	2b60      	cmp	r3, #96	; 0x60
 8005c16:	d050      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x17e>
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d877      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c1c:	2b50      	cmp	r3, #80	; 0x50
 8005c1e:	d03c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0x15e>
 8005c20:	2b50      	cmp	r3, #80	; 0x50
 8005c22:	d873      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d058      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x19e>
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d86f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c2c:	2b30      	cmp	r3, #48	; 0x30
 8005c2e:	d064      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d86b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d060      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d867      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d05c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d05a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x1be>
 8005c44:	e062      	b.n	8005d0c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6899      	ldr	r1, [r3, #8]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f000 fcb9 	bl	80065cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]
      break;
 8005c72:	e04f      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f000 fca2 	bl	80065cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c96:	609a      	str	r2, [r3, #8]
      break;
 8005c98:	e03c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 fc14 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2150      	movs	r1, #80	; 0x50
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fc6d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e02c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 fc33 	bl	8006532 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2160      	movs	r1, #96	; 0x60
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fc5d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e01c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fbf4 	bl	80064d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2140      	movs	r1, #64	; 0x40
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc4d 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f000 fc44 	bl	8006592 <TIM_ITRx_SetConfig>
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8005d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	00100070 	.word	0x00100070
 8005d34:	00100050 	.word	0x00100050
 8005d38:	00100040 	.word	0x00100040
 8005d3c:	00100030 	.word	0x00100030
 8005d40:	00100020 	.word	0x00100020

08005d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a42      	ldr	r2, [pc, #264]	; (8005e60 <TIM_Base_SetConfig+0x11c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d013      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d00f      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a3f      	ldr	r2, [pc, #252]	; (8005e64 <TIM_Base_SetConfig+0x120>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00b      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3e      	ldr	r2, [pc, #248]	; (8005e68 <TIM_Base_SetConfig+0x124>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d007      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <TIM_Base_SetConfig+0x128>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <TIM_Base_SetConfig+0x12c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d108      	bne.n	8005d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <TIM_Base_SetConfig+0x11c>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d01f      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da4:	d01b      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <TIM_Base_SetConfig+0x120>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d017      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <TIM_Base_SetConfig+0x124>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2c      	ldr	r2, [pc, #176]	; (8005e6c <TIM_Base_SetConfig+0x128>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00f      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2c      	ldr	r2, [pc, #176]	; (8005e74 <TIM_Base_SetConfig+0x130>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00b      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <TIM_Base_SetConfig+0x134>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d007      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <TIM_Base_SetConfig+0x138>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d003      	beq.n	8005dde <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <TIM_Base_SetConfig+0x12c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d108      	bne.n	8005df0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <TIM_Base_SetConfig+0x11c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d013      	beq.n	8005e44 <TIM_Base_SetConfig+0x100>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a13      	ldr	r2, [pc, #76]	; (8005e6c <TIM_Base_SetConfig+0x128>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00f      	beq.n	8005e44 <TIM_Base_SetConfig+0x100>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a13      	ldr	r2, [pc, #76]	; (8005e74 <TIM_Base_SetConfig+0x130>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <TIM_Base_SetConfig+0x100>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a12      	ldr	r2, [pc, #72]	; (8005e78 <TIM_Base_SetConfig+0x134>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_Base_SetConfig+0x100>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <TIM_Base_SetConfig+0x138>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0x100>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <TIM_Base_SetConfig+0x12c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d103      	bne.n	8005e4c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	615a      	str	r2, [r3, #20]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40013400 	.word	0x40013400
 8005e70:	40015000 	.word	0x40015000
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0201 	bic.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0303 	bic.w	r3, r3, #3
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f023 0302 	bic.w	r3, r3, #2
 8005ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a30      	ldr	r2, [pc, #192]	; (8005f9c <TIM_OC1_SetConfig+0x11c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <TIM_OC1_SetConfig+0x88>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a2f      	ldr	r2, [pc, #188]	; (8005fa0 <TIM_OC1_SetConfig+0x120>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <TIM_OC1_SetConfig+0x88>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2e      	ldr	r2, [pc, #184]	; (8005fa4 <TIM_OC1_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_OC1_SetConfig+0x88>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2d      	ldr	r2, [pc, #180]	; (8005fa8 <TIM_OC1_SetConfig+0x128>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_OC1_SetConfig+0x88>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2c      	ldr	r2, [pc, #176]	; (8005fac <TIM_OC1_SetConfig+0x12c>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_OC1_SetConfig+0x88>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <TIM_OC1_SetConfig+0x130>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d10c      	bne.n	8005f22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f023 0308 	bic.w	r3, r3, #8
 8005f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 0304 	bic.w	r3, r3, #4
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	; (8005f9c <TIM_OC1_SetConfig+0x11c>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d013      	beq.n	8005f52 <TIM_OC1_SetConfig+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <TIM_OC1_SetConfig+0x120>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d00f      	beq.n	8005f52 <TIM_OC1_SetConfig+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <TIM_OC1_SetConfig+0x124>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <TIM_OC1_SetConfig+0xd2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1a      	ldr	r2, [pc, #104]	; (8005fa8 <TIM_OC1_SetConfig+0x128>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d007      	beq.n	8005f52 <TIM_OC1_SetConfig+0xd2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a19      	ldr	r2, [pc, #100]	; (8005fac <TIM_OC1_SetConfig+0x12c>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_OC1_SetConfig+0xd2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <TIM_OC1_SetConfig+0x130>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d111      	bne.n	8005f76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	621a      	str	r2, [r3, #32]
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40014000 	.word	0x40014000
 8005fa8:	40014400 	.word	0x40014400
 8005fac:	40014800 	.word	0x40014800
 8005fb0:	40015000 	.word	0x40015000

08005fb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0210 	bic.w	r2, r3, #16
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0320 	bic.w	r3, r3, #32
 8006002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <TIM_OC2_SetConfig+0x110>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d007      	beq.n	8006028 <TIM_OC2_SetConfig+0x74>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <TIM_OC2_SetConfig+0x114>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d003      	beq.n	8006028 <TIM_OC2_SetConfig+0x74>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <TIM_OC2_SetConfig+0x118>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10d      	bne.n	8006044 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4313      	orrs	r3, r2
 800603a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1f      	ldr	r2, [pc, #124]	; (80060c4 <TIM_OC2_SetConfig+0x110>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <TIM_OC2_SetConfig+0xc0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1e      	ldr	r2, [pc, #120]	; (80060c8 <TIM_OC2_SetConfig+0x114>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_OC2_SetConfig+0xc0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <TIM_OC2_SetConfig+0x11c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_OC2_SetConfig+0xc0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1d      	ldr	r2, [pc, #116]	; (80060d4 <TIM_OC2_SetConfig+0x120>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_OC2_SetConfig+0xc0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1c      	ldr	r2, [pc, #112]	; (80060d8 <TIM_OC2_SetConfig+0x124>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC2_SetConfig+0xc0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <TIM_OC2_SetConfig+0x118>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d113      	bne.n	800609c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800607a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40015000 	.word	0x40015000
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a2b      	ldr	r2, [pc, #172]	; (80061e8 <TIM_OC3_SetConfig+0x10c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_OC3_SetConfig+0x72>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <TIM_OC3_SetConfig+0x110>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_OC3_SetConfig+0x72>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <TIM_OC3_SetConfig+0x114>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d10d      	bne.n	800616a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006154:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006168:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <TIM_OC3_SetConfig+0x10c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d013      	beq.n	800619a <TIM_OC3_SetConfig+0xbe>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1d      	ldr	r2, [pc, #116]	; (80061ec <TIM_OC3_SetConfig+0x110>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d00f      	beq.n	800619a <TIM_OC3_SetConfig+0xbe>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1d      	ldr	r2, [pc, #116]	; (80061f4 <TIM_OC3_SetConfig+0x118>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00b      	beq.n	800619a <TIM_OC3_SetConfig+0xbe>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <TIM_OC3_SetConfig+0x11c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d007      	beq.n	800619a <TIM_OC3_SetConfig+0xbe>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1b      	ldr	r2, [pc, #108]	; (80061fc <TIM_OC3_SetConfig+0x120>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d003      	beq.n	800619a <TIM_OC3_SetConfig+0xbe>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a16      	ldr	r2, [pc, #88]	; (80061f0 <TIM_OC3_SetConfig+0x114>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d113      	bne.n	80061c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	011b      	lsls	r3, r3, #4
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40013400 	.word	0x40013400
 80061f0:	40015000 	.word	0x40015000
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800

08006200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800622e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	021b      	lsls	r3, r3, #8
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800624e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	031b      	lsls	r3, r3, #12
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <TIM_OC4_SetConfig+0x110>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_OC4_SetConfig+0x74>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a2b      	ldr	r2, [pc, #172]	; (8006314 <TIM_OC4_SetConfig+0x114>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC4_SetConfig+0x74>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <TIM_OC4_SetConfig+0x118>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d10d      	bne.n	8006290 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800627a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	031b      	lsls	r3, r3, #12
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <TIM_OC4_SetConfig+0x110>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d013      	beq.n	80062c0 <TIM_OC4_SetConfig+0xc0>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <TIM_OC4_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00f      	beq.n	80062c0 <TIM_OC4_SetConfig+0xc0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	; (800631c <TIM_OC4_SetConfig+0x11c>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <TIM_OC4_SetConfig+0xc0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <TIM_OC4_SetConfig+0x120>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_OC4_SetConfig+0xc0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <TIM_OC4_SetConfig+0x124>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_OC4_SetConfig+0xc0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a17      	ldr	r2, [pc, #92]	; (8006318 <TIM_OC4_SetConfig+0x118>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d113      	bne.n	80062e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	019b      	lsls	r3, r3, #6
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	019b      	lsls	r3, r3, #6
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	621a      	str	r2, [r3, #32]
}
 8006302:	bf00      	nop
 8006304:	371c      	adds	r7, #28
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	40012c00 	.word	0x40012c00
 8006314:	40013400 	.word	0x40013400
 8006318:	40015000 	.word	0x40015000
 800631c:	40014000 	.word	0x40014000
 8006320:	40014400 	.word	0x40014400
 8006324:	40014800 	.word	0x40014800

08006328 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4313      	orrs	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800636c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a19      	ldr	r2, [pc, #100]	; (80063e4 <TIM_OC5_SetConfig+0xbc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <TIM_OC5_SetConfig+0x82>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a18      	ldr	r2, [pc, #96]	; (80063e8 <TIM_OC5_SetConfig+0xc0>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_OC5_SetConfig+0x82>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a17      	ldr	r2, [pc, #92]	; (80063ec <TIM_OC5_SetConfig+0xc4>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_OC5_SetConfig+0x82>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <TIM_OC5_SetConfig+0xc8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_OC5_SetConfig+0x82>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <TIM_OC5_SetConfig+0xcc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_OC5_SetConfig+0x82>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <TIM_OC5_SetConfig+0xd0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d109      	bne.n	80063be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	021b      	lsls	r3, r3, #8
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	621a      	str	r2, [r3, #32]
}
 80063d8:	bf00      	nop
 80063da:	371c      	adds	r7, #28
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	40012c00 	.word	0x40012c00
 80063e8:	40013400 	.word	0x40013400
 80063ec:	40014000 	.word	0x40014000
 80063f0:	40014400 	.word	0x40014400
 80063f4:	40014800 	.word	0x40014800
 80063f8:	40015000 	.word	0x40015000

080063fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	021b      	lsls	r3, r3, #8
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	051b      	lsls	r3, r3, #20
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a1a      	ldr	r2, [pc, #104]	; (80064bc <TIM_OC6_SetConfig+0xc0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <TIM_OC6_SetConfig+0x84>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a19      	ldr	r2, [pc, #100]	; (80064c0 <TIM_OC6_SetConfig+0xc4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_OC6_SetConfig+0x84>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a18      	ldr	r2, [pc, #96]	; (80064c4 <TIM_OC6_SetConfig+0xc8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC6_SetConfig+0x84>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <TIM_OC6_SetConfig+0xcc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC6_SetConfig+0x84>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a16      	ldr	r2, [pc, #88]	; (80064cc <TIM_OC6_SetConfig+0xd0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC6_SetConfig+0x84>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a15      	ldr	r2, [pc, #84]	; (80064d0 <TIM_OC6_SetConfig+0xd4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	029b      	lsls	r3, r3, #10
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	bf00      	nop
 80064b0:	371c      	adds	r7, #28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40013400 	.word	0x40013400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800
 80064d0:	40015000 	.word	0x40015000

080064d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b087      	sub	sp, #28
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	f023 0201 	bic.w	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f023 030a 	bic.w	r3, r3, #10
 8006510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr

08006532 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006532:	b480      	push	{r7}
 8006534:	b087      	sub	sp, #28
 8006536:	af00      	add	r7, sp, #0
 8006538:	60f8      	str	r0, [r7, #12]
 800653a:	60b9      	str	r1, [r7, #8]
 800653c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0210 	bic.w	r2, r3, #16
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800655c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	031b      	lsls	r3, r3, #12
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800656e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	011b      	lsls	r3, r3, #4
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	4313      	orrs	r3, r2
 8006578:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	621a      	str	r2, [r3, #32]
}
 8006586:	bf00      	nop
 8006588:	371c      	adds	r7, #28
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80065a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f043 0307 	orr.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	609a      	str	r2, [r3, #8]
}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	2201      	movs	r2, #1
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1a      	ldr	r2, [r3, #32]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	43db      	mvns	r3, r3
 800662e:	401a      	ands	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a1a      	ldr	r2, [r3, #32]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f003 031f 	and.w	r3, r3, #31
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	fa01 f303 	lsl.w	r3, r1, r3
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	621a      	str	r2, [r3, #32]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
	...

08006658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800666c:	2302      	movs	r3, #2
 800666e:	e06f      	b.n	8006750 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a31      	ldr	r2, [pc, #196]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a30      	ldr	r2, [pc, #192]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a2e      	ldr	r2, [pc, #184]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d108      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80066b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1e      	ldr	r2, [pc, #120]	; (800675c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d01d      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f0:	d018      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1c      	ldr	r2, [pc, #112]	; (8006768 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d013      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1a      	ldr	r2, [pc, #104]	; (800676c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00e      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a15      	ldr	r2, [pc, #84]	; (8006760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d009      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a16      	ldr	r2, [pc, #88]	; (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a11      	ldr	r2, [pc, #68]	; (8006764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d10c      	bne.n	800673e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800672a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	4313      	orrs	r3, r2
 8006734:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40013400 	.word	0x40013400
 8006764:	40015000 	.word	0x40015000
 8006768:	40000400 	.word	0x40000400
 800676c:	40000800 	.word	0x40000800
 8006770:	40014000 	.word	0x40014000

08006774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e042      	b.n	800680c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800678c:	2b00      	cmp	r3, #0
 800678e:	d106      	bne.n	800679e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fa ff03 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2224      	movs	r2, #36	; 0x24
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fd1a 	bl	80071f0 <UART_SetConfig>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e022      	b.n	800680c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 f80a 	bl	80077e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 f891 	bl	800792c <UART_CheckIdleState>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	; 0x28
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800682a:	2b20      	cmp	r3, #32
 800682c:	f040 8083 	bne.w	8006936 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d002      	beq.n	800683c <HAL_UART_Transmit+0x28>
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e07b      	b.n	8006938 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_UART_Transmit+0x3a>
 800684a:	2302      	movs	r3, #2
 800684c:	e074      	b.n	8006938 <HAL_UART_Transmit+0x124>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2221      	movs	r2, #33	; 0x21
 8006862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006866:	f7fb fa6b 	bl	8001d40 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006884:	d108      	bne.n	8006898 <HAL_UART_Transmit+0x84>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d104      	bne.n	8006898 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800688e:	2300      	movs	r3, #0
 8006890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e003      	b.n	80068a0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800689c:	2300      	movs	r3, #0
 800689e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80068a8:	e02c      	b.n	8006904 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	2180      	movs	r1, #128	; 0x80
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f001 f884 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e039      	b.n	8006938 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	3302      	adds	r3, #2
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e007      	b.n	80068f2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	781a      	ldrb	r2, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	3301      	adds	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1cc      	bne.n	80068aa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2200      	movs	r2, #0
 8006918:	2140      	movs	r1, #64	; 0x40
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f001 f851 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e006      	b.n	8006938 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e000      	b.n	8006938 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006936:	2302      	movs	r3, #2
  }
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b08a      	sub	sp, #40	; 0x28
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	603b      	str	r3, [r7, #0]
 800694c:	4613      	mov	r3, r2
 800694e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006956:	2b20      	cmp	r3, #32
 8006958:	f040 80c0 	bne.w	8006adc <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Receive+0x28>
 8006962:	88fb      	ldrh	r3, [r7, #6]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e0b8      	b.n	8006ade <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006972:	2b01      	cmp	r3, #1
 8006974:	d101      	bne.n	800697a <HAL_UART_Receive+0x3a>
 8006976:	2302      	movs	r3, #2
 8006978:	e0b1      	b.n	8006ade <HAL_UART_Receive+0x19e>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2222      	movs	r2, #34	; 0x22
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006998:	f7fb f9d2 	bl	8001d40 <HAL_GetTick>
 800699c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	88fa      	ldrh	r2, [r7, #6]
 80069aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d10e      	bne.n	80069d6 <HAL_UART_Receive+0x96>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_UART_Receive+0x8c>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069ca:	e02d      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	22ff      	movs	r2, #255	; 0xff
 80069d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069d4:	e028      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10d      	bne.n	80069fa <HAL_UART_Receive+0xba>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d104      	bne.n	80069f0 <HAL_UART_Receive+0xb0>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069ee:	e01b      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	227f      	movs	r2, #127	; 0x7f
 80069f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069f8:	e016      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a02:	d10d      	bne.n	8006a20 <HAL_UART_Receive+0xe0>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <HAL_UART_Receive+0xd6>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	227f      	movs	r2, #127	; 0x7f
 8006a10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a14:	e008      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	223f      	movs	r2, #63	; 0x3f
 8006a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a1e:	e003      	b.n	8006a28 <HAL_UART_Receive+0xe8>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a2e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a38:	d108      	bne.n	8006a4c <HAL_UART_Receive+0x10c>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d104      	bne.n	8006a4c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	e003      	b.n	8006a54 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a5c:	e032      	b.n	8006ac4 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2120      	movs	r1, #32
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 ffaa 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e032      	b.n	8006ade <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	8a7b      	ldrh	r3, [r7, #18]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	3302      	adds	r3, #2
 8006a94:	61bb      	str	r3, [r7, #24]
 8006a96:	e00c      	b.n	8006ab2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	3b01      	subs	r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1c6      	bne.n	8006a5e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d142      	bne.n	8006b86 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <HAL_UART_Receive_IT+0x24>
 8006b06:	88fb      	ldrh	r3, [r7, #6]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e03b      	b.n	8006b88 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_UART_Receive_IT+0x36>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e034      	b.n	8006b88 <HAL_UART_Receive_IT+0xa0>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a17      	ldr	r2, [pc, #92]	; (8006b90 <HAL_UART_Receive_IT+0xa8>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d01f      	beq.n	8006b76 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d018      	beq.n	8006b76 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	613b      	str	r3, [r7, #16]
   return(result);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	623b      	str	r3, [r7, #32]
 8006b64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b76:	88fb      	ldrh	r3, [r7, #6]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68b9      	ldr	r1, [r7, #8]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 ffe9 	bl	8007b54 <UART_Start_Receive_IT>
 8006b82:	4603      	mov	r3, r0
 8006b84:	e000      	b.n	8006b88 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	; 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40008000 	.word	0x40008000

08006b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b0ba      	sub	sp, #232	; 0xe8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006bbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d11b      	bne.n	8006c08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d015      	beq.n	8006c08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be0:	f003 0320 	and.w	r3, r3, #32
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d105      	bne.n	8006bf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d009      	beq.n	8006c08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 82d6 	beq.w	80071aa <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
      }
      return;
 8006c06:	e2d0      	b.n	80071aa <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 811f 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c16:	4b8b      	ldr	r3, [pc, #556]	; (8006e44 <HAL_UART_IRQHandler+0x2b0>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d106      	bne.n	8006c2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c22:	4b89      	ldr	r3, [pc, #548]	; (8006e48 <HAL_UART_IRQHandler+0x2b4>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8112 	beq.w	8006e50 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d011      	beq.n	8006c5c <HAL_UART_IRQHandler+0xc8>
 8006c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c52:	f043 0201 	orr.w	r2, r3, #1
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_UART_IRQHandler+0xf8>
 8006c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d011      	beq.n	8006cbc <HAL_UART_IRQHandler+0x128>
 8006c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2204      	movs	r2, #4
 8006caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cb2:	f043 0202 	orr.w	r2, r3, #2
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d017      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d105      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006cd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cd8:	4b5a      	ldr	r3, [pc, #360]	; (8006e44 <HAL_UART_IRQHandler+0x2b0>)
 8006cda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2208      	movs	r2, #8
 8006ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cee:	f043 0208 	orr.w	r2, r3, #8
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d012      	beq.n	8006d2a <HAL_UART_IRQHandler+0x196>
 8006d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 823c 	beq.w	80071ae <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d105      	bne.n	8006d5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b40      	cmp	r3, #64	; 0x40
 8006d80:	d005      	beq.n	8006d8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d04f      	beq.n	8006e2e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f80a 	bl	8007da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9e:	2b40      	cmp	r3, #64	; 0x40
 8006da0:	d141      	bne.n	8006e26 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006dde:	e841 2300 	strex	r3, r2, [r1]
 8006de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1d9      	bne.n	8006da2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d013      	beq.n	8006e1e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dfa:	4a14      	ldr	r2, [pc, #80]	; (8006e4c <HAL_UART_IRQHandler+0x2b8>)
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fc fce7 	bl	80037d6 <HAL_DMA_Abort_IT>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d017      	beq.n	8006e3e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	e00f      	b.n	8006e3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7fa f9aa 	bl	8001178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e24:	e00b      	b.n	8006e3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa f9a6 	bl	8001178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2c:	e007      	b.n	8006e3e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fa f9a2 	bl	8001178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006e3c:	e1b7      	b.n	80071ae <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e3e:	bf00      	nop
    return;
 8006e40:	e1b5      	b.n	80071ae <HAL_UART_IRQHandler+0x61a>
 8006e42:	bf00      	nop
 8006e44:	10000001 	.word	0x10000001
 8006e48:	04000120 	.word	0x04000120
 8006e4c:	08007e75 	.word	0x08007e75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	f040 814a 	bne.w	80070ee <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8143 	beq.w	80070ee <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e6c:	f003 0310 	and.w	r3, r3, #16
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 813c 	beq.w	80070ee <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2210      	movs	r2, #16
 8006e7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e88:	2b40      	cmp	r3, #64	; 0x40
 8006e8a:	f040 80b5 	bne.w	8006ff8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8187 	beq.w	80071b2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	f080 817f 	bcs.w	80071b2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f040 8086 	bne.w	8006fdc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006efe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1da      	bne.n	8006ed0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3308      	adds	r3, #8
 8006f20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f24:	e853 3f00 	ldrex	r3, [r3]
 8006f28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f2c:	f023 0301 	bic.w	r3, r3, #1
 8006f30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e1      	bne.n	8006f1a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	3308      	adds	r3, #8
 8006f5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e3      	bne.n	8006f56 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fac:	f023 0310 	bic.w	r3, r3, #16
 8006fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e4      	bne.n	8006f9c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fc fba4 	bl	8003724 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f8f1 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ff6:	e0dc      	b.n	80071b2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007004:	b29b      	uxth	r3, r3
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007012:	b29b      	uxth	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80ce 	beq.w	80071b6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800701a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 80c9 	beq.w	80071b6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007034:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007038:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	461a      	mov	r2, r3
 8007042:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007046:	647b      	str	r3, [r7, #68]	; 0x44
 8007048:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800704c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800704e:	e841 2300 	strex	r3, r2, [r1]
 8007052:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1e4      	bne.n	8007024 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3308      	adds	r3, #8
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	623b      	str	r3, [r7, #32]
   return(result);
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	3308      	adds	r3, #8
 800707e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007082:	633a      	str	r2, [r7, #48]	; 0x30
 8007084:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800708a:	e841 2300 	strex	r3, r2, [r1]
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1e1      	bne.n	800705a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070cc:	61fb      	str	r3, [r7, #28]
 80070ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	69b9      	ldr	r1, [r7, #24]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	617b      	str	r3, [r7, #20]
   return(result);
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e4      	bne.n	80070aa <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f876 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070ec:	e063      	b.n	80071b6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00e      	beq.n	8007118 <HAL_UART_IRQHandler+0x584>
 80070fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800710e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f001 fb4d 	bl	80087b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007116:	e051      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007120:	2b00      	cmp	r3, #0
 8007122:	d014      	beq.n	800714e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800712c:	2b00      	cmp	r3, #0
 800712e:	d105      	bne.n	800713c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d008      	beq.n	800714e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007140:	2b00      	cmp	r3, #0
 8007142:	d03a      	beq.n	80071ba <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	4798      	blx	r3
    }
    return;
 800714c:	e035      	b.n	80071ba <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_UART_IRQHandler+0x5da>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fe9a 	bl	8007ea0 <UART_EndTransmit_IT>
    return;
 800716c:	e026      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HAL_UART_IRQHandler+0x5fa>
 800717a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 fb26 	bl	80087d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800718c:	e016      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d010      	beq.n	80071bc <HAL_UART_IRQHandler+0x628>
 800719a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da0c      	bge.n	80071bc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fb0e 	bl	80087c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071a8:	e008      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
      return;
 80071aa:	bf00      	nop
 80071ac:	e006      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
    return;
 80071ae:	bf00      	nop
 80071b0:	e004      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
      return;
 80071b2:	bf00      	nop
 80071b4:	e002      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
      return;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <HAL_UART_IRQHandler+0x628>
    return;
 80071ba:	bf00      	nop
  }
}
 80071bc:	37e8      	adds	r7, #232	; 0xe8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop

080071c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f4:	b08c      	sub	sp, #48	; 0x30
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	689a      	ldr	r2, [r3, #8]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	431a      	orrs	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	431a      	orrs	r2, r3
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	69db      	ldr	r3, [r3, #28]
 8007214:	4313      	orrs	r3, r2
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4baa      	ldr	r3, [pc, #680]	; (80074c8 <UART_SetConfig+0x2d8>)
 8007220:	4013      	ands	r3, r2
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	6812      	ldr	r2, [r2, #0]
 8007226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007228:	430b      	orrs	r3, r1
 800722a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a9f      	ldr	r2, [pc, #636]	; (80074cc <UART_SetConfig+0x2dc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007258:	4313      	orrs	r3, r2
 800725a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007266:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	6812      	ldr	r2, [r2, #0]
 800726e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007270:	430b      	orrs	r3, r1
 8007272:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	f023 010f 	bic.w	r1, r3, #15
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a90      	ldr	r2, [pc, #576]	; (80074d0 <UART_SetConfig+0x2e0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d125      	bne.n	80072e0 <UART_SetConfig+0xf0>
 8007294:	4b8f      	ldr	r3, [pc, #572]	; (80074d4 <UART_SetConfig+0x2e4>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	f003 0303 	and.w	r3, r3, #3
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d81a      	bhi.n	80072d8 <UART_SetConfig+0xe8>
 80072a2:	a201      	add	r2, pc, #4	; (adr r2, 80072a8 <UART_SetConfig+0xb8>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	080072c9 	.word	0x080072c9
 80072b0:	080072c1 	.word	0x080072c1
 80072b4:	080072d1 	.word	0x080072d1
 80072b8:	2301      	movs	r3, #1
 80072ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072be:	e116      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072c0:	2302      	movs	r3, #2
 80072c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c6:	e112      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072c8:	2304      	movs	r3, #4
 80072ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ce:	e10e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072d0:	2308      	movs	r3, #8
 80072d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d6:	e10a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072d8:	2310      	movs	r3, #16
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072de:	e106      	b.n	80074ee <UART_SetConfig+0x2fe>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a7c      	ldr	r2, [pc, #496]	; (80074d8 <UART_SetConfig+0x2e8>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d138      	bne.n	800735c <UART_SetConfig+0x16c>
 80072ea:	4b7a      	ldr	r3, [pc, #488]	; (80074d4 <UART_SetConfig+0x2e4>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	f003 030c 	and.w	r3, r3, #12
 80072f4:	2b0c      	cmp	r3, #12
 80072f6:	d82d      	bhi.n	8007354 <UART_SetConfig+0x164>
 80072f8:	a201      	add	r2, pc, #4	; (adr r2, 8007300 <UART_SetConfig+0x110>)
 80072fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072fe:	bf00      	nop
 8007300:	08007335 	.word	0x08007335
 8007304:	08007355 	.word	0x08007355
 8007308:	08007355 	.word	0x08007355
 800730c:	08007355 	.word	0x08007355
 8007310:	08007345 	.word	0x08007345
 8007314:	08007355 	.word	0x08007355
 8007318:	08007355 	.word	0x08007355
 800731c:	08007355 	.word	0x08007355
 8007320:	0800733d 	.word	0x0800733d
 8007324:	08007355 	.word	0x08007355
 8007328:	08007355 	.word	0x08007355
 800732c:	08007355 	.word	0x08007355
 8007330:	0800734d 	.word	0x0800734d
 8007334:	2300      	movs	r3, #0
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e0d8      	b.n	80074ee <UART_SetConfig+0x2fe>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e0d4      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734a:	e0d0      	b.n	80074ee <UART_SetConfig+0x2fe>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007352:	e0cc      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800735a:	e0c8      	b.n	80074ee <UART_SetConfig+0x2fe>
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a5e      	ldr	r2, [pc, #376]	; (80074dc <UART_SetConfig+0x2ec>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d125      	bne.n	80073b2 <UART_SetConfig+0x1c2>
 8007366:	4b5b      	ldr	r3, [pc, #364]	; (80074d4 <UART_SetConfig+0x2e4>)
 8007368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007370:	2b30      	cmp	r3, #48	; 0x30
 8007372:	d016      	beq.n	80073a2 <UART_SetConfig+0x1b2>
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d818      	bhi.n	80073aa <UART_SetConfig+0x1ba>
 8007378:	2b20      	cmp	r3, #32
 800737a:	d00a      	beq.n	8007392 <UART_SetConfig+0x1a2>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d814      	bhi.n	80073aa <UART_SetConfig+0x1ba>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <UART_SetConfig+0x19a>
 8007384:	2b10      	cmp	r3, #16
 8007386:	d008      	beq.n	800739a <UART_SetConfig+0x1aa>
 8007388:	e00f      	b.n	80073aa <UART_SetConfig+0x1ba>
 800738a:	2300      	movs	r3, #0
 800738c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007390:	e0ad      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007392:	2302      	movs	r3, #2
 8007394:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007398:	e0a9      	b.n	80074ee <UART_SetConfig+0x2fe>
 800739a:	2304      	movs	r3, #4
 800739c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a0:	e0a5      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073a2:	2308      	movs	r3, #8
 80073a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a8:	e0a1      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073aa:	2310      	movs	r3, #16
 80073ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b0:	e09d      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a4a      	ldr	r2, [pc, #296]	; (80074e0 <UART_SetConfig+0x2f0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d125      	bne.n	8007408 <UART_SetConfig+0x218>
 80073bc:	4b45      	ldr	r3, [pc, #276]	; (80074d4 <UART_SetConfig+0x2e4>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073c6:	2bc0      	cmp	r3, #192	; 0xc0
 80073c8:	d016      	beq.n	80073f8 <UART_SetConfig+0x208>
 80073ca:	2bc0      	cmp	r3, #192	; 0xc0
 80073cc:	d818      	bhi.n	8007400 <UART_SetConfig+0x210>
 80073ce:	2b80      	cmp	r3, #128	; 0x80
 80073d0:	d00a      	beq.n	80073e8 <UART_SetConfig+0x1f8>
 80073d2:	2b80      	cmp	r3, #128	; 0x80
 80073d4:	d814      	bhi.n	8007400 <UART_SetConfig+0x210>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <UART_SetConfig+0x1f0>
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d008      	beq.n	80073f0 <UART_SetConfig+0x200>
 80073de:	e00f      	b.n	8007400 <UART_SetConfig+0x210>
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e6:	e082      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073e8:	2302      	movs	r3, #2
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e07e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073f0:	2304      	movs	r3, #4
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e07a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80073f8:	2308      	movs	r3, #8
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e076      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007400:	2310      	movs	r3, #16
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007406:	e072      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a35      	ldr	r2, [pc, #212]	; (80074e4 <UART_SetConfig+0x2f4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d12a      	bne.n	8007468 <UART_SetConfig+0x278>
 8007412:	4b30      	ldr	r3, [pc, #192]	; (80074d4 <UART_SetConfig+0x2e4>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800741c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007420:	d01a      	beq.n	8007458 <UART_SetConfig+0x268>
 8007422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007426:	d81b      	bhi.n	8007460 <UART_SetConfig+0x270>
 8007428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742c:	d00c      	beq.n	8007448 <UART_SetConfig+0x258>
 800742e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007432:	d815      	bhi.n	8007460 <UART_SetConfig+0x270>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <UART_SetConfig+0x250>
 8007438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743c:	d008      	beq.n	8007450 <UART_SetConfig+0x260>
 800743e:	e00f      	b.n	8007460 <UART_SetConfig+0x270>
 8007440:	2300      	movs	r3, #0
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e052      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007448:	2302      	movs	r3, #2
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e04e      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007450:	2304      	movs	r3, #4
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e04a      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007458:	2308      	movs	r3, #8
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e046      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007460:	2310      	movs	r3, #16
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007466:	e042      	b.n	80074ee <UART_SetConfig+0x2fe>
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a17      	ldr	r2, [pc, #92]	; (80074cc <UART_SetConfig+0x2dc>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d13a      	bne.n	80074e8 <UART_SetConfig+0x2f8>
 8007472:	4b18      	ldr	r3, [pc, #96]	; (80074d4 <UART_SetConfig+0x2e4>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800747c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007480:	d01a      	beq.n	80074b8 <UART_SetConfig+0x2c8>
 8007482:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007486:	d81b      	bhi.n	80074c0 <UART_SetConfig+0x2d0>
 8007488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800748c:	d00c      	beq.n	80074a8 <UART_SetConfig+0x2b8>
 800748e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007492:	d815      	bhi.n	80074c0 <UART_SetConfig+0x2d0>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <UART_SetConfig+0x2b0>
 8007498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800749c:	d008      	beq.n	80074b0 <UART_SetConfig+0x2c0>
 800749e:	e00f      	b.n	80074c0 <UART_SetConfig+0x2d0>
 80074a0:	2300      	movs	r3, #0
 80074a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074a6:	e022      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ae:	e01e      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074b0:	2304      	movs	r3, #4
 80074b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074b6:	e01a      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074b8:	2308      	movs	r3, #8
 80074ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074be:	e016      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074c0:	2310      	movs	r3, #16
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c6:	e012      	b.n	80074ee <UART_SetConfig+0x2fe>
 80074c8:	cfff69f3 	.word	0xcfff69f3
 80074cc:	40008000 	.word	0x40008000
 80074d0:	40013800 	.word	0x40013800
 80074d4:	40021000 	.word	0x40021000
 80074d8:	40004400 	.word	0x40004400
 80074dc:	40004800 	.word	0x40004800
 80074e0:	40004c00 	.word	0x40004c00
 80074e4:	40005000 	.word	0x40005000
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4aae      	ldr	r2, [pc, #696]	; (80077ac <UART_SetConfig+0x5bc>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	f040 8097 	bne.w	8007628 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80074fe:	2b08      	cmp	r3, #8
 8007500:	d823      	bhi.n	800754a <UART_SetConfig+0x35a>
 8007502:	a201      	add	r2, pc, #4	; (adr r2, 8007508 <UART_SetConfig+0x318>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	0800752d 	.word	0x0800752d
 800750c:	0800754b 	.word	0x0800754b
 8007510:	08007535 	.word	0x08007535
 8007514:	0800754b 	.word	0x0800754b
 8007518:	0800753b 	.word	0x0800753b
 800751c:	0800754b 	.word	0x0800754b
 8007520:	0800754b 	.word	0x0800754b
 8007524:	0800754b 	.word	0x0800754b
 8007528:	08007543 	.word	0x08007543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800752c:	f7fd fa04 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8007530:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007532:	e010      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007534:	4b9e      	ldr	r3, [pc, #632]	; (80077b0 <UART_SetConfig+0x5c0>)
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007538:	e00d      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753a:	f7fd f98f 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007540:	e009      	b.n	8007556 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007548:	e005      	b.n	8007556 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007554:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8130 	beq.w	80077be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007562:	4a94      	ldr	r2, [pc, #592]	; (80077b4 <UART_SetConfig+0x5c4>)
 8007564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007568:	461a      	mov	r2, r3
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007570:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	429a      	cmp	r2, r3
 8007580:	d305      	bcc.n	800758e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007588:	69ba      	ldr	r2, [r7, #24]
 800758a:	429a      	cmp	r2, r3
 800758c:	d903      	bls.n	8007596 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007594:	e113      	b.n	80077be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007598:	2200      	movs	r2, #0
 800759a:	60bb      	str	r3, [r7, #8]
 800759c:	60fa      	str	r2, [r7, #12]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	4a84      	ldr	r2, [pc, #528]	; (80077b4 <UART_SetConfig+0x5c4>)
 80075a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	2200      	movs	r2, #0
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075b8:	f7f8 fe82 	bl	80002c0 <__aeabi_uldivmod>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4610      	mov	r0, r2
 80075c2:	4619      	mov	r1, r3
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	020b      	lsls	r3, r1, #8
 80075ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075d2:	0202      	lsls	r2, r0, #8
 80075d4:	6979      	ldr	r1, [r7, #20]
 80075d6:	6849      	ldr	r1, [r1, #4]
 80075d8:	0849      	lsrs	r1, r1, #1
 80075da:	2000      	movs	r0, #0
 80075dc:	460c      	mov	r4, r1
 80075de:	4605      	mov	r5, r0
 80075e0:	eb12 0804 	adds.w	r8, r2, r4
 80075e4:	eb43 0905 	adc.w	r9, r3, r5
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	469a      	mov	sl, r3
 80075f0:	4693      	mov	fp, r2
 80075f2:	4652      	mov	r2, sl
 80075f4:	465b      	mov	r3, fp
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f8 fe61 	bl	80002c0 <__aeabi_uldivmod>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4613      	mov	r3, r2
 8007604:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800760c:	d308      	bcc.n	8007620 <UART_SetConfig+0x430>
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007614:	d204      	bcs.n	8007620 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	6a3a      	ldr	r2, [r7, #32]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e0ce      	b.n	80077be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007626:	e0ca      	b.n	80077be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	69db      	ldr	r3, [r3, #28]
 800762c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007630:	d166      	bne.n	8007700 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007632:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007636:	2b08      	cmp	r3, #8
 8007638:	d827      	bhi.n	800768a <UART_SetConfig+0x49a>
 800763a:	a201      	add	r2, pc, #4	; (adr r2, 8007640 <UART_SetConfig+0x450>)
 800763c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007640:	08007665 	.word	0x08007665
 8007644:	0800766d 	.word	0x0800766d
 8007648:	08007675 	.word	0x08007675
 800764c:	0800768b 	.word	0x0800768b
 8007650:	0800767b 	.word	0x0800767b
 8007654:	0800768b 	.word	0x0800768b
 8007658:	0800768b 	.word	0x0800768b
 800765c:	0800768b 	.word	0x0800768b
 8007660:	08007683 	.word	0x08007683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007664:	f7fd f968 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8007668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800766a:	e014      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800766c:	f7fd f97a 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8007670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007672:	e010      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007674:	4b4e      	ldr	r3, [pc, #312]	; (80077b0 <UART_SetConfig+0x5c0>)
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007678:	e00d      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800767a:	f7fd f8ef 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800767e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007680:	e009      	b.n	8007696 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007688:	e005      	b.n	8007696 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007694:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8090 	beq.w	80077be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a2:	4a44      	ldr	r2, [pc, #272]	; (80077b4 <UART_SetConfig+0x5c4>)
 80076a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b0:	005a      	lsls	r2, r3, #1
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	085b      	lsrs	r3, r3, #1
 80076b8:	441a      	add	r2, r3
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d916      	bls.n	80076f8 <UART_SetConfig+0x508>
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076d0:	d212      	bcs.n	80076f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	f023 030f 	bic.w	r3, r3, #15
 80076da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076dc:	6a3b      	ldr	r3, [r7, #32]
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	f003 0307 	and.w	r3, r3, #7
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	8bfb      	ldrh	r3, [r7, #30]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	8bfa      	ldrh	r2, [r7, #30]
 80076f4:	60da      	str	r2, [r3, #12]
 80076f6:	e062      	b.n	80077be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80076fe:	e05e      	b.n	80077be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007700:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007704:	2b08      	cmp	r3, #8
 8007706:	d828      	bhi.n	800775a <UART_SetConfig+0x56a>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <UART_SetConfig+0x520>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007735 	.word	0x08007735
 8007714:	0800773d 	.word	0x0800773d
 8007718:	08007745 	.word	0x08007745
 800771c:	0800775b 	.word	0x0800775b
 8007720:	0800774b 	.word	0x0800774b
 8007724:	0800775b 	.word	0x0800775b
 8007728:	0800775b 	.word	0x0800775b
 800772c:	0800775b 	.word	0x0800775b
 8007730:	08007753 	.word	0x08007753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007734:	f7fd f900 	bl	8004938 <HAL_RCC_GetPCLK1Freq>
 8007738:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800773a:	e014      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800773c:	f7fd f912 	bl	8004964 <HAL_RCC_GetPCLK2Freq>
 8007740:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007742:	e010      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007744:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <UART_SetConfig+0x5c0>)
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007748:	e00d      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800774a:	f7fd f887 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800774e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007750:	e009      	b.n	8007766 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007758:	e005      	b.n	8007766 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007764:	bf00      	nop
    }

    if (pclk != 0U)
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d028      	beq.n	80077be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	4a10      	ldr	r2, [pc, #64]	; (80077b4 <UART_SetConfig+0x5c4>)
 8007772:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007776:	461a      	mov	r2, r3
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	fbb3 f2f2 	udiv	r2, r3, r2
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	085b      	lsrs	r3, r3, #1
 8007784:	441a      	add	r2, r3
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	fbb2 f3f3 	udiv	r3, r2, r3
 800778e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	2b0f      	cmp	r3, #15
 8007794:	d910      	bls.n	80077b8 <UART_SetConfig+0x5c8>
 8007796:	6a3b      	ldr	r3, [r7, #32]
 8007798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779c:	d20c      	bcs.n	80077b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	60da      	str	r2, [r3, #12]
 80077a8:	e009      	b.n	80077be <UART_SetConfig+0x5ce>
 80077aa:	bf00      	nop
 80077ac:	40008000 	.word	0x40008000
 80077b0:	00f42400 	.word	0x00f42400
 80077b4:	08009cdc 	.word	0x08009cdc
      }
      else
      {
        ret = HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2200      	movs	r2, #0
 80077d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80077da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3730      	adds	r7, #48	; 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080077e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00a      	beq.n	8007812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00a      	beq.n	8007834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	f003 0304 	and.w	r3, r3, #4
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00a      	beq.n	8007856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	430a      	orrs	r2, r1
 8007854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00a      	beq.n	8007878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d01a      	beq.n	80078fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078e6:	d10a      	bne.n	80078fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	605a      	str	r2, [r3, #4]
  }
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800793c:	f7fa fa00 	bl	8001d40 <HAL_GetTick>
 8007940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b08      	cmp	r3, #8
 800794e:	d10e      	bne.n	800796e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f82f 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d001      	beq.n	800796e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e025      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0304 	and.w	r3, r3, #4
 8007978:	2b04      	cmp	r3, #4
 800797a:	d10e      	bne.n	800799a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800797c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007980:	9300      	str	r3, [sp, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f819 	bl	80079c2 <UART_WaitOnFlagUntilTimeout>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007996:	2303      	movs	r3, #3
 8007998:	e00f      	b.n	80079ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b09c      	sub	sp, #112	; 0x70
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d2:	e0a9      	b.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	f000 80a5 	beq.w	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079de:	f7fa f9af 	bl	8001d40 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d302      	bcc.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80079ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d140      	bne.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a08:	667b      	str	r3, [r7, #100]	; 0x64
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e6      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	3308      	adds	r3, #8
 8007a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e5      	bne.n	8007a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2220      	movs	r2, #32
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e069      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d051      	beq.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a92:	d149      	bne.n	8007b28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abc:	637b      	str	r3, [r7, #52]	; 0x34
 8007abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3308      	adds	r3, #8
 8007aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007af0:	623a      	str	r2, [r7, #32]
 8007af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69f9      	ldr	r1, [r7, #28]
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2220      	movs	r2, #32
 8007b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e010      	b.n	8007b4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69da      	ldr	r2, [r3, #28]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	4013      	ands	r3, r2
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	79fb      	ldrb	r3, [r7, #7]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	f43f af46 	beq.w	80079d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3770      	adds	r7, #112	; 0x70
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b0a3      	sub	sp, #140	; 0x8c
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	88fa      	ldrh	r2, [r7, #6]
 8007b6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	88fa      	ldrh	r2, [r7, #6]
 8007b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b86:	d10e      	bne.n	8007ba6 <UART_Start_Receive_IT+0x52>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <UART_Start_Receive_IT+0x48>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007b9a:	e02d      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	22ff      	movs	r2, #255	; 0xff
 8007ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ba4:	e028      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10d      	bne.n	8007bca <UART_Start_Receive_IT+0x76>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d104      	bne.n	8007bc0 <UART_Start_Receive_IT+0x6c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	22ff      	movs	r2, #255	; 0xff
 8007bba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bbe:	e01b      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	227f      	movs	r2, #127	; 0x7f
 8007bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bc8:	e016      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bd2:	d10d      	bne.n	8007bf0 <UART_Start_Receive_IT+0x9c>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <UART_Start_Receive_IT+0x92>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	227f      	movs	r2, #127	; 0x7f
 8007be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007be4:	e008      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	223f      	movs	r2, #63	; 0x3f
 8007bea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007bee:	e003      	b.n	8007bf8 <UART_Start_Receive_IT+0xa4>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2222      	movs	r2, #34	; 0x22
 8007c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c12:	e853 3f00 	ldrex	r3, [r3]
 8007c16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007c18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007c2c:	673a      	str	r2, [r7, #112]	; 0x70
 8007c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007c32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e3      	bne.n	8007c08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c48:	d153      	bne.n	8007cf2 <UART_Start_Receive_IT+0x19e>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c50:	88fa      	ldrh	r2, [r7, #6]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d34d      	bcc.n	8007cf2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5e:	d107      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a4b      	ldr	r2, [pc, #300]	; (8007d98 <UART_Start_Receive_IT+0x244>)
 8007c6c:	671a      	str	r2, [r3, #112]	; 0x70
 8007c6e:	e002      	b.n	8007c76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4a4a      	ldr	r2, [pc, #296]	; (8007d9c <UART_Start_Receive_IT+0x248>)
 8007c74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d01a      	beq.n	8007cbc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c8e:	e853 3f00 	ldrex	r3, [r3]
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007caa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3308      	adds	r3, #8
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007cdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ce2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e5      	bne.n	8007cbc <UART_Start_Receive_IT+0x168>
 8007cf0:	e04a      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfa:	d107      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d103      	bne.n	8007d0c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4a26      	ldr	r2, [pc, #152]	; (8007da0 <UART_Start_Receive_IT+0x24c>)
 8007d08:	671a      	str	r2, [r3, #112]	; 0x70
 8007d0a:	e002      	b.n	8007d12 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	4a25      	ldr	r2, [pc, #148]	; (8007da4 <UART_Start_Receive_IT+0x250>)
 8007d10:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d019      	beq.n	8007d56 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	e853 3f00 	ldrex	r3, [r3]
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007d36:	677b      	str	r3, [r7, #116]	; 0x74
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d40:	637b      	str	r3, [r7, #52]	; 0x34
 8007d42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e6      	bne.n	8007d22 <UART_Start_Receive_IT+0x1ce>
 8007d54:	e018      	b.n	8007d88 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	e853 3f00 	ldrex	r3, [r3]
 8007d62:	613b      	str	r3, [r7, #16]
   return(result);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f043 0320 	orr.w	r3, r3, #32
 8007d6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	461a      	mov	r2, r3
 8007d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d74:	623b      	str	r3, [r7, #32]
 8007d76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	69f9      	ldr	r1, [r7, #28]
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e6      	bne.n	8007d56 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	378c      	adds	r7, #140	; 0x8c
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	080084b1 	.word	0x080084b1
 8007d9c:	080081b9 	.word	0x080081b9
 8007da0:	08008057 	.word	0x08008057
 8007da4:	08007ef7 	.word	0x08007ef7

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	; 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dce:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007df8:	f023 0301 	bic.w	r3, r3, #1
 8007dfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	3308      	adds	r3, #8
 8007e04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e3      	bne.n	8007de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d118      	bne.n	8007e54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f023 0310 	bic.w	r3, r3, #16
 8007e36:	647b      	str	r3, [r7, #68]	; 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e40:	61bb      	str	r3, [r7, #24]
 8007e42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	e841 2300 	strex	r3, r2, [r1]
 8007e4c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1e6      	bne.n	8007e22 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007e68:	bf00      	nop
 8007e6a:	3754      	adds	r7, #84	; 0x54
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7f9 f970 	bl	8001178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6979      	ldr	r1, [r7, #20]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e6      	bne.n	8007ea8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff f96b 	bl	80071c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eee:	bf00      	nop
 8007ef0:	3720      	adds	r7, #32
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}

08007ef6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b096      	sub	sp, #88	; 0x58
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f0e:	2b22      	cmp	r3, #34	; 0x22
 8007f10:	f040 8095 	bne.w	800803e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f22:	b2d9      	uxtb	r1, r3
 8007f24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	400a      	ands	r2, r1
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	3b01      	subs	r3, #1
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d178      	bne.n	800804e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	e853 3f00 	ldrex	r3, [r3]
 8007f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f70:	653b      	str	r3, [r7, #80]	; 0x50
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f82:	e841 2300 	strex	r3, r2, [r1]
 8007f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1e6      	bne.n	8007f5c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3308      	adds	r3, #8
 8007fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fae:	633a      	str	r2, [r7, #48]	; 0x30
 8007fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e5      	bne.n	8007f8e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d12e      	bne.n	8008036 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	e853 3f00 	ldrex	r3, [r3]
 8007fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f023 0310 	bic.w	r3, r3, #16
 8007ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	69b9      	ldr	r1, [r7, #24]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	617b      	str	r3, [r7, #20]
   return(result);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e6      	bne.n	8007fde <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	f003 0310 	and.w	r3, r3, #16
 800801a:	2b10      	cmp	r3, #16
 800801c:	d103      	bne.n	8008026 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2210      	movs	r2, #16
 8008024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff f8d2 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008034:	e00b      	b.n	800804e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7f9 f88c 	bl	8001154 <HAL_UART_RxCpltCallback>
}
 800803c:	e007      	b.n	800804e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	3758      	adds	r7, #88	; 0x58
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b096      	sub	sp, #88	; 0x58
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008064:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800806e:	2b22      	cmp	r3, #34	; 0x22
 8008070:	f040 8095 	bne.w	800819e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008084:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008088:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800808c:	4013      	ands	r3, r2
 800808e:	b29a      	uxth	r2, r3
 8008090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008092:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008098:	1c9a      	adds	r2, r3, #2
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d178      	bne.n	80081ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c4:	e853 3f00 	ldrex	r3, [r3]
 80080c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080da:	643b      	str	r3, [r7, #64]	; 0x40
 80080dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80080e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e2:	e841 2300 	strex	r3, r2, [r1]
 80080e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1e6      	bne.n	80080bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3308      	adds	r3, #8
 80080f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	f023 0301 	bic.w	r3, r3, #1
 8008104:	64bb      	str	r3, [r7, #72]	; 0x48
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800810e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008116:	e841 2300 	strex	r3, r2, [r1]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e5      	bne.n	80080ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008134:	2b01      	cmp	r3, #1
 8008136:	d12e      	bne.n	8008196 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	e853 3f00 	ldrex	r3, [r3]
 800814a:	60bb      	str	r3, [r7, #8]
   return(result);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f023 0310 	bic.w	r3, r3, #16
 8008152:	647b      	str	r3, [r7, #68]	; 0x44
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	461a      	mov	r2, r3
 800815a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008160:	6979      	ldr	r1, [r7, #20]
 8008162:	69ba      	ldr	r2, [r7, #24]
 8008164:	e841 2300 	strex	r3, r2, [r1]
 8008168:	613b      	str	r3, [r7, #16]
   return(result);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1e6      	bne.n	800813e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0310 	and.w	r3, r3, #16
 800817a:	2b10      	cmp	r3, #16
 800817c:	d103      	bne.n	8008186 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2210      	movs	r2, #16
 8008184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff f822 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008194:	e00b      	b.n	80081ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7f8 ffdc 	bl	8001154 <HAL_UART_RxCpltCallback>
}
 800819c:	e007      	b.n	80081ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	699a      	ldr	r2, [r3, #24]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0208 	orr.w	r2, r2, #8
 80081ac:	619a      	str	r2, [r3, #24]
}
 80081ae:	bf00      	nop
 80081b0:	3758      	adds	r7, #88	; 0x58
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b0a6      	sub	sp, #152	; 0x98
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ee:	2b22      	cmp	r3, #34	; 0x22
 80081f0:	f040 814f 	bne.w	8008492 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081fe:	e0f6      	b.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008206:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800820a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800820e:	b2d9      	uxtb	r1, r3
 8008210:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008214:	b2da      	uxtb	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821a:	400a      	ands	r2, r1
 800821c:	b2d2      	uxtb	r2, r2
 800821e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008224:	1c5a      	adds	r2, r3, #1
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008246:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800824a:	f003 0307 	and.w	r3, r3, #7
 800824e:	2b00      	cmp	r3, #0
 8008250:	d053      	beq.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008252:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <UART_RxISR_8BIT_FIFOEN+0xca>
 800825e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00b      	beq.n	8008282 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2201      	movs	r2, #1
 8008270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008282:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d011      	beq.n	80082b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800828e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2202      	movs	r2, #2
 80082a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a8:	f043 0204 	orr.w	r2, r3, #4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d011      	beq.n	80082e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80082be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00b      	beq.n	80082e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2204      	movs	r2, #4
 80082d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082d8:	f043 0202 	orr.w	r2, r3, #2
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d006      	beq.n	80082fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f7f8 ff43 	bl	8001178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008300:	b29b      	uxth	r3, r3
 8008302:	2b00      	cmp	r3, #0
 8008304:	d173      	bne.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800831a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008328:	66bb      	str	r3, [r7, #104]	; 0x68
 800832a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800832e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008336:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e4      	bne.n	8008306 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3308      	adds	r3, #8
 8008342:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800834c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800834e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008352:	f023 0301 	bic.w	r3, r3, #1
 8008356:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3308      	adds	r3, #8
 800835e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008360:	657a      	str	r2, [r7, #84]	; 0x54
 8008362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008366:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800836e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e3      	bne.n	800833c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008386:	2b01      	cmp	r3, #1
 8008388:	d12e      	bne.n	80083e8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	f023 0310 	bic.w	r3, r3, #16
 80083a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ae:	643b      	str	r3, [r7, #64]	; 0x40
 80083b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e6      	bne.n	8008390 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	69db      	ldr	r3, [r3, #28]
 80083c8:	f003 0310 	and.w	r3, r3, #16
 80083cc:	2b10      	cmp	r3, #16
 80083ce:	d103      	bne.n	80083d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2210      	movs	r2, #16
 80083d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7fe fef9 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
 80083e6:	e002      	b.n	80083ee <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f8 feb3 	bl	8001154 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d006      	beq.n	8008404 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80083f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f47f aefe 	bne.w	8008200 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800840a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800840e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008412:	2b00      	cmp	r3, #0
 8008414:	d045      	beq.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800841c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008420:	429a      	cmp	r2, r3
 8008422:	d23e      	bcs.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3308      	adds	r3, #8
 800842a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	61fb      	str	r3, [r7, #28]
   return(result);
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800843a:	673b      	str	r3, [r7, #112]	; 0x70
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008444:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800844a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e5      	bne.n	8008424 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a14      	ldr	r2, [pc, #80]	; (80084ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800845c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	60bb      	str	r3, [r7, #8]
   return(result);
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	f043 0320 	orr.w	r3, r3, #32
 8008472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800847c:	61bb      	str	r3, [r7, #24]
 800847e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6979      	ldr	r1, [r7, #20]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	613b      	str	r3, [r7, #16]
   return(result);
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008490:	e007      	b.n	80084a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	699a      	ldr	r2, [r3, #24]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 0208 	orr.w	r2, r2, #8
 80084a0:	619a      	str	r2, [r3, #24]
}
 80084a2:	bf00      	nop
 80084a4:	3798      	adds	r7, #152	; 0x98
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	08007ef7 	.word	0x08007ef7

080084b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b0a8      	sub	sp, #160	; 0xa0
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69db      	ldr	r3, [r3, #28]
 80084c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e6:	2b22      	cmp	r3, #34	; 0x22
 80084e8:	f040 8153 	bne.w	8008792 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084f6:	e0fa      	b.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800850a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800850e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008512:	4013      	ands	r3, r2
 8008514:	b29a      	uxth	r2, r3
 8008516:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800851a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	1c9a      	adds	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008542:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	2b00      	cmp	r3, #0
 800854c:	d053      	beq.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800854e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d011      	beq.n	800857e <UART_RxISR_16BIT_FIFOEN+0xce>
 800855a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800855e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2201      	movs	r2, #1
 800856c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008574:	f043 0201 	orr.w	r2, r3, #1
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d011      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800858a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2202      	movs	r2, #2
 800859c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a4:	f043 0204 	orr.w	r2, r3, #4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085b2:	f003 0304 	and.w	r3, r3, #4
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d011      	beq.n	80085de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80085ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00b      	beq.n	80085de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2204      	movs	r2, #4
 80085cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d4:	f043 0202 	orr.w	r2, r3, #2
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7f8 fdc5 	bl	8001178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d175      	bne.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800860a:	e853 3f00 	ldrex	r3, [r3]
 800860e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008612:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008626:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008628:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800862a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800862c:	e841 2300 	strex	r3, r2, [r1]
 8008630:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1e4      	bne.n	8008602 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3308      	adds	r3, #8
 800863e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	e853 3f00 	ldrex	r3, [r3]
 8008646:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008660:	65ba      	str	r2, [r7, #88]	; 0x58
 8008662:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800866e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e1      	bne.n	8008638 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008686:	2b01      	cmp	r3, #1
 8008688:	d12e      	bne.n	80086e8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800869e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a0:	f023 0310 	bic.w	r3, r3, #16
 80086a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80086ae:	647b      	str	r3, [r7, #68]	; 0x44
 80086b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d103      	bne.n	80086d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2210      	movs	r2, #16
 80086d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80086de:	4619      	mov	r1, r3
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7fe fd79 	bl	80071d8 <HAL_UARTEx_RxEventCallback>
 80086e6:	e002      	b.n	80086ee <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7f8 fd33 	bl	8001154 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d006      	beq.n	8008704 <UART_RxISR_16BIT_FIFOEN+0x254>
 80086f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f47f aefa 	bne.w	80084f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800870a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800870e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008712:	2b00      	cmp	r3, #0
 8008714:	d045      	beq.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800871c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008720:	429a      	cmp	r2, r3
 8008722:	d23e      	bcs.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	623b      	str	r3, [r7, #32]
   return(result);
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800873a:	677b      	str	r3, [r7, #116]	; 0x74
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008744:	633a      	str	r2, [r7, #48]	; 0x30
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a14      	ldr	r2, [pc, #80]	; (80087ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800875c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	60fb      	str	r3, [r7, #12]
   return(result);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f043 0320 	orr.w	r3, r3, #32
 8008772:	673b      	str	r3, [r7, #112]	; 0x70
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	461a      	mov	r2, r3
 800877a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69b9      	ldr	r1, [r7, #24]
 8008782:	69fa      	ldr	r2, [r7, #28]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	617b      	str	r3, [r7, #20]
   return(result);
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e6      	bne.n	800875e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008790:	e007      	b.n	80087a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0208 	orr.w	r2, r2, #8
 80087a0:	619a      	str	r2, [r3, #24]
}
 80087a2:	bf00      	nop
 80087a4:	37a0      	adds	r7, #160	; 0xa0
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	08008057 	.word	0x08008057

080087b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d101      	bne.n	8008802 <HAL_UARTEx_EnableFifoMode+0x16>
 80087fe:	2302      	movs	r3, #2
 8008800:	e02b      	b.n	800885a <HAL_UARTEx_EnableFifoMode+0x6e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2224      	movs	r2, #36	; 0x24
 800880e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0201 	bic.w	r2, r2, #1
 8008828:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008830:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008838:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f8c2 	bl	80089cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2220      	movs	r2, #32
 800884c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008862:	b480      	push	{r7}
 8008864:	b085      	sub	sp, #20
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UARTEx_DisableFifoMode+0x16>
 8008874:	2302      	movs	r3, #2
 8008876:	e027      	b.n	80088c8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	; 0x24
 8008884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0201 	bic.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80088a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e02d      	b.n	8008948 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2224      	movs	r2, #36	; 0x24
 80088f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0201 	bic.w	r2, r2, #1
 8008912:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f84f 	bl	80089cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008964:	2302      	movs	r3, #2
 8008966:	e02d      	b.n	80089c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2224      	movs	r2, #36	; 0x24
 8008974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0201 	bic.w	r2, r2, #1
 800898e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	683a      	ldr	r2, [r7, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f811 	bl	80089cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3710      	adds	r7, #16
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d108      	bne.n	80089ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089ec:	e031      	b.n	8008a52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089ee:	2308      	movs	r3, #8
 80089f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089f2:	2308      	movs	r3, #8
 80089f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	0e5b      	lsrs	r3, r3, #25
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	f003 0307 	and.w	r3, r3, #7
 8008a04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	0f5b      	lsrs	r3, r3, #29
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	f003 0307 	and.w	r3, r3, #7
 8008a14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a16:	7bbb      	ldrb	r3, [r7, #14]
 8008a18:	7b3a      	ldrb	r2, [r7, #12]
 8008a1a:	4911      	ldr	r1, [pc, #68]	; (8008a60 <UARTEx_SetNbDataToProcess+0x94>)
 8008a1c:	5c8a      	ldrb	r2, [r1, r2]
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a22:	7b3a      	ldrb	r2, [r7, #12]
 8008a24:	490f      	ldr	r1, [pc, #60]	; (8008a64 <UARTEx_SetNbDataToProcess+0x98>)
 8008a26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a2c:	b29a      	uxth	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	7b7a      	ldrb	r2, [r7, #13]
 8008a38:	4909      	ldr	r1, [pc, #36]	; (8008a60 <UARTEx_SetNbDataToProcess+0x94>)
 8008a3a:	5c8a      	ldrb	r2, [r1, r2]
 8008a3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a40:	7b7a      	ldrb	r2, [r7, #13]
 8008a42:	4908      	ldr	r1, [pc, #32]	; (8008a64 <UARTEx_SetNbDataToProcess+0x98>)
 8008a44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a52:	bf00      	nop
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	08009cf4 	.word	0x08009cf4
 8008a64:	08009cfc 	.word	0x08009cfc

08008a68 <std>:
 8008a68:	2300      	movs	r3, #0
 8008a6a:	b510      	push	{r4, lr}
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a76:	6083      	str	r3, [r0, #8]
 8008a78:	8181      	strh	r1, [r0, #12]
 8008a7a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a7c:	81c2      	strh	r2, [r0, #14]
 8008a7e:	6183      	str	r3, [r0, #24]
 8008a80:	4619      	mov	r1, r3
 8008a82:	2208      	movs	r2, #8
 8008a84:	305c      	adds	r0, #92	; 0x5c
 8008a86:	f000 fa9b 	bl	8008fc0 <memset>
 8008a8a:	4b05      	ldr	r3, [pc, #20]	; (8008aa0 <std+0x38>)
 8008a8c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <std+0x3c>)
 8008a90:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <std+0x40>)
 8008a94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a96:	4b05      	ldr	r3, [pc, #20]	; (8008aac <std+0x44>)
 8008a98:	6224      	str	r4, [r4, #32]
 8008a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a9c:	bd10      	pop	{r4, pc}
 8008a9e:	bf00      	nop
 8008aa0:	08008e11 	.word	0x08008e11
 8008aa4:	08008e33 	.word	0x08008e33
 8008aa8:	08008e6b 	.word	0x08008e6b
 8008aac:	08008e8f 	.word	0x08008e8f

08008ab0 <stdio_exit_handler>:
 8008ab0:	4a02      	ldr	r2, [pc, #8]	; (8008abc <stdio_exit_handler+0xc>)
 8008ab2:	4903      	ldr	r1, [pc, #12]	; (8008ac0 <stdio_exit_handler+0x10>)
 8008ab4:	4803      	ldr	r0, [pc, #12]	; (8008ac4 <stdio_exit_handler+0x14>)
 8008ab6:	f000 b869 	b.w	8008b8c <_fwalk_sglue>
 8008aba:	bf00      	nop
 8008abc:	20000028 	.word	0x20000028
 8008ac0:	08009969 	.word	0x08009969
 8008ac4:	20000034 	.word	0x20000034

08008ac8 <cleanup_stdio>:
 8008ac8:	6841      	ldr	r1, [r0, #4]
 8008aca:	4b0c      	ldr	r3, [pc, #48]	; (8008afc <cleanup_stdio+0x34>)
 8008acc:	4299      	cmp	r1, r3
 8008ace:	b510      	push	{r4, lr}
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	d001      	beq.n	8008ad8 <cleanup_stdio+0x10>
 8008ad4:	f000 ff48 	bl	8009968 <_fflush_r>
 8008ad8:	68a1      	ldr	r1, [r4, #8]
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <cleanup_stdio+0x38>)
 8008adc:	4299      	cmp	r1, r3
 8008ade:	d002      	beq.n	8008ae6 <cleanup_stdio+0x1e>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 ff41 	bl	8009968 <_fflush_r>
 8008ae6:	68e1      	ldr	r1, [r4, #12]
 8008ae8:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <cleanup_stdio+0x3c>)
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d004      	beq.n	8008af8 <cleanup_stdio+0x30>
 8008aee:	4620      	mov	r0, r4
 8008af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008af4:	f000 bf38 	b.w	8009968 <_fflush_r>
 8008af8:	bd10      	pop	{r4, pc}
 8008afa:	bf00      	nop
 8008afc:	200004c8 	.word	0x200004c8
 8008b00:	20000530 	.word	0x20000530
 8008b04:	20000598 	.word	0x20000598

08008b08 <global_stdio_init.part.0>:
 8008b08:	b510      	push	{r4, lr}
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <global_stdio_init.part.0+0x30>)
 8008b0c:	4c0b      	ldr	r4, [pc, #44]	; (8008b3c <global_stdio_init.part.0+0x34>)
 8008b0e:	4a0c      	ldr	r2, [pc, #48]	; (8008b40 <global_stdio_init.part.0+0x38>)
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	4620      	mov	r0, r4
 8008b14:	2200      	movs	r2, #0
 8008b16:	2104      	movs	r1, #4
 8008b18:	f7ff ffa6 	bl	8008a68 <std>
 8008b1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008b20:	2201      	movs	r2, #1
 8008b22:	2109      	movs	r1, #9
 8008b24:	f7ff ffa0 	bl	8008a68 <std>
 8008b28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b32:	2112      	movs	r1, #18
 8008b34:	f7ff bf98 	b.w	8008a68 <std>
 8008b38:	20000600 	.word	0x20000600
 8008b3c:	200004c8 	.word	0x200004c8
 8008b40:	08008ab1 	.word	0x08008ab1

08008b44 <__sfp_lock_acquire>:
 8008b44:	4801      	ldr	r0, [pc, #4]	; (8008b4c <__sfp_lock_acquire+0x8>)
 8008b46:	f000 bab3 	b.w	80090b0 <__retarget_lock_acquire_recursive>
 8008b4a:	bf00      	nop
 8008b4c:	20000609 	.word	0x20000609

08008b50 <__sfp_lock_release>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__sfp_lock_release+0x8>)
 8008b52:	f000 baae 	b.w	80090b2 <__retarget_lock_release_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000609 	.word	0x20000609

08008b5c <__sinit>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	4604      	mov	r4, r0
 8008b60:	f7ff fff0 	bl	8008b44 <__sfp_lock_acquire>
 8008b64:	6a23      	ldr	r3, [r4, #32]
 8008b66:	b11b      	cbz	r3, 8008b70 <__sinit+0x14>
 8008b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b6c:	f7ff bff0 	b.w	8008b50 <__sfp_lock_release>
 8008b70:	4b04      	ldr	r3, [pc, #16]	; (8008b84 <__sinit+0x28>)
 8008b72:	6223      	str	r3, [r4, #32]
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <__sinit+0x2c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1f5      	bne.n	8008b68 <__sinit+0xc>
 8008b7c:	f7ff ffc4 	bl	8008b08 <global_stdio_init.part.0>
 8008b80:	e7f2      	b.n	8008b68 <__sinit+0xc>
 8008b82:	bf00      	nop
 8008b84:	08008ac9 	.word	0x08008ac9
 8008b88:	20000600 	.word	0x20000600

08008b8c <_fwalk_sglue>:
 8008b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b90:	4607      	mov	r7, r0
 8008b92:	4688      	mov	r8, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	2600      	movs	r6, #0
 8008b98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b9c:	f1b9 0901 	subs.w	r9, r9, #1
 8008ba0:	d505      	bpl.n	8008bae <_fwalk_sglue+0x22>
 8008ba2:	6824      	ldr	r4, [r4, #0]
 8008ba4:	2c00      	cmp	r4, #0
 8008ba6:	d1f7      	bne.n	8008b98 <_fwalk_sglue+0xc>
 8008ba8:	4630      	mov	r0, r6
 8008baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bae:	89ab      	ldrh	r3, [r5, #12]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d907      	bls.n	8008bc4 <_fwalk_sglue+0x38>
 8008bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	d003      	beq.n	8008bc4 <_fwalk_sglue+0x38>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	47c0      	blx	r8
 8008bc2:	4306      	orrs	r6, r0
 8008bc4:	3568      	adds	r5, #104	; 0x68
 8008bc6:	e7e9      	b.n	8008b9c <_fwalk_sglue+0x10>

08008bc8 <iprintf>:
 8008bc8:	b40f      	push	{r0, r1, r2, r3}
 8008bca:	b507      	push	{r0, r1, r2, lr}
 8008bcc:	4906      	ldr	r1, [pc, #24]	; (8008be8 <iprintf+0x20>)
 8008bce:	ab04      	add	r3, sp, #16
 8008bd0:	6808      	ldr	r0, [r1, #0]
 8008bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bd6:	6881      	ldr	r1, [r0, #8]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	f000 fb95 	bl	8009308 <_vfiprintf_r>
 8008bde:	b003      	add	sp, #12
 8008be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008be4:	b004      	add	sp, #16
 8008be6:	4770      	bx	lr
 8008be8:	20000080 	.word	0x20000080

08008bec <putchar>:
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <putchar+0xc>)
 8008bee:	4601      	mov	r1, r0
 8008bf0:	6818      	ldr	r0, [r3, #0]
 8008bf2:	6882      	ldr	r2, [r0, #8]
 8008bf4:	f000 bf42 	b.w	8009a7c <_putc_r>
 8008bf8:	20000080 	.word	0x20000080

08008bfc <_puts_r>:
 8008bfc:	6a03      	ldr	r3, [r0, #32]
 8008bfe:	b570      	push	{r4, r5, r6, lr}
 8008c00:	6884      	ldr	r4, [r0, #8]
 8008c02:	4605      	mov	r5, r0
 8008c04:	460e      	mov	r6, r1
 8008c06:	b90b      	cbnz	r3, 8008c0c <_puts_r+0x10>
 8008c08:	f7ff ffa8 	bl	8008b5c <__sinit>
 8008c0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c0e:	07db      	lsls	r3, r3, #31
 8008c10:	d405      	bmi.n	8008c1e <_puts_r+0x22>
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	0598      	lsls	r0, r3, #22
 8008c16:	d402      	bmi.n	8008c1e <_puts_r+0x22>
 8008c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c1a:	f000 fa49 	bl	80090b0 <__retarget_lock_acquire_recursive>
 8008c1e:	89a3      	ldrh	r3, [r4, #12]
 8008c20:	0719      	lsls	r1, r3, #28
 8008c22:	d513      	bpl.n	8008c4c <_puts_r+0x50>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	b18b      	cbz	r3, 8008c4c <_puts_r+0x50>
 8008c28:	3e01      	subs	r6, #1
 8008c2a:	68a3      	ldr	r3, [r4, #8]
 8008c2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c30:	3b01      	subs	r3, #1
 8008c32:	60a3      	str	r3, [r4, #8]
 8008c34:	b9e9      	cbnz	r1, 8008c72 <_puts_r+0x76>
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	da2e      	bge.n	8008c98 <_puts_r+0x9c>
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	210a      	movs	r1, #10
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f929 	bl	8008e96 <__swbuf_r>
 8008c44:	3001      	adds	r0, #1
 8008c46:	d007      	beq.n	8008c58 <_puts_r+0x5c>
 8008c48:	250a      	movs	r5, #10
 8008c4a:	e007      	b.n	8008c5c <_puts_r+0x60>
 8008c4c:	4621      	mov	r1, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	f000 f95e 	bl	8008f10 <__swsetup_r>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d0e7      	beq.n	8008c28 <_puts_r+0x2c>
 8008c58:	f04f 35ff 	mov.w	r5, #4294967295
 8008c5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_puts_r+0x72>
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	059b      	lsls	r3, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_puts_r+0x72>
 8008c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c6a:	f000 fa22 	bl	80090b2 <__retarget_lock_release_recursive>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	bd70      	pop	{r4, r5, r6, pc}
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da04      	bge.n	8008c80 <_puts_r+0x84>
 8008c76:	69a2      	ldr	r2, [r4, #24]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	dc06      	bgt.n	8008c8a <_puts_r+0x8e>
 8008c7c:	290a      	cmp	r1, #10
 8008c7e:	d004      	beq.n	8008c8a <_puts_r+0x8e>
 8008c80:	6823      	ldr	r3, [r4, #0]
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	6022      	str	r2, [r4, #0]
 8008c86:	7019      	strb	r1, [r3, #0]
 8008c88:	e7cf      	b.n	8008c2a <_puts_r+0x2e>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f000 f902 	bl	8008e96 <__swbuf_r>
 8008c92:	3001      	adds	r0, #1
 8008c94:	d1c9      	bne.n	8008c2a <_puts_r+0x2e>
 8008c96:	e7df      	b.n	8008c58 <_puts_r+0x5c>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	250a      	movs	r5, #10
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	6022      	str	r2, [r4, #0]
 8008ca0:	701d      	strb	r5, [r3, #0]
 8008ca2:	e7db      	b.n	8008c5c <_puts_r+0x60>

08008ca4 <puts>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	; (8008cb0 <puts+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f7ff bfa7 	b.w	8008bfc <_puts_r>
 8008cae:	bf00      	nop
 8008cb0:	20000080 	.word	0x20000080

08008cb4 <setvbuf>:
 8008cb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	461d      	mov	r5, r3
 8008cba:	4b54      	ldr	r3, [pc, #336]	; (8008e0c <setvbuf+0x158>)
 8008cbc:	681f      	ldr	r7, [r3, #0]
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460e      	mov	r6, r1
 8008cc2:	4690      	mov	r8, r2
 8008cc4:	b127      	cbz	r7, 8008cd0 <setvbuf+0x1c>
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	b913      	cbnz	r3, 8008cd0 <setvbuf+0x1c>
 8008cca:	4638      	mov	r0, r7
 8008ccc:	f7ff ff46 	bl	8008b5c <__sinit>
 8008cd0:	f1b8 0f02 	cmp.w	r8, #2
 8008cd4:	d006      	beq.n	8008ce4 <setvbuf+0x30>
 8008cd6:	f1b8 0f01 	cmp.w	r8, #1
 8008cda:	f200 8094 	bhi.w	8008e06 <setvbuf+0x152>
 8008cde:	2d00      	cmp	r5, #0
 8008ce0:	f2c0 8091 	blt.w	8008e06 <setvbuf+0x152>
 8008ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ce6:	07da      	lsls	r2, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <setvbuf+0x42>
 8008cea:	89a3      	ldrh	r3, [r4, #12]
 8008cec:	059b      	lsls	r3, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <setvbuf+0x42>
 8008cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cf2:	f000 f9dd 	bl	80090b0 <__retarget_lock_acquire_recursive>
 8008cf6:	4621      	mov	r1, r4
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f000 fe35 	bl	8009968 <_fflush_r>
 8008cfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d00:	b141      	cbz	r1, 8008d14 <setvbuf+0x60>
 8008d02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d06:	4299      	cmp	r1, r3
 8008d08:	d002      	beq.n	8008d10 <setvbuf+0x5c>
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	f000 f9d2 	bl	80090b4 <_free_r>
 8008d10:	2300      	movs	r3, #0
 8008d12:	6363      	str	r3, [r4, #52]	; 0x34
 8008d14:	2300      	movs	r3, #0
 8008d16:	61a3      	str	r3, [r4, #24]
 8008d18:	6063      	str	r3, [r4, #4]
 8008d1a:	89a3      	ldrh	r3, [r4, #12]
 8008d1c:	0618      	lsls	r0, r3, #24
 8008d1e:	d503      	bpl.n	8008d28 <setvbuf+0x74>
 8008d20:	6921      	ldr	r1, [r4, #16]
 8008d22:	4638      	mov	r0, r7
 8008d24:	f000 f9c6 	bl	80090b4 <_free_r>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	f1b8 0f02 	cmp.w	r8, #2
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	d05f      	beq.n	8008dfa <setvbuf+0x146>
 8008d3a:	ab01      	add	r3, sp, #4
 8008d3c:	466a      	mov	r2, sp
 8008d3e:	4621      	mov	r1, r4
 8008d40:	4638      	mov	r0, r7
 8008d42:	f000 fe39 	bl	80099b8 <__swhatbuf_r>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	4318      	orrs	r0, r3
 8008d4a:	81a0      	strh	r0, [r4, #12]
 8008d4c:	bb2d      	cbnz	r5, 8008d9a <setvbuf+0xe6>
 8008d4e:	9d00      	ldr	r5, [sp, #0]
 8008d50:	4628      	mov	r0, r5
 8008d52:	f000 f9fb 	bl	800914c <malloc>
 8008d56:	4606      	mov	r6, r0
 8008d58:	2800      	cmp	r0, #0
 8008d5a:	d150      	bne.n	8008dfe <setvbuf+0x14a>
 8008d5c:	f8dd 9000 	ldr.w	r9, [sp]
 8008d60:	45a9      	cmp	r9, r5
 8008d62:	d13e      	bne.n	8008de2 <setvbuf+0x12e>
 8008d64:	f04f 35ff 	mov.w	r5, #4294967295
 8008d68:	2200      	movs	r2, #0
 8008d6a:	60a2      	str	r2, [r4, #8]
 8008d6c:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	6122      	str	r2, [r4, #16]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d7a:	6162      	str	r2, [r4, #20]
 8008d7c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d7e:	f043 0302 	orr.w	r3, r3, #2
 8008d82:	07d1      	lsls	r1, r2, #31
 8008d84:	81a3      	strh	r3, [r4, #12]
 8008d86:	d404      	bmi.n	8008d92 <setvbuf+0xde>
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d402      	bmi.n	8008d92 <setvbuf+0xde>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8e:	f000 f990 	bl	80090b2 <__retarget_lock_release_recursive>
 8008d92:	4628      	mov	r0, r5
 8008d94:	b003      	add	sp, #12
 8008d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	d0d8      	beq.n	8008d50 <setvbuf+0x9c>
 8008d9e:	6a3b      	ldr	r3, [r7, #32]
 8008da0:	b913      	cbnz	r3, 8008da8 <setvbuf+0xf4>
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff feda 	bl	8008b5c <__sinit>
 8008da8:	f1b8 0f01 	cmp.w	r8, #1
 8008dac:	bf08      	it	eq
 8008dae:	89a3      	ldrheq	r3, [r4, #12]
 8008db0:	6026      	str	r6, [r4, #0]
 8008db2:	bf04      	itt	eq
 8008db4:	f043 0301 	orreq.w	r3, r3, #1
 8008db8:	81a3      	strheq	r3, [r4, #12]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f013 0208 	ands.w	r2, r3, #8
 8008dc0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008dc4:	d01d      	beq.n	8008e02 <setvbuf+0x14e>
 8008dc6:	07da      	lsls	r2, r3, #31
 8008dc8:	bf41      	itttt	mi
 8008dca:	2200      	movmi	r2, #0
 8008dcc:	426d      	negmi	r5, r5
 8008dce:	60a2      	strmi	r2, [r4, #8]
 8008dd0:	61a5      	strmi	r5, [r4, #24]
 8008dd2:	bf58      	it	pl
 8008dd4:	60a5      	strpl	r5, [r4, #8]
 8008dd6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008dd8:	f015 0501 	ands.w	r5, r5, #1
 8008ddc:	d0d4      	beq.n	8008d88 <setvbuf+0xd4>
 8008dde:	2500      	movs	r5, #0
 8008de0:	e7d7      	b.n	8008d92 <setvbuf+0xde>
 8008de2:	4648      	mov	r0, r9
 8008de4:	f000 f9b2 	bl	800914c <malloc>
 8008de8:	4606      	mov	r6, r0
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d0ba      	beq.n	8008d64 <setvbuf+0xb0>
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	464d      	mov	r5, r9
 8008df8:	e7d1      	b.n	8008d9e <setvbuf+0xea>
 8008dfa:	2500      	movs	r5, #0
 8008dfc:	e7b4      	b.n	8008d68 <setvbuf+0xb4>
 8008dfe:	46a9      	mov	r9, r5
 8008e00:	e7f5      	b.n	8008dee <setvbuf+0x13a>
 8008e02:	60a2      	str	r2, [r4, #8]
 8008e04:	e7e7      	b.n	8008dd6 <setvbuf+0x122>
 8008e06:	f04f 35ff 	mov.w	r5, #4294967295
 8008e0a:	e7c2      	b.n	8008d92 <setvbuf+0xde>
 8008e0c:	20000080 	.word	0x20000080

08008e10 <__sread>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	460c      	mov	r4, r1
 8008e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e18:	f000 f8fc 	bl	8009014 <_read_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	bfab      	itete	ge
 8008e20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008e22:	89a3      	ldrhlt	r3, [r4, #12]
 8008e24:	181b      	addge	r3, r3, r0
 8008e26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008e2a:	bfac      	ite	ge
 8008e2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008e2e:	81a3      	strhlt	r3, [r4, #12]
 8008e30:	bd10      	pop	{r4, pc}

08008e32 <__swrite>:
 8008e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e36:	461f      	mov	r7, r3
 8008e38:	898b      	ldrh	r3, [r1, #12]
 8008e3a:	05db      	lsls	r3, r3, #23
 8008e3c:	4605      	mov	r5, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4616      	mov	r6, r2
 8008e42:	d505      	bpl.n	8008e50 <__swrite+0x1e>
 8008e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e48:	2302      	movs	r3, #2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f000 f8d0 	bl	8008ff0 <_lseek_r>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4628      	mov	r0, r5
 8008e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e66:	f000 b8e7 	b.w	8009038 <_write_r>

08008e6a <__sseek>:
 8008e6a:	b510      	push	{r4, lr}
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e72:	f000 f8bd 	bl	8008ff0 <_lseek_r>
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	bf15      	itete	ne
 8008e7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e86:	81a3      	strheq	r3, [r4, #12]
 8008e88:	bf18      	it	ne
 8008e8a:	81a3      	strhne	r3, [r4, #12]
 8008e8c:	bd10      	pop	{r4, pc}

08008e8e <__sclose>:
 8008e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e92:	f000 b89d 	b.w	8008fd0 <_close_r>

08008e96 <__swbuf_r>:
 8008e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e98:	460e      	mov	r6, r1
 8008e9a:	4614      	mov	r4, r2
 8008e9c:	4605      	mov	r5, r0
 8008e9e:	b118      	cbz	r0, 8008ea8 <__swbuf_r+0x12>
 8008ea0:	6a03      	ldr	r3, [r0, #32]
 8008ea2:	b90b      	cbnz	r3, 8008ea8 <__swbuf_r+0x12>
 8008ea4:	f7ff fe5a 	bl	8008b5c <__sinit>
 8008ea8:	69a3      	ldr	r3, [r4, #24]
 8008eaa:	60a3      	str	r3, [r4, #8]
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	071a      	lsls	r2, r3, #28
 8008eb0:	d525      	bpl.n	8008efe <__swbuf_r+0x68>
 8008eb2:	6923      	ldr	r3, [r4, #16]
 8008eb4:	b31b      	cbz	r3, 8008efe <__swbuf_r+0x68>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	1a98      	subs	r0, r3, r2
 8008ebc:	6963      	ldr	r3, [r4, #20]
 8008ebe:	b2f6      	uxtb	r6, r6
 8008ec0:	4283      	cmp	r3, r0
 8008ec2:	4637      	mov	r7, r6
 8008ec4:	dc04      	bgt.n	8008ed0 <__swbuf_r+0x3a>
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f000 fd4d 	bl	8009968 <_fflush_r>
 8008ece:	b9e0      	cbnz	r0, 8008f0a <__swbuf_r+0x74>
 8008ed0:	68a3      	ldr	r3, [r4, #8]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	6022      	str	r2, [r4, #0]
 8008edc:	701e      	strb	r6, [r3, #0]
 8008ede:	6962      	ldr	r2, [r4, #20]
 8008ee0:	1c43      	adds	r3, r0, #1
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d004      	beq.n	8008ef0 <__swbuf_r+0x5a>
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	07db      	lsls	r3, r3, #31
 8008eea:	d506      	bpl.n	8008efa <__swbuf_r+0x64>
 8008eec:	2e0a      	cmp	r6, #10
 8008eee:	d104      	bne.n	8008efa <__swbuf_r+0x64>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 fd38 	bl	8009968 <_fflush_r>
 8008ef8:	b938      	cbnz	r0, 8008f0a <__swbuf_r+0x74>
 8008efa:	4638      	mov	r0, r7
 8008efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efe:	4621      	mov	r1, r4
 8008f00:	4628      	mov	r0, r5
 8008f02:	f000 f805 	bl	8008f10 <__swsetup_r>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d0d5      	beq.n	8008eb6 <__swbuf_r+0x20>
 8008f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f0e:	e7f4      	b.n	8008efa <__swbuf_r+0x64>

08008f10 <__swsetup_r>:
 8008f10:	b538      	push	{r3, r4, r5, lr}
 8008f12:	4b2a      	ldr	r3, [pc, #168]	; (8008fbc <__swsetup_r+0xac>)
 8008f14:	4605      	mov	r5, r0
 8008f16:	6818      	ldr	r0, [r3, #0]
 8008f18:	460c      	mov	r4, r1
 8008f1a:	b118      	cbz	r0, 8008f24 <__swsetup_r+0x14>
 8008f1c:	6a03      	ldr	r3, [r0, #32]
 8008f1e:	b90b      	cbnz	r3, 8008f24 <__swsetup_r+0x14>
 8008f20:	f7ff fe1c 	bl	8008b5c <__sinit>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f2a:	0718      	lsls	r0, r3, #28
 8008f2c:	d422      	bmi.n	8008f74 <__swsetup_r+0x64>
 8008f2e:	06d9      	lsls	r1, r3, #27
 8008f30:	d407      	bmi.n	8008f42 <__swsetup_r+0x32>
 8008f32:	2309      	movs	r3, #9
 8008f34:	602b      	str	r3, [r5, #0]
 8008f36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f3a:	81a3      	strh	r3, [r4, #12]
 8008f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f40:	e034      	b.n	8008fac <__swsetup_r+0x9c>
 8008f42:	0758      	lsls	r0, r3, #29
 8008f44:	d512      	bpl.n	8008f6c <__swsetup_r+0x5c>
 8008f46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f48:	b141      	cbz	r1, 8008f5c <__swsetup_r+0x4c>
 8008f4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f4e:	4299      	cmp	r1, r3
 8008f50:	d002      	beq.n	8008f58 <__swsetup_r+0x48>
 8008f52:	4628      	mov	r0, r5
 8008f54:	f000 f8ae 	bl	80090b4 <_free_r>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6363      	str	r3, [r4, #52]	; 0x34
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f62:	81a3      	strh	r3, [r4, #12]
 8008f64:	2300      	movs	r3, #0
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	6023      	str	r3, [r4, #0]
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	f043 0308 	orr.w	r3, r3, #8
 8008f72:	81a3      	strh	r3, [r4, #12]
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	b94b      	cbnz	r3, 8008f8c <__swsetup_r+0x7c>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f82:	d003      	beq.n	8008f8c <__swsetup_r+0x7c>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 fd3c 	bl	8009a04 <__smakebuf_r>
 8008f8c:	89a0      	ldrh	r0, [r4, #12]
 8008f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f92:	f010 0301 	ands.w	r3, r0, #1
 8008f96:	d00a      	beq.n	8008fae <__swsetup_r+0x9e>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60a3      	str	r3, [r4, #8]
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	425b      	negs	r3, r3
 8008fa0:	61a3      	str	r3, [r4, #24]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	b943      	cbnz	r3, 8008fb8 <__swsetup_r+0xa8>
 8008fa6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008faa:	d1c4      	bne.n	8008f36 <__swsetup_r+0x26>
 8008fac:	bd38      	pop	{r3, r4, r5, pc}
 8008fae:	0781      	lsls	r1, r0, #30
 8008fb0:	bf58      	it	pl
 8008fb2:	6963      	ldrpl	r3, [r4, #20]
 8008fb4:	60a3      	str	r3, [r4, #8]
 8008fb6:	e7f4      	b.n	8008fa2 <__swsetup_r+0x92>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e7f7      	b.n	8008fac <__swsetup_r+0x9c>
 8008fbc:	20000080 	.word	0x20000080

08008fc0 <memset>:
 8008fc0:	4402      	add	r2, r0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d100      	bne.n	8008fca <memset+0xa>
 8008fc8:	4770      	bx	lr
 8008fca:	f803 1b01 	strb.w	r1, [r3], #1
 8008fce:	e7f9      	b.n	8008fc4 <memset+0x4>

08008fd0 <_close_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	; (8008fec <_close_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7f8 f940 	bl	8001260 <_close>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_close_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_close_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000604 	.word	0x20000604

08008ff0 <_lseek_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	; (8009010 <_lseek_r+0x20>)
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f7f8 f945 	bl	800128e <_lseek>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_lseek_r+0x1e>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_lseek_r+0x1e>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20000604 	.word	0x20000604

08009014 <_read_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4d07      	ldr	r5, [pc, #28]	; (8009034 <_read_r+0x20>)
 8009018:	4604      	mov	r4, r0
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	2200      	movs	r2, #0
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f7f8 f944 	bl	80012b0 <_read>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_read_r+0x1e>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	b103      	cbz	r3, 8009032 <_read_r+0x1e>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	20000604 	.word	0x20000604

08009038 <_write_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d07      	ldr	r5, [pc, #28]	; (8009058 <_write_r+0x20>)
 800903c:	4604      	mov	r4, r0
 800903e:	4608      	mov	r0, r1
 8009040:	4611      	mov	r1, r2
 8009042:	2200      	movs	r2, #0
 8009044:	602a      	str	r2, [r5, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	f7f8 f8de 	bl	8001208 <_write>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_write_r+0x1e>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_write_r+0x1e>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000604 	.word	0x20000604

0800905c <__errno>:
 800905c:	4b01      	ldr	r3, [pc, #4]	; (8009064 <__errno+0x8>)
 800905e:	6818      	ldr	r0, [r3, #0]
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	20000080 	.word	0x20000080

08009068 <__libc_init_array>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	4d0d      	ldr	r5, [pc, #52]	; (80090a0 <__libc_init_array+0x38>)
 800906c:	4c0d      	ldr	r4, [pc, #52]	; (80090a4 <__libc_init_array+0x3c>)
 800906e:	1b64      	subs	r4, r4, r5
 8009070:	10a4      	asrs	r4, r4, #2
 8009072:	2600      	movs	r6, #0
 8009074:	42a6      	cmp	r6, r4
 8009076:	d109      	bne.n	800908c <__libc_init_array+0x24>
 8009078:	4d0b      	ldr	r5, [pc, #44]	; (80090a8 <__libc_init_array+0x40>)
 800907a:	4c0c      	ldr	r4, [pc, #48]	; (80090ac <__libc_init_array+0x44>)
 800907c:	f000 fd64 	bl	8009b48 <_init>
 8009080:	1b64      	subs	r4, r4, r5
 8009082:	10a4      	asrs	r4, r4, #2
 8009084:	2600      	movs	r6, #0
 8009086:	42a6      	cmp	r6, r4
 8009088:	d105      	bne.n	8009096 <__libc_init_array+0x2e>
 800908a:	bd70      	pop	{r4, r5, r6, pc}
 800908c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009090:	4798      	blx	r3
 8009092:	3601      	adds	r6, #1
 8009094:	e7ee      	b.n	8009074 <__libc_init_array+0xc>
 8009096:	f855 3b04 	ldr.w	r3, [r5], #4
 800909a:	4798      	blx	r3
 800909c:	3601      	adds	r6, #1
 800909e:	e7f2      	b.n	8009086 <__libc_init_array+0x1e>
 80090a0:	08009d40 	.word	0x08009d40
 80090a4:	08009d40 	.word	0x08009d40
 80090a8:	08009d40 	.word	0x08009d40
 80090ac:	08009d44 	.word	0x08009d44

080090b0 <__retarget_lock_acquire_recursive>:
 80090b0:	4770      	bx	lr

080090b2 <__retarget_lock_release_recursive>:
 80090b2:	4770      	bx	lr

080090b4 <_free_r>:
 80090b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090b6:	2900      	cmp	r1, #0
 80090b8:	d044      	beq.n	8009144 <_free_r+0x90>
 80090ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090be:	9001      	str	r0, [sp, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f1a1 0404 	sub.w	r4, r1, #4
 80090c6:	bfb8      	it	lt
 80090c8:	18e4      	addlt	r4, r4, r3
 80090ca:	f000 f8e7 	bl	800929c <__malloc_lock>
 80090ce:	4a1e      	ldr	r2, [pc, #120]	; (8009148 <_free_r+0x94>)
 80090d0:	9801      	ldr	r0, [sp, #4]
 80090d2:	6813      	ldr	r3, [r2, #0]
 80090d4:	b933      	cbnz	r3, 80090e4 <_free_r+0x30>
 80090d6:	6063      	str	r3, [r4, #4]
 80090d8:	6014      	str	r4, [r2, #0]
 80090da:	b003      	add	sp, #12
 80090dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090e0:	f000 b8e2 	b.w	80092a8 <__malloc_unlock>
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d908      	bls.n	80090fa <_free_r+0x46>
 80090e8:	6825      	ldr	r5, [r4, #0]
 80090ea:	1961      	adds	r1, r4, r5
 80090ec:	428b      	cmp	r3, r1
 80090ee:	bf01      	itttt	eq
 80090f0:	6819      	ldreq	r1, [r3, #0]
 80090f2:	685b      	ldreq	r3, [r3, #4]
 80090f4:	1949      	addeq	r1, r1, r5
 80090f6:	6021      	streq	r1, [r4, #0]
 80090f8:	e7ed      	b.n	80090d6 <_free_r+0x22>
 80090fa:	461a      	mov	r2, r3
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	b10b      	cbz	r3, 8009104 <_free_r+0x50>
 8009100:	42a3      	cmp	r3, r4
 8009102:	d9fa      	bls.n	80090fa <_free_r+0x46>
 8009104:	6811      	ldr	r1, [r2, #0]
 8009106:	1855      	adds	r5, r2, r1
 8009108:	42a5      	cmp	r5, r4
 800910a:	d10b      	bne.n	8009124 <_free_r+0x70>
 800910c:	6824      	ldr	r4, [r4, #0]
 800910e:	4421      	add	r1, r4
 8009110:	1854      	adds	r4, r2, r1
 8009112:	42a3      	cmp	r3, r4
 8009114:	6011      	str	r1, [r2, #0]
 8009116:	d1e0      	bne.n	80090da <_free_r+0x26>
 8009118:	681c      	ldr	r4, [r3, #0]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	6053      	str	r3, [r2, #4]
 800911e:	440c      	add	r4, r1
 8009120:	6014      	str	r4, [r2, #0]
 8009122:	e7da      	b.n	80090da <_free_r+0x26>
 8009124:	d902      	bls.n	800912c <_free_r+0x78>
 8009126:	230c      	movs	r3, #12
 8009128:	6003      	str	r3, [r0, #0]
 800912a:	e7d6      	b.n	80090da <_free_r+0x26>
 800912c:	6825      	ldr	r5, [r4, #0]
 800912e:	1961      	adds	r1, r4, r5
 8009130:	428b      	cmp	r3, r1
 8009132:	bf04      	itt	eq
 8009134:	6819      	ldreq	r1, [r3, #0]
 8009136:	685b      	ldreq	r3, [r3, #4]
 8009138:	6063      	str	r3, [r4, #4]
 800913a:	bf04      	itt	eq
 800913c:	1949      	addeq	r1, r1, r5
 800913e:	6021      	streq	r1, [r4, #0]
 8009140:	6054      	str	r4, [r2, #4]
 8009142:	e7ca      	b.n	80090da <_free_r+0x26>
 8009144:	b003      	add	sp, #12
 8009146:	bd30      	pop	{r4, r5, pc}
 8009148:	2000060c 	.word	0x2000060c

0800914c <malloc>:
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <malloc+0xc>)
 800914e:	4601      	mov	r1, r0
 8009150:	6818      	ldr	r0, [r3, #0]
 8009152:	f000 b823 	b.w	800919c <_malloc_r>
 8009156:	bf00      	nop
 8009158:	20000080 	.word	0x20000080

0800915c <sbrk_aligned>:
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	4e0e      	ldr	r6, [pc, #56]	; (8009198 <sbrk_aligned+0x3c>)
 8009160:	460c      	mov	r4, r1
 8009162:	6831      	ldr	r1, [r6, #0]
 8009164:	4605      	mov	r5, r0
 8009166:	b911      	cbnz	r1, 800916e <sbrk_aligned+0x12>
 8009168:	f000 fcde 	bl	8009b28 <_sbrk_r>
 800916c:	6030      	str	r0, [r6, #0]
 800916e:	4621      	mov	r1, r4
 8009170:	4628      	mov	r0, r5
 8009172:	f000 fcd9 	bl	8009b28 <_sbrk_r>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d00a      	beq.n	8009190 <sbrk_aligned+0x34>
 800917a:	1cc4      	adds	r4, r0, #3
 800917c:	f024 0403 	bic.w	r4, r4, #3
 8009180:	42a0      	cmp	r0, r4
 8009182:	d007      	beq.n	8009194 <sbrk_aligned+0x38>
 8009184:	1a21      	subs	r1, r4, r0
 8009186:	4628      	mov	r0, r5
 8009188:	f000 fcce 	bl	8009b28 <_sbrk_r>
 800918c:	3001      	adds	r0, #1
 800918e:	d101      	bne.n	8009194 <sbrk_aligned+0x38>
 8009190:	f04f 34ff 	mov.w	r4, #4294967295
 8009194:	4620      	mov	r0, r4
 8009196:	bd70      	pop	{r4, r5, r6, pc}
 8009198:	20000610 	.word	0x20000610

0800919c <_malloc_r>:
 800919c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091a0:	1ccd      	adds	r5, r1, #3
 80091a2:	f025 0503 	bic.w	r5, r5, #3
 80091a6:	3508      	adds	r5, #8
 80091a8:	2d0c      	cmp	r5, #12
 80091aa:	bf38      	it	cc
 80091ac:	250c      	movcc	r5, #12
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	4607      	mov	r7, r0
 80091b2:	db01      	blt.n	80091b8 <_malloc_r+0x1c>
 80091b4:	42a9      	cmp	r1, r5
 80091b6:	d905      	bls.n	80091c4 <_malloc_r+0x28>
 80091b8:	230c      	movs	r3, #12
 80091ba:	603b      	str	r3, [r7, #0]
 80091bc:	2600      	movs	r6, #0
 80091be:	4630      	mov	r0, r6
 80091c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009298 <_malloc_r+0xfc>
 80091c8:	f000 f868 	bl	800929c <__malloc_lock>
 80091cc:	f8d8 3000 	ldr.w	r3, [r8]
 80091d0:	461c      	mov	r4, r3
 80091d2:	bb5c      	cbnz	r4, 800922c <_malloc_r+0x90>
 80091d4:	4629      	mov	r1, r5
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff ffc0 	bl	800915c <sbrk_aligned>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	4604      	mov	r4, r0
 80091e0:	d155      	bne.n	800928e <_malloc_r+0xf2>
 80091e2:	f8d8 4000 	ldr.w	r4, [r8]
 80091e6:	4626      	mov	r6, r4
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	d145      	bne.n	8009278 <_malloc_r+0xdc>
 80091ec:	2c00      	cmp	r4, #0
 80091ee:	d048      	beq.n	8009282 <_malloc_r+0xe6>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	4631      	mov	r1, r6
 80091f4:	4638      	mov	r0, r7
 80091f6:	eb04 0903 	add.w	r9, r4, r3
 80091fa:	f000 fc95 	bl	8009b28 <_sbrk_r>
 80091fe:	4581      	cmp	r9, r0
 8009200:	d13f      	bne.n	8009282 <_malloc_r+0xe6>
 8009202:	6821      	ldr	r1, [r4, #0]
 8009204:	1a6d      	subs	r5, r5, r1
 8009206:	4629      	mov	r1, r5
 8009208:	4638      	mov	r0, r7
 800920a:	f7ff ffa7 	bl	800915c <sbrk_aligned>
 800920e:	3001      	adds	r0, #1
 8009210:	d037      	beq.n	8009282 <_malloc_r+0xe6>
 8009212:	6823      	ldr	r3, [r4, #0]
 8009214:	442b      	add	r3, r5
 8009216:	6023      	str	r3, [r4, #0]
 8009218:	f8d8 3000 	ldr.w	r3, [r8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d038      	beq.n	8009292 <_malloc_r+0xf6>
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	42a2      	cmp	r2, r4
 8009224:	d12b      	bne.n	800927e <_malloc_r+0xe2>
 8009226:	2200      	movs	r2, #0
 8009228:	605a      	str	r2, [r3, #4]
 800922a:	e00f      	b.n	800924c <_malloc_r+0xb0>
 800922c:	6822      	ldr	r2, [r4, #0]
 800922e:	1b52      	subs	r2, r2, r5
 8009230:	d41f      	bmi.n	8009272 <_malloc_r+0xd6>
 8009232:	2a0b      	cmp	r2, #11
 8009234:	d917      	bls.n	8009266 <_malloc_r+0xca>
 8009236:	1961      	adds	r1, r4, r5
 8009238:	42a3      	cmp	r3, r4
 800923a:	6025      	str	r5, [r4, #0]
 800923c:	bf18      	it	ne
 800923e:	6059      	strne	r1, [r3, #4]
 8009240:	6863      	ldr	r3, [r4, #4]
 8009242:	bf08      	it	eq
 8009244:	f8c8 1000 	streq.w	r1, [r8]
 8009248:	5162      	str	r2, [r4, r5]
 800924a:	604b      	str	r3, [r1, #4]
 800924c:	4638      	mov	r0, r7
 800924e:	f104 060b 	add.w	r6, r4, #11
 8009252:	f000 f829 	bl	80092a8 <__malloc_unlock>
 8009256:	f026 0607 	bic.w	r6, r6, #7
 800925a:	1d23      	adds	r3, r4, #4
 800925c:	1af2      	subs	r2, r6, r3
 800925e:	d0ae      	beq.n	80091be <_malloc_r+0x22>
 8009260:	1b9b      	subs	r3, r3, r6
 8009262:	50a3      	str	r3, [r4, r2]
 8009264:	e7ab      	b.n	80091be <_malloc_r+0x22>
 8009266:	42a3      	cmp	r3, r4
 8009268:	6862      	ldr	r2, [r4, #4]
 800926a:	d1dd      	bne.n	8009228 <_malloc_r+0x8c>
 800926c:	f8c8 2000 	str.w	r2, [r8]
 8009270:	e7ec      	b.n	800924c <_malloc_r+0xb0>
 8009272:	4623      	mov	r3, r4
 8009274:	6864      	ldr	r4, [r4, #4]
 8009276:	e7ac      	b.n	80091d2 <_malloc_r+0x36>
 8009278:	4634      	mov	r4, r6
 800927a:	6876      	ldr	r6, [r6, #4]
 800927c:	e7b4      	b.n	80091e8 <_malloc_r+0x4c>
 800927e:	4613      	mov	r3, r2
 8009280:	e7cc      	b.n	800921c <_malloc_r+0x80>
 8009282:	230c      	movs	r3, #12
 8009284:	603b      	str	r3, [r7, #0]
 8009286:	4638      	mov	r0, r7
 8009288:	f000 f80e 	bl	80092a8 <__malloc_unlock>
 800928c:	e797      	b.n	80091be <_malloc_r+0x22>
 800928e:	6025      	str	r5, [r4, #0]
 8009290:	e7dc      	b.n	800924c <_malloc_r+0xb0>
 8009292:	605b      	str	r3, [r3, #4]
 8009294:	deff      	udf	#255	; 0xff
 8009296:	bf00      	nop
 8009298:	2000060c 	.word	0x2000060c

0800929c <__malloc_lock>:
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <__malloc_lock+0x8>)
 800929e:	f7ff bf07 	b.w	80090b0 <__retarget_lock_acquire_recursive>
 80092a2:	bf00      	nop
 80092a4:	20000608 	.word	0x20000608

080092a8 <__malloc_unlock>:
 80092a8:	4801      	ldr	r0, [pc, #4]	; (80092b0 <__malloc_unlock+0x8>)
 80092aa:	f7ff bf02 	b.w	80090b2 <__retarget_lock_release_recursive>
 80092ae:	bf00      	nop
 80092b0:	20000608 	.word	0x20000608

080092b4 <__sfputc_r>:
 80092b4:	6893      	ldr	r3, [r2, #8]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	b410      	push	{r4}
 80092bc:	6093      	str	r3, [r2, #8]
 80092be:	da08      	bge.n	80092d2 <__sfputc_r+0x1e>
 80092c0:	6994      	ldr	r4, [r2, #24]
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	db01      	blt.n	80092ca <__sfputc_r+0x16>
 80092c6:	290a      	cmp	r1, #10
 80092c8:	d103      	bne.n	80092d2 <__sfputc_r+0x1e>
 80092ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ce:	f7ff bde2 	b.w	8008e96 <__swbuf_r>
 80092d2:	6813      	ldr	r3, [r2, #0]
 80092d4:	1c58      	adds	r0, r3, #1
 80092d6:	6010      	str	r0, [r2, #0]
 80092d8:	7019      	strb	r1, [r3, #0]
 80092da:	4608      	mov	r0, r1
 80092dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <__sfputs_r>:
 80092e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e4:	4606      	mov	r6, r0
 80092e6:	460f      	mov	r7, r1
 80092e8:	4614      	mov	r4, r2
 80092ea:	18d5      	adds	r5, r2, r3
 80092ec:	42ac      	cmp	r4, r5
 80092ee:	d101      	bne.n	80092f4 <__sfputs_r+0x12>
 80092f0:	2000      	movs	r0, #0
 80092f2:	e007      	b.n	8009304 <__sfputs_r+0x22>
 80092f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f8:	463a      	mov	r2, r7
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7ff ffda 	bl	80092b4 <__sfputc_r>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d1f3      	bne.n	80092ec <__sfputs_r+0xa>
 8009304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009308 <_vfiprintf_r>:
 8009308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930c:	460d      	mov	r5, r1
 800930e:	b09d      	sub	sp, #116	; 0x74
 8009310:	4614      	mov	r4, r2
 8009312:	4698      	mov	r8, r3
 8009314:	4606      	mov	r6, r0
 8009316:	b118      	cbz	r0, 8009320 <_vfiprintf_r+0x18>
 8009318:	6a03      	ldr	r3, [r0, #32]
 800931a:	b90b      	cbnz	r3, 8009320 <_vfiprintf_r+0x18>
 800931c:	f7ff fc1e 	bl	8008b5c <__sinit>
 8009320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009322:	07d9      	lsls	r1, r3, #31
 8009324:	d405      	bmi.n	8009332 <_vfiprintf_r+0x2a>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	059a      	lsls	r2, r3, #22
 800932a:	d402      	bmi.n	8009332 <_vfiprintf_r+0x2a>
 800932c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932e:	f7ff febf 	bl	80090b0 <__retarget_lock_acquire_recursive>
 8009332:	89ab      	ldrh	r3, [r5, #12]
 8009334:	071b      	lsls	r3, r3, #28
 8009336:	d501      	bpl.n	800933c <_vfiprintf_r+0x34>
 8009338:	692b      	ldr	r3, [r5, #16]
 800933a:	b99b      	cbnz	r3, 8009364 <_vfiprintf_r+0x5c>
 800933c:	4629      	mov	r1, r5
 800933e:	4630      	mov	r0, r6
 8009340:	f7ff fde6 	bl	8008f10 <__swsetup_r>
 8009344:	b170      	cbz	r0, 8009364 <_vfiprintf_r+0x5c>
 8009346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009348:	07dc      	lsls	r4, r3, #31
 800934a:	d504      	bpl.n	8009356 <_vfiprintf_r+0x4e>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	b01d      	add	sp, #116	; 0x74
 8009352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	0598      	lsls	r0, r3, #22
 800935a:	d4f7      	bmi.n	800934c <_vfiprintf_r+0x44>
 800935c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800935e:	f7ff fea8 	bl	80090b2 <__retarget_lock_release_recursive>
 8009362:	e7f3      	b.n	800934c <_vfiprintf_r+0x44>
 8009364:	2300      	movs	r3, #0
 8009366:	9309      	str	r3, [sp, #36]	; 0x24
 8009368:	2320      	movs	r3, #32
 800936a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800936e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009372:	2330      	movs	r3, #48	; 0x30
 8009374:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009528 <_vfiprintf_r+0x220>
 8009378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800937c:	f04f 0901 	mov.w	r9, #1
 8009380:	4623      	mov	r3, r4
 8009382:	469a      	mov	sl, r3
 8009384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009388:	b10a      	cbz	r2, 800938e <_vfiprintf_r+0x86>
 800938a:	2a25      	cmp	r2, #37	; 0x25
 800938c:	d1f9      	bne.n	8009382 <_vfiprintf_r+0x7a>
 800938e:	ebba 0b04 	subs.w	fp, sl, r4
 8009392:	d00b      	beq.n	80093ac <_vfiprintf_r+0xa4>
 8009394:	465b      	mov	r3, fp
 8009396:	4622      	mov	r2, r4
 8009398:	4629      	mov	r1, r5
 800939a:	4630      	mov	r0, r6
 800939c:	f7ff ffa1 	bl	80092e2 <__sfputs_r>
 80093a0:	3001      	adds	r0, #1
 80093a2:	f000 80a9 	beq.w	80094f8 <_vfiprintf_r+0x1f0>
 80093a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093a8:	445a      	add	r2, fp
 80093aa:	9209      	str	r2, [sp, #36]	; 0x24
 80093ac:	f89a 3000 	ldrb.w	r3, [sl]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 80a1 	beq.w	80094f8 <_vfiprintf_r+0x1f0>
 80093b6:	2300      	movs	r3, #0
 80093b8:	f04f 32ff 	mov.w	r2, #4294967295
 80093bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093c0:	f10a 0a01 	add.w	sl, sl, #1
 80093c4:	9304      	str	r3, [sp, #16]
 80093c6:	9307      	str	r3, [sp, #28]
 80093c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093cc:	931a      	str	r3, [sp, #104]	; 0x68
 80093ce:	4654      	mov	r4, sl
 80093d0:	2205      	movs	r2, #5
 80093d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d6:	4854      	ldr	r0, [pc, #336]	; (8009528 <_vfiprintf_r+0x220>)
 80093d8:	f7f6 ff22 	bl	8000220 <memchr>
 80093dc:	9a04      	ldr	r2, [sp, #16]
 80093de:	b9d8      	cbnz	r0, 8009418 <_vfiprintf_r+0x110>
 80093e0:	06d1      	lsls	r1, r2, #27
 80093e2:	bf44      	itt	mi
 80093e4:	2320      	movmi	r3, #32
 80093e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ea:	0713      	lsls	r3, r2, #28
 80093ec:	bf44      	itt	mi
 80093ee:	232b      	movmi	r3, #43	; 0x2b
 80093f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f4:	f89a 3000 	ldrb.w	r3, [sl]
 80093f8:	2b2a      	cmp	r3, #42	; 0x2a
 80093fa:	d015      	beq.n	8009428 <_vfiprintf_r+0x120>
 80093fc:	9a07      	ldr	r2, [sp, #28]
 80093fe:	4654      	mov	r4, sl
 8009400:	2000      	movs	r0, #0
 8009402:	f04f 0c0a 	mov.w	ip, #10
 8009406:	4621      	mov	r1, r4
 8009408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800940c:	3b30      	subs	r3, #48	; 0x30
 800940e:	2b09      	cmp	r3, #9
 8009410:	d94d      	bls.n	80094ae <_vfiprintf_r+0x1a6>
 8009412:	b1b0      	cbz	r0, 8009442 <_vfiprintf_r+0x13a>
 8009414:	9207      	str	r2, [sp, #28]
 8009416:	e014      	b.n	8009442 <_vfiprintf_r+0x13a>
 8009418:	eba0 0308 	sub.w	r3, r0, r8
 800941c:	fa09 f303 	lsl.w	r3, r9, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	46a2      	mov	sl, r4
 8009426:	e7d2      	b.n	80093ce <_vfiprintf_r+0xc6>
 8009428:	9b03      	ldr	r3, [sp, #12]
 800942a:	1d19      	adds	r1, r3, #4
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	9103      	str	r1, [sp, #12]
 8009430:	2b00      	cmp	r3, #0
 8009432:	bfbb      	ittet	lt
 8009434:	425b      	neglt	r3, r3
 8009436:	f042 0202 	orrlt.w	r2, r2, #2
 800943a:	9307      	strge	r3, [sp, #28]
 800943c:	9307      	strlt	r3, [sp, #28]
 800943e:	bfb8      	it	lt
 8009440:	9204      	strlt	r2, [sp, #16]
 8009442:	7823      	ldrb	r3, [r4, #0]
 8009444:	2b2e      	cmp	r3, #46	; 0x2e
 8009446:	d10c      	bne.n	8009462 <_vfiprintf_r+0x15a>
 8009448:	7863      	ldrb	r3, [r4, #1]
 800944a:	2b2a      	cmp	r3, #42	; 0x2a
 800944c:	d134      	bne.n	80094b8 <_vfiprintf_r+0x1b0>
 800944e:	9b03      	ldr	r3, [sp, #12]
 8009450:	1d1a      	adds	r2, r3, #4
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	9203      	str	r2, [sp, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bfb8      	it	lt
 800945a:	f04f 33ff 	movlt.w	r3, #4294967295
 800945e:	3402      	adds	r4, #2
 8009460:	9305      	str	r3, [sp, #20]
 8009462:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009538 <_vfiprintf_r+0x230>
 8009466:	7821      	ldrb	r1, [r4, #0]
 8009468:	2203      	movs	r2, #3
 800946a:	4650      	mov	r0, sl
 800946c:	f7f6 fed8 	bl	8000220 <memchr>
 8009470:	b138      	cbz	r0, 8009482 <_vfiprintf_r+0x17a>
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	eba0 000a 	sub.w	r0, r0, sl
 8009478:	2240      	movs	r2, #64	; 0x40
 800947a:	4082      	lsls	r2, r0
 800947c:	4313      	orrs	r3, r2
 800947e:	3401      	adds	r4, #1
 8009480:	9304      	str	r3, [sp, #16]
 8009482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009486:	4829      	ldr	r0, [pc, #164]	; (800952c <_vfiprintf_r+0x224>)
 8009488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800948c:	2206      	movs	r2, #6
 800948e:	f7f6 fec7 	bl	8000220 <memchr>
 8009492:	2800      	cmp	r0, #0
 8009494:	d03f      	beq.n	8009516 <_vfiprintf_r+0x20e>
 8009496:	4b26      	ldr	r3, [pc, #152]	; (8009530 <_vfiprintf_r+0x228>)
 8009498:	bb1b      	cbnz	r3, 80094e2 <_vfiprintf_r+0x1da>
 800949a:	9b03      	ldr	r3, [sp, #12]
 800949c:	3307      	adds	r3, #7
 800949e:	f023 0307 	bic.w	r3, r3, #7
 80094a2:	3308      	adds	r3, #8
 80094a4:	9303      	str	r3, [sp, #12]
 80094a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a8:	443b      	add	r3, r7
 80094aa:	9309      	str	r3, [sp, #36]	; 0x24
 80094ac:	e768      	b.n	8009380 <_vfiprintf_r+0x78>
 80094ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80094b2:	460c      	mov	r4, r1
 80094b4:	2001      	movs	r0, #1
 80094b6:	e7a6      	b.n	8009406 <_vfiprintf_r+0xfe>
 80094b8:	2300      	movs	r3, #0
 80094ba:	3401      	adds	r4, #1
 80094bc:	9305      	str	r3, [sp, #20]
 80094be:	4619      	mov	r1, r3
 80094c0:	f04f 0c0a 	mov.w	ip, #10
 80094c4:	4620      	mov	r0, r4
 80094c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ca:	3a30      	subs	r2, #48	; 0x30
 80094cc:	2a09      	cmp	r2, #9
 80094ce:	d903      	bls.n	80094d8 <_vfiprintf_r+0x1d0>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0c6      	beq.n	8009462 <_vfiprintf_r+0x15a>
 80094d4:	9105      	str	r1, [sp, #20]
 80094d6:	e7c4      	b.n	8009462 <_vfiprintf_r+0x15a>
 80094d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094dc:	4604      	mov	r4, r0
 80094de:	2301      	movs	r3, #1
 80094e0:	e7f0      	b.n	80094c4 <_vfiprintf_r+0x1bc>
 80094e2:	ab03      	add	r3, sp, #12
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	462a      	mov	r2, r5
 80094e8:	4b12      	ldr	r3, [pc, #72]	; (8009534 <_vfiprintf_r+0x22c>)
 80094ea:	a904      	add	r1, sp, #16
 80094ec:	4630      	mov	r0, r6
 80094ee:	f3af 8000 	nop.w
 80094f2:	4607      	mov	r7, r0
 80094f4:	1c78      	adds	r0, r7, #1
 80094f6:	d1d6      	bne.n	80094a6 <_vfiprintf_r+0x19e>
 80094f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094fa:	07d9      	lsls	r1, r3, #31
 80094fc:	d405      	bmi.n	800950a <_vfiprintf_r+0x202>
 80094fe:	89ab      	ldrh	r3, [r5, #12]
 8009500:	059a      	lsls	r2, r3, #22
 8009502:	d402      	bmi.n	800950a <_vfiprintf_r+0x202>
 8009504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009506:	f7ff fdd4 	bl	80090b2 <__retarget_lock_release_recursive>
 800950a:	89ab      	ldrh	r3, [r5, #12]
 800950c:	065b      	lsls	r3, r3, #25
 800950e:	f53f af1d 	bmi.w	800934c <_vfiprintf_r+0x44>
 8009512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009514:	e71c      	b.n	8009350 <_vfiprintf_r+0x48>
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <_vfiprintf_r+0x22c>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4630      	mov	r0, r6
 8009522:	f000 f879 	bl	8009618 <_printf_i>
 8009526:	e7e4      	b.n	80094f2 <_vfiprintf_r+0x1ea>
 8009528:	08009d04 	.word	0x08009d04
 800952c:	08009d0e 	.word	0x08009d0e
 8009530:	00000000 	.word	0x00000000
 8009534:	080092e3 	.word	0x080092e3
 8009538:	08009d0a 	.word	0x08009d0a

0800953c <_printf_common>:
 800953c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009540:	4616      	mov	r6, r2
 8009542:	4699      	mov	r9, r3
 8009544:	688a      	ldr	r2, [r1, #8]
 8009546:	690b      	ldr	r3, [r1, #16]
 8009548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800954c:	4293      	cmp	r3, r2
 800954e:	bfb8      	it	lt
 8009550:	4613      	movlt	r3, r2
 8009552:	6033      	str	r3, [r6, #0]
 8009554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009558:	4607      	mov	r7, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b10a      	cbz	r2, 8009562 <_printf_common+0x26>
 800955e:	3301      	adds	r3, #1
 8009560:	6033      	str	r3, [r6, #0]
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	0699      	lsls	r1, r3, #26
 8009566:	bf42      	ittt	mi
 8009568:	6833      	ldrmi	r3, [r6, #0]
 800956a:	3302      	addmi	r3, #2
 800956c:	6033      	strmi	r3, [r6, #0]
 800956e:	6825      	ldr	r5, [r4, #0]
 8009570:	f015 0506 	ands.w	r5, r5, #6
 8009574:	d106      	bne.n	8009584 <_printf_common+0x48>
 8009576:	f104 0a19 	add.w	sl, r4, #25
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	6832      	ldr	r2, [r6, #0]
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	42ab      	cmp	r3, r5
 8009582:	dc26      	bgt.n	80095d2 <_printf_common+0x96>
 8009584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009588:	1e13      	subs	r3, r2, #0
 800958a:	6822      	ldr	r2, [r4, #0]
 800958c:	bf18      	it	ne
 800958e:	2301      	movne	r3, #1
 8009590:	0692      	lsls	r2, r2, #26
 8009592:	d42b      	bmi.n	80095ec <_printf_common+0xb0>
 8009594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009598:	4649      	mov	r1, r9
 800959a:	4638      	mov	r0, r7
 800959c:	47c0      	blx	r8
 800959e:	3001      	adds	r0, #1
 80095a0:	d01e      	beq.n	80095e0 <_printf_common+0xa4>
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	6922      	ldr	r2, [r4, #16]
 80095a6:	f003 0306 	and.w	r3, r3, #6
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	bf02      	ittt	eq
 80095ae:	68e5      	ldreq	r5, [r4, #12]
 80095b0:	6833      	ldreq	r3, [r6, #0]
 80095b2:	1aed      	subeq	r5, r5, r3
 80095b4:	68a3      	ldr	r3, [r4, #8]
 80095b6:	bf0c      	ite	eq
 80095b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095bc:	2500      	movne	r5, #0
 80095be:	4293      	cmp	r3, r2
 80095c0:	bfc4      	itt	gt
 80095c2:	1a9b      	subgt	r3, r3, r2
 80095c4:	18ed      	addgt	r5, r5, r3
 80095c6:	2600      	movs	r6, #0
 80095c8:	341a      	adds	r4, #26
 80095ca:	42b5      	cmp	r5, r6
 80095cc:	d11a      	bne.n	8009604 <_printf_common+0xc8>
 80095ce:	2000      	movs	r0, #0
 80095d0:	e008      	b.n	80095e4 <_printf_common+0xa8>
 80095d2:	2301      	movs	r3, #1
 80095d4:	4652      	mov	r2, sl
 80095d6:	4649      	mov	r1, r9
 80095d8:	4638      	mov	r0, r7
 80095da:	47c0      	blx	r8
 80095dc:	3001      	adds	r0, #1
 80095de:	d103      	bne.n	80095e8 <_printf_common+0xac>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e8:	3501      	adds	r5, #1
 80095ea:	e7c6      	b.n	800957a <_printf_common+0x3e>
 80095ec:	18e1      	adds	r1, r4, r3
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	2030      	movs	r0, #48	; 0x30
 80095f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80095f6:	4422      	add	r2, r4
 80095f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009600:	3302      	adds	r3, #2
 8009602:	e7c7      	b.n	8009594 <_printf_common+0x58>
 8009604:	2301      	movs	r3, #1
 8009606:	4622      	mov	r2, r4
 8009608:	4649      	mov	r1, r9
 800960a:	4638      	mov	r0, r7
 800960c:	47c0      	blx	r8
 800960e:	3001      	adds	r0, #1
 8009610:	d0e6      	beq.n	80095e0 <_printf_common+0xa4>
 8009612:	3601      	adds	r6, #1
 8009614:	e7d9      	b.n	80095ca <_printf_common+0x8e>
	...

08009618 <_printf_i>:
 8009618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	7e0f      	ldrb	r7, [r1, #24]
 800961e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009620:	2f78      	cmp	r7, #120	; 0x78
 8009622:	4691      	mov	r9, r2
 8009624:	4680      	mov	r8, r0
 8009626:	460c      	mov	r4, r1
 8009628:	469a      	mov	sl, r3
 800962a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800962e:	d807      	bhi.n	8009640 <_printf_i+0x28>
 8009630:	2f62      	cmp	r7, #98	; 0x62
 8009632:	d80a      	bhi.n	800964a <_printf_i+0x32>
 8009634:	2f00      	cmp	r7, #0
 8009636:	f000 80d4 	beq.w	80097e2 <_printf_i+0x1ca>
 800963a:	2f58      	cmp	r7, #88	; 0x58
 800963c:	f000 80c0 	beq.w	80097c0 <_printf_i+0x1a8>
 8009640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009648:	e03a      	b.n	80096c0 <_printf_i+0xa8>
 800964a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800964e:	2b15      	cmp	r3, #21
 8009650:	d8f6      	bhi.n	8009640 <_printf_i+0x28>
 8009652:	a101      	add	r1, pc, #4	; (adr r1, 8009658 <_printf_i+0x40>)
 8009654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009658:	080096b1 	.word	0x080096b1
 800965c:	080096c5 	.word	0x080096c5
 8009660:	08009641 	.word	0x08009641
 8009664:	08009641 	.word	0x08009641
 8009668:	08009641 	.word	0x08009641
 800966c:	08009641 	.word	0x08009641
 8009670:	080096c5 	.word	0x080096c5
 8009674:	08009641 	.word	0x08009641
 8009678:	08009641 	.word	0x08009641
 800967c:	08009641 	.word	0x08009641
 8009680:	08009641 	.word	0x08009641
 8009684:	080097c9 	.word	0x080097c9
 8009688:	080096f1 	.word	0x080096f1
 800968c:	08009783 	.word	0x08009783
 8009690:	08009641 	.word	0x08009641
 8009694:	08009641 	.word	0x08009641
 8009698:	080097eb 	.word	0x080097eb
 800969c:	08009641 	.word	0x08009641
 80096a0:	080096f1 	.word	0x080096f1
 80096a4:	08009641 	.word	0x08009641
 80096a8:	08009641 	.word	0x08009641
 80096ac:	0800978b 	.word	0x0800978b
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	1d1a      	adds	r2, r3, #4
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	602a      	str	r2, [r5, #0]
 80096b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096c0:	2301      	movs	r3, #1
 80096c2:	e09f      	b.n	8009804 <_printf_i+0x1ec>
 80096c4:	6820      	ldr	r0, [r4, #0]
 80096c6:	682b      	ldr	r3, [r5, #0]
 80096c8:	0607      	lsls	r7, r0, #24
 80096ca:	f103 0104 	add.w	r1, r3, #4
 80096ce:	6029      	str	r1, [r5, #0]
 80096d0:	d501      	bpl.n	80096d6 <_printf_i+0xbe>
 80096d2:	681e      	ldr	r6, [r3, #0]
 80096d4:	e003      	b.n	80096de <_printf_i+0xc6>
 80096d6:	0646      	lsls	r6, r0, #25
 80096d8:	d5fb      	bpl.n	80096d2 <_printf_i+0xba>
 80096da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80096de:	2e00      	cmp	r6, #0
 80096e0:	da03      	bge.n	80096ea <_printf_i+0xd2>
 80096e2:	232d      	movs	r3, #45	; 0x2d
 80096e4:	4276      	negs	r6, r6
 80096e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096ea:	485a      	ldr	r0, [pc, #360]	; (8009854 <_printf_i+0x23c>)
 80096ec:	230a      	movs	r3, #10
 80096ee:	e012      	b.n	8009716 <_printf_i+0xfe>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	6820      	ldr	r0, [r4, #0]
 80096f4:	1d19      	adds	r1, r3, #4
 80096f6:	6029      	str	r1, [r5, #0]
 80096f8:	0605      	lsls	r5, r0, #24
 80096fa:	d501      	bpl.n	8009700 <_printf_i+0xe8>
 80096fc:	681e      	ldr	r6, [r3, #0]
 80096fe:	e002      	b.n	8009706 <_printf_i+0xee>
 8009700:	0641      	lsls	r1, r0, #25
 8009702:	d5fb      	bpl.n	80096fc <_printf_i+0xe4>
 8009704:	881e      	ldrh	r6, [r3, #0]
 8009706:	4853      	ldr	r0, [pc, #332]	; (8009854 <_printf_i+0x23c>)
 8009708:	2f6f      	cmp	r7, #111	; 0x6f
 800970a:	bf0c      	ite	eq
 800970c:	2308      	moveq	r3, #8
 800970e:	230a      	movne	r3, #10
 8009710:	2100      	movs	r1, #0
 8009712:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009716:	6865      	ldr	r5, [r4, #4]
 8009718:	60a5      	str	r5, [r4, #8]
 800971a:	2d00      	cmp	r5, #0
 800971c:	bfa2      	ittt	ge
 800971e:	6821      	ldrge	r1, [r4, #0]
 8009720:	f021 0104 	bicge.w	r1, r1, #4
 8009724:	6021      	strge	r1, [r4, #0]
 8009726:	b90e      	cbnz	r6, 800972c <_printf_i+0x114>
 8009728:	2d00      	cmp	r5, #0
 800972a:	d04b      	beq.n	80097c4 <_printf_i+0x1ac>
 800972c:	4615      	mov	r5, r2
 800972e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009732:	fb03 6711 	mls	r7, r3, r1, r6
 8009736:	5dc7      	ldrb	r7, [r0, r7]
 8009738:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800973c:	4637      	mov	r7, r6
 800973e:	42bb      	cmp	r3, r7
 8009740:	460e      	mov	r6, r1
 8009742:	d9f4      	bls.n	800972e <_printf_i+0x116>
 8009744:	2b08      	cmp	r3, #8
 8009746:	d10b      	bne.n	8009760 <_printf_i+0x148>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	07de      	lsls	r6, r3, #31
 800974c:	d508      	bpl.n	8009760 <_printf_i+0x148>
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	6861      	ldr	r1, [r4, #4]
 8009752:	4299      	cmp	r1, r3
 8009754:	bfde      	ittt	le
 8009756:	2330      	movle	r3, #48	; 0x30
 8009758:	f805 3c01 	strble.w	r3, [r5, #-1]
 800975c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009760:	1b52      	subs	r2, r2, r5
 8009762:	6122      	str	r2, [r4, #16]
 8009764:	f8cd a000 	str.w	sl, [sp]
 8009768:	464b      	mov	r3, r9
 800976a:	aa03      	add	r2, sp, #12
 800976c:	4621      	mov	r1, r4
 800976e:	4640      	mov	r0, r8
 8009770:	f7ff fee4 	bl	800953c <_printf_common>
 8009774:	3001      	adds	r0, #1
 8009776:	d14a      	bne.n	800980e <_printf_i+0x1f6>
 8009778:	f04f 30ff 	mov.w	r0, #4294967295
 800977c:	b004      	add	sp, #16
 800977e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	f043 0320 	orr.w	r3, r3, #32
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	4833      	ldr	r0, [pc, #204]	; (8009858 <_printf_i+0x240>)
 800978c:	2778      	movs	r7, #120	; 0x78
 800978e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	6829      	ldr	r1, [r5, #0]
 8009796:	061f      	lsls	r7, r3, #24
 8009798:	f851 6b04 	ldr.w	r6, [r1], #4
 800979c:	d402      	bmi.n	80097a4 <_printf_i+0x18c>
 800979e:	065f      	lsls	r7, r3, #25
 80097a0:	bf48      	it	mi
 80097a2:	b2b6      	uxthmi	r6, r6
 80097a4:	07df      	lsls	r7, r3, #31
 80097a6:	bf48      	it	mi
 80097a8:	f043 0320 	orrmi.w	r3, r3, #32
 80097ac:	6029      	str	r1, [r5, #0]
 80097ae:	bf48      	it	mi
 80097b0:	6023      	strmi	r3, [r4, #0]
 80097b2:	b91e      	cbnz	r6, 80097bc <_printf_i+0x1a4>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	f023 0320 	bic.w	r3, r3, #32
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	2310      	movs	r3, #16
 80097be:	e7a7      	b.n	8009710 <_printf_i+0xf8>
 80097c0:	4824      	ldr	r0, [pc, #144]	; (8009854 <_printf_i+0x23c>)
 80097c2:	e7e4      	b.n	800978e <_printf_i+0x176>
 80097c4:	4615      	mov	r5, r2
 80097c6:	e7bd      	b.n	8009744 <_printf_i+0x12c>
 80097c8:	682b      	ldr	r3, [r5, #0]
 80097ca:	6826      	ldr	r6, [r4, #0]
 80097cc:	6961      	ldr	r1, [r4, #20]
 80097ce:	1d18      	adds	r0, r3, #4
 80097d0:	6028      	str	r0, [r5, #0]
 80097d2:	0635      	lsls	r5, r6, #24
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0x1c4>
 80097d8:	6019      	str	r1, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0x1ca>
 80097dc:	0670      	lsls	r0, r6, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0x1c0>
 80097e0:	8019      	strh	r1, [r3, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	6123      	str	r3, [r4, #16]
 80097e6:	4615      	mov	r5, r2
 80097e8:	e7bc      	b.n	8009764 <_printf_i+0x14c>
 80097ea:	682b      	ldr	r3, [r5, #0]
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	681d      	ldr	r5, [r3, #0]
 80097f2:	6862      	ldr	r2, [r4, #4]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7f6 fd12 	bl	8000220 <memchr>
 80097fc:	b108      	cbz	r0, 8009802 <_printf_i+0x1ea>
 80097fe:	1b40      	subs	r0, r0, r5
 8009800:	6060      	str	r0, [r4, #4]
 8009802:	6863      	ldr	r3, [r4, #4]
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	2300      	movs	r3, #0
 8009808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800980c:	e7aa      	b.n	8009764 <_printf_i+0x14c>
 800980e:	6923      	ldr	r3, [r4, #16]
 8009810:	462a      	mov	r2, r5
 8009812:	4649      	mov	r1, r9
 8009814:	4640      	mov	r0, r8
 8009816:	47d0      	blx	sl
 8009818:	3001      	adds	r0, #1
 800981a:	d0ad      	beq.n	8009778 <_printf_i+0x160>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	079b      	lsls	r3, r3, #30
 8009820:	d413      	bmi.n	800984a <_printf_i+0x232>
 8009822:	68e0      	ldr	r0, [r4, #12]
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	4298      	cmp	r0, r3
 8009828:	bfb8      	it	lt
 800982a:	4618      	movlt	r0, r3
 800982c:	e7a6      	b.n	800977c <_printf_i+0x164>
 800982e:	2301      	movs	r3, #1
 8009830:	4632      	mov	r2, r6
 8009832:	4649      	mov	r1, r9
 8009834:	4640      	mov	r0, r8
 8009836:	47d0      	blx	sl
 8009838:	3001      	adds	r0, #1
 800983a:	d09d      	beq.n	8009778 <_printf_i+0x160>
 800983c:	3501      	adds	r5, #1
 800983e:	68e3      	ldr	r3, [r4, #12]
 8009840:	9903      	ldr	r1, [sp, #12]
 8009842:	1a5b      	subs	r3, r3, r1
 8009844:	42ab      	cmp	r3, r5
 8009846:	dcf2      	bgt.n	800982e <_printf_i+0x216>
 8009848:	e7eb      	b.n	8009822 <_printf_i+0x20a>
 800984a:	2500      	movs	r5, #0
 800984c:	f104 0619 	add.w	r6, r4, #25
 8009850:	e7f5      	b.n	800983e <_printf_i+0x226>
 8009852:	bf00      	nop
 8009854:	08009d15 	.word	0x08009d15
 8009858:	08009d26 	.word	0x08009d26

0800985c <__sflush_r>:
 800985c:	898a      	ldrh	r2, [r1, #12]
 800985e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009862:	4605      	mov	r5, r0
 8009864:	0710      	lsls	r0, r2, #28
 8009866:	460c      	mov	r4, r1
 8009868:	d458      	bmi.n	800991c <__sflush_r+0xc0>
 800986a:	684b      	ldr	r3, [r1, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc05      	bgt.n	800987c <__sflush_r+0x20>
 8009870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009872:	2b00      	cmp	r3, #0
 8009874:	dc02      	bgt.n	800987c <__sflush_r+0x20>
 8009876:	2000      	movs	r0, #0
 8009878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800987c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800987e:	2e00      	cmp	r6, #0
 8009880:	d0f9      	beq.n	8009876 <__sflush_r+0x1a>
 8009882:	2300      	movs	r3, #0
 8009884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009888:	682f      	ldr	r7, [r5, #0]
 800988a:	6a21      	ldr	r1, [r4, #32]
 800988c:	602b      	str	r3, [r5, #0]
 800988e:	d032      	beq.n	80098f6 <__sflush_r+0x9a>
 8009890:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009892:	89a3      	ldrh	r3, [r4, #12]
 8009894:	075a      	lsls	r2, r3, #29
 8009896:	d505      	bpl.n	80098a4 <__sflush_r+0x48>
 8009898:	6863      	ldr	r3, [r4, #4]
 800989a:	1ac0      	subs	r0, r0, r3
 800989c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800989e:	b10b      	cbz	r3, 80098a4 <__sflush_r+0x48>
 80098a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098a2:	1ac0      	subs	r0, r0, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	4602      	mov	r2, r0
 80098a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098aa:	6a21      	ldr	r1, [r4, #32]
 80098ac:	4628      	mov	r0, r5
 80098ae:	47b0      	blx	r6
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	d106      	bne.n	80098c4 <__sflush_r+0x68>
 80098b6:	6829      	ldr	r1, [r5, #0]
 80098b8:	291d      	cmp	r1, #29
 80098ba:	d82b      	bhi.n	8009914 <__sflush_r+0xb8>
 80098bc:	4a29      	ldr	r2, [pc, #164]	; (8009964 <__sflush_r+0x108>)
 80098be:	410a      	asrs	r2, r1
 80098c0:	07d6      	lsls	r6, r2, #31
 80098c2:	d427      	bmi.n	8009914 <__sflush_r+0xb8>
 80098c4:	2200      	movs	r2, #0
 80098c6:	6062      	str	r2, [r4, #4]
 80098c8:	04d9      	lsls	r1, r3, #19
 80098ca:	6922      	ldr	r2, [r4, #16]
 80098cc:	6022      	str	r2, [r4, #0]
 80098ce:	d504      	bpl.n	80098da <__sflush_r+0x7e>
 80098d0:	1c42      	adds	r2, r0, #1
 80098d2:	d101      	bne.n	80098d8 <__sflush_r+0x7c>
 80098d4:	682b      	ldr	r3, [r5, #0]
 80098d6:	b903      	cbnz	r3, 80098da <__sflush_r+0x7e>
 80098d8:	6560      	str	r0, [r4, #84]	; 0x54
 80098da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098dc:	602f      	str	r7, [r5, #0]
 80098de:	2900      	cmp	r1, #0
 80098e0:	d0c9      	beq.n	8009876 <__sflush_r+0x1a>
 80098e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098e6:	4299      	cmp	r1, r3
 80098e8:	d002      	beq.n	80098f0 <__sflush_r+0x94>
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7ff fbe2 	bl	80090b4 <_free_r>
 80098f0:	2000      	movs	r0, #0
 80098f2:	6360      	str	r0, [r4, #52]	; 0x34
 80098f4:	e7c0      	b.n	8009878 <__sflush_r+0x1c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	1c41      	adds	r1, r0, #1
 80098fe:	d1c8      	bne.n	8009892 <__sflush_r+0x36>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0c5      	beq.n	8009892 <__sflush_r+0x36>
 8009906:	2b1d      	cmp	r3, #29
 8009908:	d001      	beq.n	800990e <__sflush_r+0xb2>
 800990a:	2b16      	cmp	r3, #22
 800990c:	d101      	bne.n	8009912 <__sflush_r+0xb6>
 800990e:	602f      	str	r7, [r5, #0]
 8009910:	e7b1      	b.n	8009876 <__sflush_r+0x1a>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	e7ad      	b.n	8009878 <__sflush_r+0x1c>
 800991c:	690f      	ldr	r7, [r1, #16]
 800991e:	2f00      	cmp	r7, #0
 8009920:	d0a9      	beq.n	8009876 <__sflush_r+0x1a>
 8009922:	0793      	lsls	r3, r2, #30
 8009924:	680e      	ldr	r6, [r1, #0]
 8009926:	bf08      	it	eq
 8009928:	694b      	ldreq	r3, [r1, #20]
 800992a:	600f      	str	r7, [r1, #0]
 800992c:	bf18      	it	ne
 800992e:	2300      	movne	r3, #0
 8009930:	eba6 0807 	sub.w	r8, r6, r7
 8009934:	608b      	str	r3, [r1, #8]
 8009936:	f1b8 0f00 	cmp.w	r8, #0
 800993a:	dd9c      	ble.n	8009876 <__sflush_r+0x1a>
 800993c:	6a21      	ldr	r1, [r4, #32]
 800993e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009940:	4643      	mov	r3, r8
 8009942:	463a      	mov	r2, r7
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	2800      	cmp	r0, #0
 800994a:	dc06      	bgt.n	800995a <__sflush_r+0xfe>
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295
 8009958:	e78e      	b.n	8009878 <__sflush_r+0x1c>
 800995a:	4407      	add	r7, r0
 800995c:	eba8 0800 	sub.w	r8, r8, r0
 8009960:	e7e9      	b.n	8009936 <__sflush_r+0xda>
 8009962:	bf00      	nop
 8009964:	dfbffffe 	.word	0xdfbffffe

08009968 <_fflush_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	690b      	ldr	r3, [r1, #16]
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	b913      	cbnz	r3, 8009978 <_fflush_r+0x10>
 8009972:	2500      	movs	r5, #0
 8009974:	4628      	mov	r0, r5
 8009976:	bd38      	pop	{r3, r4, r5, pc}
 8009978:	b118      	cbz	r0, 8009982 <_fflush_r+0x1a>
 800997a:	6a03      	ldr	r3, [r0, #32]
 800997c:	b90b      	cbnz	r3, 8009982 <_fflush_r+0x1a>
 800997e:	f7ff f8ed 	bl	8008b5c <__sinit>
 8009982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f3      	beq.n	8009972 <_fflush_r+0xa>
 800998a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800998c:	07d0      	lsls	r0, r2, #31
 800998e:	d404      	bmi.n	800999a <_fflush_r+0x32>
 8009990:	0599      	lsls	r1, r3, #22
 8009992:	d402      	bmi.n	800999a <_fflush_r+0x32>
 8009994:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009996:	f7ff fb8b 	bl	80090b0 <__retarget_lock_acquire_recursive>
 800999a:	4628      	mov	r0, r5
 800999c:	4621      	mov	r1, r4
 800999e:	f7ff ff5d 	bl	800985c <__sflush_r>
 80099a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099a4:	07da      	lsls	r2, r3, #31
 80099a6:	4605      	mov	r5, r0
 80099a8:	d4e4      	bmi.n	8009974 <_fflush_r+0xc>
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	059b      	lsls	r3, r3, #22
 80099ae:	d4e1      	bmi.n	8009974 <_fflush_r+0xc>
 80099b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099b2:	f7ff fb7e 	bl	80090b2 <__retarget_lock_release_recursive>
 80099b6:	e7dd      	b.n	8009974 <_fflush_r+0xc>

080099b8 <__swhatbuf_r>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	460c      	mov	r4, r1
 80099bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c0:	2900      	cmp	r1, #0
 80099c2:	b096      	sub	sp, #88	; 0x58
 80099c4:	4615      	mov	r5, r2
 80099c6:	461e      	mov	r6, r3
 80099c8:	da0d      	bge.n	80099e6 <__swhatbuf_r+0x2e>
 80099ca:	89a3      	ldrh	r3, [r4, #12]
 80099cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80099d0:	f04f 0100 	mov.w	r1, #0
 80099d4:	bf0c      	ite	eq
 80099d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80099da:	2340      	movne	r3, #64	; 0x40
 80099dc:	2000      	movs	r0, #0
 80099de:	6031      	str	r1, [r6, #0]
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	b016      	add	sp, #88	; 0x58
 80099e4:	bd70      	pop	{r4, r5, r6, pc}
 80099e6:	466a      	mov	r2, sp
 80099e8:	f000 f87c 	bl	8009ae4 <_fstat_r>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	dbec      	blt.n	80099ca <__swhatbuf_r+0x12>
 80099f0:	9901      	ldr	r1, [sp, #4]
 80099f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80099f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80099fa:	4259      	negs	r1, r3
 80099fc:	4159      	adcs	r1, r3
 80099fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a02:	e7eb      	b.n	80099dc <__swhatbuf_r+0x24>

08009a04 <__smakebuf_r>:
 8009a04:	898b      	ldrh	r3, [r1, #12]
 8009a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a08:	079d      	lsls	r5, r3, #30
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	d507      	bpl.n	8009a20 <__smakebuf_r+0x1c>
 8009a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	6123      	str	r3, [r4, #16]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	6163      	str	r3, [r4, #20]
 8009a1c:	b002      	add	sp, #8
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	ab01      	add	r3, sp, #4
 8009a22:	466a      	mov	r2, sp
 8009a24:	f7ff ffc8 	bl	80099b8 <__swhatbuf_r>
 8009a28:	9900      	ldr	r1, [sp, #0]
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff fbb5 	bl	800919c <_malloc_r>
 8009a32:	b948      	cbnz	r0, 8009a48 <__smakebuf_r+0x44>
 8009a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a38:	059a      	lsls	r2, r3, #22
 8009a3a:	d4ef      	bmi.n	8009a1c <__smakebuf_r+0x18>
 8009a3c:	f023 0303 	bic.w	r3, r3, #3
 8009a40:	f043 0302 	orr.w	r3, r3, #2
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	e7e3      	b.n	8009a10 <__smakebuf_r+0xc>
 8009a48:	89a3      	ldrh	r3, [r4, #12]
 8009a4a:	6020      	str	r0, [r4, #0]
 8009a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a50:	81a3      	strh	r3, [r4, #12]
 8009a52:	9b00      	ldr	r3, [sp, #0]
 8009a54:	6163      	str	r3, [r4, #20]
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	6120      	str	r0, [r4, #16]
 8009a5a:	b15b      	cbz	r3, 8009a74 <__smakebuf_r+0x70>
 8009a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a60:	4630      	mov	r0, r6
 8009a62:	f000 f851 	bl	8009b08 <_isatty_r>
 8009a66:	b128      	cbz	r0, 8009a74 <__smakebuf_r+0x70>
 8009a68:	89a3      	ldrh	r3, [r4, #12]
 8009a6a:	f023 0303 	bic.w	r3, r3, #3
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	431d      	orrs	r5, r3
 8009a78:	81a5      	strh	r5, [r4, #12]
 8009a7a:	e7cf      	b.n	8009a1c <__smakebuf_r+0x18>

08009a7c <_putc_r>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	460d      	mov	r5, r1
 8009a80:	4614      	mov	r4, r2
 8009a82:	4606      	mov	r6, r0
 8009a84:	b118      	cbz	r0, 8009a8e <_putc_r+0x12>
 8009a86:	6a03      	ldr	r3, [r0, #32]
 8009a88:	b90b      	cbnz	r3, 8009a8e <_putc_r+0x12>
 8009a8a:	f7ff f867 	bl	8008b5c <__sinit>
 8009a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a90:	07d8      	lsls	r0, r3, #31
 8009a92:	d405      	bmi.n	8009aa0 <_putc_r+0x24>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	0599      	lsls	r1, r3, #22
 8009a98:	d402      	bmi.n	8009aa0 <_putc_r+0x24>
 8009a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a9c:	f7ff fb08 	bl	80090b0 <__retarget_lock_acquire_recursive>
 8009aa0:	68a3      	ldr	r3, [r4, #8]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	da05      	bge.n	8009ab6 <_putc_r+0x3a>
 8009aaa:	69a2      	ldr	r2, [r4, #24]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	db12      	blt.n	8009ad6 <_putc_r+0x5a>
 8009ab0:	b2eb      	uxtb	r3, r5
 8009ab2:	2b0a      	cmp	r3, #10
 8009ab4:	d00f      	beq.n	8009ad6 <_putc_r+0x5a>
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	6022      	str	r2, [r4, #0]
 8009abc:	701d      	strb	r5, [r3, #0]
 8009abe:	b2ed      	uxtb	r5, r5
 8009ac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ac2:	07da      	lsls	r2, r3, #31
 8009ac4:	d405      	bmi.n	8009ad2 <_putc_r+0x56>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	d402      	bmi.n	8009ad2 <_putc_r+0x56>
 8009acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ace:	f7ff faf0 	bl	80090b2 <__retarget_lock_release_recursive>
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	bd70      	pop	{r4, r5, r6, pc}
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7ff f9db 	bl	8008e96 <__swbuf_r>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	e7ed      	b.n	8009ac0 <_putc_r+0x44>

08009ae4 <_fstat_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d07      	ldr	r5, [pc, #28]	; (8009b04 <_fstat_r+0x20>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f7f7 fc05 	bl	8001300 <_fstat>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	d102      	bne.n	8009b00 <_fstat_r+0x1c>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	b103      	cbz	r3, 8009b00 <_fstat_r+0x1c>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	20000604 	.word	0x20000604

08009b08 <_isatty_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d06      	ldr	r5, [pc, #24]	; (8009b24 <_isatty_r+0x1c>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7f7 fb62 	bl	80011dc <_isatty>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_isatty_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_isatty_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000604 	.word	0x20000604

08009b28 <_sbrk_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d06      	ldr	r5, [pc, #24]	; (8009b44 <_sbrk_r+0x1c>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	602b      	str	r3, [r5, #0]
 8009b34:	f7f8 f82e 	bl	8001b94 <_sbrk>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_sbrk_r+0x1a>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_sbrk_r+0x1a>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20000604 	.word	0x20000604

08009b48 <_init>:
 8009b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b4a:	bf00      	nop
 8009b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b4e:	bc08      	pop	{r3}
 8009b50:	469e      	mov	lr, r3
 8009b52:	4770      	bx	lr

08009b54 <_fini>:
 8009b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b56:	bf00      	nop
 8009b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5a:	bc08      	pop	{r3}
 8009b5c:	469e      	mov	lr, r3
 8009b5e:	4770      	bx	lr
